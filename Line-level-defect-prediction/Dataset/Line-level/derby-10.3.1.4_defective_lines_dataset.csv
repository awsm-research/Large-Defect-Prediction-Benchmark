File,Line_number,SRC
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,209,FromList fromList) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,217,"fromList, new SubqueryList(), new Vector());"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,221,"fromList, new SubqueryList(), new Vector());"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,260,"findType(((ConditionalNode)thenNode).thenElseList, fromList);"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,269,"findType(((ConditionalNode)elseNode).thenElseList, fromList);"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,391,"recastNullNodes(thenElseList, findType(thenElseList, fromList));"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,340,QueryTreeNode cast = getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,384,QueryTreeNode cast = getNodeFactory().getNode(
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,3065,if (types != null  &&  types.length >= 1) {
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1754,int i=0;
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1755,final int numberOfTableTypesInDerby = 4;
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1756,for (; i<types.length; i++){
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1766,"s.setString(i+4, types[i].substring(0, 1));"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1768,for (; i<numberOfTableTypesInDerby; i++) {
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1769,"s.setNull(i+4, Types.CHAR);"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2982,} else {
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1772,"s.setString(4, ""T"");"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1773,"s.setString(5, ""S"");"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1774,"s.setString(6, ""V"");"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1775,"s.setString(7, ""A"");"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2322,getLanguageConnectionContext().getDataDictionary().checkVersion(
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,3556,s = getEmbedConnection().prepareMetaDataStatement(queryText);
java/testing/org/apache/derbyTesting/junit/JDBC.java,59,"new String[] {""AA_DERBY-1790-SYNONYM""};"
java/testing/org/apache/derbyTesting/junit/JDBC.java,835,&& (rsmd.getColumnType(i+1) == Types.SMALLINT))
java/testing/org/apache/derbyTesting/junit/JDBC.java,839,"obj = (rs.getShort(i+1) == 0) ? ""false"" : ""true"";"
java/testing/org/apache/derbyTesting/junit/JDBC.java,841,obj = rs.getString(i+1);
java/testing/org/apache/derbyTesting/junit/JDBC.java,846,obj = rs.getString(i+1);
java/testing/org/apache/derbyTesting/junit/JDBC.java,856,obj = rs.getObject(i+1);
java/testing/org/apache/derbyTesting/junit/JDBC.java,874,"rsmd.getColumnName(i+1) + ""', row "" + rowNum +"
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,237,"return quoteStringIfNecessary(getSchemaName()) + ""."" +"
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,238,quoteStringIfNecessary(getName());
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,252,private String quoteStringIfNecessary(String name)
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,258,return name;
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,205,DataTypeDescriptor.getBuiltInDataTypeDescriptor(
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,206,"Types.VARCHAR, true, tc"
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,207,.getCastToCharWidth(leftOperand
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,208,".getTypeServices())),"
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,218,DataTypeDescriptor.getBuiltInDataTypeDescriptor(
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,219,"Types.VARCHAR, true, tc"
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,220,.getCastToCharWidth(rightOperand
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,221,".getTypeServices())),"
java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java,109,"DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR, true,"
java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java,110,operand.getTypeCompiler().
java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java,111,getCastToCharWidth(
java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java,112,"operand.getTypeServices())),"
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,741,"DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR, true,"
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,742,vnTC.getCastToCharWidth(
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,743,"vn.getTypeServices())),"
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,293,mb.upCast(leftInterfaceType);
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,763,"TypeId	resultType;"
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,811,resultType = receiverType = receiver.getTypeId();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1234,"p.put(Attribute.CLIENT_SECURITY_MECHANISM,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1165,"if (sqlState.regionMatches(0,SQLState.DATABASE_NOT_FOUND,0,5) |"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1166,"sqlState.regionMatches(0,SQLState.NO_SUCH_DATABASE,0,5))"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1168,else
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1169,"if (sqlState.regionMatches(0,SQLState.LOGIN_FAILED,0,5) ||"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1170,"sqlState.regionMatches(0,SQLState.AUTH_INVALID_USER_NAME,0,5))"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8135,else
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1259,"if (sqlState.regionMatches(0,SQLState.LOGIN_FAILED,0,5))"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1262,return 0;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4646,"setAsCharacterStream(ps,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4657,"setAsCharacterStream(ps,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4668,"setAsCharacterStream(ps,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8262,"private static void setAsCharacterStream(PreparedStatement ps,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5740,sqlerrmc = buildTokenizedSqlerrmc((EmbedSQLException) se);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5792,private String buildTokenizedSqlerrmc(EmbedSQLException se) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5796,String messageId = se.getMessageId();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5798,Object[] args = se.getArguments();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5799,for (int i = 0; args != null &&  i < args.length; i++)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5800,sqlerrmc += args[i] + SQLERRMC_TOKEN_DELIMITER;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5801,sqlerrmc += messageId;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5802,se = (EmbedSQLException) se.getNextException();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6314,"int drdaType = FdocaConstants.mapJdbcTypeToDrdaType(colType,nullable,outlen);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6739,"drdaType = FdocaConstants.mapJdbcTypeToDrdaType(stmt.getOutputParamType(i),true,outlen);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7063,"nullable,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7177,writer.writeByte(CodePoint.NULLDATA);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4384,String paramVal = reader.readStringData(26).trim();  //parameter may be char value
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7336,if (tsLen < 26)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7338,for (int i = 0; i < 26-tsLen; i++)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7341,else if (tsLen > 26)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7342,"ts2 = ts2.substring(0,26);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,649,"writeSQLCARD(sqle, CodePoint.SVRCOD_ERROR, 0, 0);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,739,"writeSQLCARD(w, CodePoint.SVRCOD_WARNING, 0, 0);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1140,"writeSQLCARD(databaseAccessException,CodePoint.SVRCOD_ERROR,0,0);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5415,"writeSQLCARD(e,severity, updateCount, 0);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5423,severity = getExceptionSeverity(e);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5437,"writeSQLCARD(e,severity, updateCount, 0);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5440,private int getSqlCode(int severity)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5442,"if (severity == CodePoint.SVRCOD_WARNING)		// warning"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5443,"return 100;		//CLI likes it"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5444,else if (severity == CodePoint.SVRCOD_INFO)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5445,return 0;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5446,else
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5447,return -1;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5450,"private void writeSQLCARD(SQLException e,int severity,"
java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java,179,info.getProperty(Attribute.CLIENT_SECURITY_MECHANISM)) != null)
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java,176,suite.addTest(new NSSecurityMechanismTest(
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java,178,return TestConfiguration.clientServerDecorator((suite));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,226,Class.forName(driverClass);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,227,testSuccessfulConnect();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,228,testUnsuccessfulConnect();
java/engine/org/apache/derby/impl/sql/compile/Predicate.java,309,"if (this.isRelationalOpPredicate()) // this is not ""in"""
java/engine/org/apache/derby/impl/sql/compile/Predicate.java,317,"if (otherPred.isRelationalOpPredicate()) // other is not ""in"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,414,"st.execute(""drop table ct"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java,449,ds.getConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,587,"throw newSQLException(SQLState.LOGIN_FAILED, MessageService.getTextMessage(MessageId.AUTH_INVALID));"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,842,columnIndexes == null
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,877,columnNames == null
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1318,getLanguageConnection().setReadOnly(readOnly);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1412,getLanguageConnection().setIsolationLevel(iLevel);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2031,getLanguageConnection().resetFromPool();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2068,(XATransactionController) getLanguageConnection().getTransactionExecute();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2083,getLanguageConnection().internalCommit(false /* don't commitStore again */);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2110,getLanguageConnection().xaCommit(onePhase);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2134,getLanguageConnection().xaRollback();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,383,tr.cleanupOnError(t);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1208,tr.cleanupOnError(e);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1220,tr.cleanupOnError(e);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,99,public abstract class EmbedConnection implements EngineConnection
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1196,if (active) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1535,"SanityManager.ASSERT(!isClosed(), ""connection is closed"");"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1758,checkIfClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,102,private static final StandardException exceptionClose = StandardException.closeException();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1187,private void close(StandardException e) throws SQLException {
java/engine/org/apache/derby/jdbc/InternalDriver.java,200,"SQLState.LOGIN_FAILED, MessageService.getTextMessage(MessageId.AUTH_INVALID));"
java/client/org/apache/derby/client/am/SQLExceptionFactory40.java,69,"ex = new SQLTransientConnectionException(message, sqlState, errCode);"
java/client/org/apache/derby/client/am/SQLExceptionFactory40.java,65,} else if (sqlState.startsWith(SQLState.CONNECTIVITY_PREFIX) ||
java/client/org/apache/derby/client/am/SQLExceptionFactory40.java,66,errCode >= ExceptionSeverity.SESSION_SEVERITY) {
java/client/org/apache/derby/client/am/SQLExceptionFactory40.java,78,} else if (sqlState.startsWith(SQLState.TRANSACTION_PREFIX) ||
java/client/org/apache/derby/client/am/SQLExceptionFactory40.java,79,errCode >= ExceptionSeverity.TRANSACTION_SEVERITY ) {
java/client/org/apache/derby/client/am/SQLExceptionFactory40.java,94,} else {
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java,76,"ex = new SQLTransientConnectionException(message, sqlState,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestJDBC40Exception.java,96,} catch (SQLTransientConnectionException cone) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,94,"""\\S+@[0-9]+.* \\(XID = .*\\), \\(SESSIONID = [0-9]+\\), "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,2914,assertTrue(str.matches(CONNSTRING_FORMAT));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,38,import javax.sql.ConnectionEvent;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,39,import javax.sql.ConnectionEventListener;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,212,if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,1219,"assertSQLState(""XCY00"", sqle);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3094,if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,1221,"fail (""unexpected exception: "" + e.toString());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,1273,public void testClientDSConnectionAttributes() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,1753,ClientDataSource ds = new ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,1652,public void testClientMessageTextConnectionAttribute() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,1277,ClientDataSource ds = new ClientDataSource();
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,261,if (total_log_record_length <= currentBuffer.bytes_free)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,263,byte[] b    = currentBuffer.buffer;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,264,int    p    = currentBuffer.position;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,267,"p = writeInt(length, b, p);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,270,"p = writeLong(instant, b , p);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,273,int transfer_length = (length - optional_data_length);
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,274,"System.arraycopy(data, data_offset, b, p, transfer_length);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,276,p += transfer_length;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,278,if (optional_data_length != 0)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,283,System.arraycopy(
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,284,"optional_data, optional_data_offset,"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,285,"b,             p,"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,286,optional_data_length);
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,288,p += optional_data_length;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,292,"p = writeInt(length, b, p);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,294,currentBuffer.position   = p;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,297,else
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,304,directWrite = true;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,306,byte[] b    = currentBuffer.buffer;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,307,int    p    = currentBuffer.position;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,310,"p = writeInt(length , b, p);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,313,"p = writeLong(instant, b, p);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,315,currentBuffer.position   = p;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,316,currentBuffer.bytes_free -= LOG_RECORD_HEADER_SIZE;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,325,"writeInt(length , db, 0);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,327,if(writeChecksum)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,329,checksumLogOperation.reset();
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,330,"checksumLogOperation.update(b, checksumLogRecordSize, p - checksumLogRecordSize);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,331,"checksumLogOperation.update(data, data_offset, length - optional_data_length);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,332,if (optional_data_length != 0)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,334,"checksumLogOperation.update(optional_data, optional_data_offset, optional_data_length);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,338,"checksumLogOperation.update(db, 0, LOG_RECORD_TRAILER_SIZE);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,341,writeChecksumLogRecord();
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,348,flushLogAccessFile();
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,358,"writeToLog(data, data_offset, length - optional_data_length);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,359,if (optional_data_length != 0)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,361,writeToLog(
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,362,"optional_data, optional_data_offset, optional_data_length);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,366,"writeToLog(db,0, 4);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,367,directWrite = false;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,574,if(writeChecksum && !directWrite)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,578,writeChecksumLogRecord();
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,809,"private void writeChecksumLogRecord() throws IOException, StandardException"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,816,"p = writeInt(checksumLength, b , p);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,819,"p = writeLong(checksumInstant, b , p);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,822,logOutputBuffer.setData(b);
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,830,"logFactory.encrypt(b, LOG_RECORD_HEADER_SIZE, checksumLength,"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,831,"b, LOG_RECORD_HEADER_SIZE);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,842,"p = writeInt(checksumLength, b, p );"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,655,{   //does not matter weather I get interrupted or not
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,5193,if (page != null)
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,3076,rhs[1] = page1.makeRecordHandle(RecordHandle.RECORD_ID_PROTECTION_HANDLE);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,261,cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,5485,cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,7260,cm1.cleanupOnError(t);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,7262,cm2.cleanupOnError(t);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/statementJdbc20.java,76,dumpExpectedSQLExceptions(e);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/statementJdbc20.java,83,dumpExpectedSQLExceptions(e);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/statementJdbc20.java,127,dumpExpectedSQLExceptions(e);
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,375,protected int maxFieldSize;
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,699,initSpace();
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,701,if (pageSize >= 65536)
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,702,slotFieldSize = LARGE_SLOT_SIZE;
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,703,else
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,704,slotFieldSize = SMALL_SLOT_SIZE;
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,706,slotEntrySize = 3 * slotFieldSize;
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,3341,if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,738,protected void createPage(
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,739,"PageKey newIdentity,"
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,740,int[]   args)
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,746,int pageSize        = args[2];
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,747,spareSpace          = args[3];
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,748,minimumRecordSize   = args[4];
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,750,setPageArray(pageSize);
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,147,((Resetable) storeStream).initStream();
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,544,if (pos < 1)
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,337,pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,349,if (readCount == -1)
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,453,if (!seenOneCharacter)
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,468,if (firstPosition == -1)
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,170,"TransactionController.ISOLATION_REPEATABLE_READ, true);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,173,blob.free();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,174,blob = null;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,611,public static Test suite() {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,612,return  new BlobClobTestSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,613,TestConfiguration.defaultSuite(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,614,"BlobTest.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,615,false));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,184,Class iface = Blob.class;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,168,clob.free();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,169,clob = null;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,201,"throws IllegalAccessException, InvocationTargetException, SQLException {"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,202,InputStream asciiStream = clob.getAsciiStream();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,203,Reader charStream  = clob.getCharacterStream();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,204,clob.free();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,209,clob.free();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,215,buildMethodList(clob);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,706,public static Test suite() {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,707,return  new BlobClobTestSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,708,TestConfiguration.defaultSuite(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,709,"ClobTest.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,710,false));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,179,Class iface = Clob.class;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,1214,conn2.commit();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,2774,TestConfiguration.embeddedSuite(BlobClob4BlobTest.class));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,2775,suite.addTest(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,2776,TestConfiguration.clientServerSuite(BlobClob4BlobTest.class));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,2780,"TestSuite encSuite = new TestSuite (""BlobClob4BlobTest:encrypted"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,2781,encSuite.addTestSuite (BlobClob4BlobTest.class);
java/testing/org/apache/derbyTesting/system/mailjdbc/utils/DbTasks.java,196,int attach_id = Rn.nextInt(count - 1);
java/testing/org/apache/derbyTesting/system/mailjdbc/utils/DbTasks.java,275,int id = Rn.nextInt(id_count - 1);
java/testing/org/apache/derbyTesting/system/mailjdbc/utils/DbTasks.java,280,int for_id = Rn.nextInt(id_count - 1);
java/testing/org/apache/derbyTesting/system/mailjdbc/utils/DbTasks.java,380,int message_id = Rn.nextInt(count - 1);
java/client/org/apache/derby/client/am/PreparedStatement.java,2416,new Integer(parameterMetaData_.columns_));
java/client/org/apache/derby/client/am/PreparedStatement.java,1402,if (x instanceof String) {
java/client/org/apache/derby/client/am/PreparedStatement.java,2423,if (!parameterSet_[i] && !parameterRegistered_[i]) {
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,108,"internalSavePointName = ""ISSP"" + hashCode();"
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,175,boolean mayStillRun = !cancel();
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,176,if (mayStillRun) {
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,177,synchronized (this) {
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,178,statementContext = null;
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,503,int severity = (error instanceof StandardException) ?
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,504,((StandardException) error).getSeverity() :
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,505,ExceptionSeverity.SESSION_SEVERITY;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,54,"{""APP"",""dan"",""kreg"",""jeff"",""ames"",""jerry"",""francois"",""jamie"",""howardR""};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,448,"psGetAccess.setString(1, ""jamie"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,454,"psGetAccess.setString(1, ""system"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,460,"psGetAccess.setString(1, ""mickEy"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,481,"psGetAccess.setString(1, ""miCKEY"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,483,"psGetAccess.setString(1, ""jamie"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,487,"psGetAccess.setString(1, ""system"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,498,"psGetAccess.setString(1, ""miCKEY"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,500,"psGetAccess.setString(1, ""jamie"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,504,"psGetAccess.setString(1, ""system"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,620,"setDatabaseProperty(""derby.database.fullAccessUsers"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,621,"null, conn1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,622,"setDatabaseProperty(""derby.database.readOnlyAccessUsers"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,623,"null, conn1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,625,"csSetAccess.setString(1, ""dan"");"
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,708,switch (returnType.getJDBCTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,709,case java.sql.Types.SMALLINT:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,710,case java.sql.Types.INTEGER:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,711,case java.sql.Types.BIGINT:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,712,case java.sql.Types.REAL:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,713,case java.sql.Types.DOUBLE:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,714,TypeCompiler tc = getTypeCompiler(returnTypeId);
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,715,requiredType = tc.getCorrespondingPrimitiveTypeName();
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,716,if (!routineInfo.calledOnNullInput() && routineInfo.getParameterCount() != 0)
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,718,promoteName = returnTypeId.getCorrespondingJavaTypeName();
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,721,break;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,722,default:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,723,requiredType = returnTypeId.getCorrespondingJavaTypeName();
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,1090,break;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,149,public void addParms(Vector parameterList) throws StandardException
java/engine/org/apache/derby/catalog/SystemProcedures.java,1562,try {
java/engine/org/apache/derby/catalog/SystemProcedures.java,1568,IdUtil.getUserAuthorizationId(userName);
java/engine/org/apache/derby/catalog/SystemProcedures.java,1579,"removeFromAccessList(Property.FULL_ACCESS_USERS_PROPERTY,"
java/engine/org/apache/derby/catalog/SystemProcedures.java,1580,userName);
java/engine/org/apache/derby/catalog/SystemProcedures.java,1585,"removeFromAccessList(Property.FULL_ACCESS_USERS_PROPERTY,"
java/engine/org/apache/derby/catalog/SystemProcedures.java,1586,userName);
java/engine/org/apache/derby/catalog/SystemProcedures.java,1587,"removeFromAccessList(Property.READ_ONLY_ACCESS_USERS_PROPERTY,"
java/engine/org/apache/derby/catalog/SystemProcedures.java,1588,userName);
java/engine/org/apache/derby/catalog/SystemProcedures.java,1589,return;
java/engine/org/apache/derby/catalog/SystemProcedures.java,1595,String addList = SYSCS_GET_DATABASE_PROPERTY(addListProperty);
java/engine/org/apache/derby/catalog/SystemProcedures.java,1596,"SYSCS_SET_DATABASE_PROPERTY(addListProperty,"
java/engine/org/apache/derby/catalog/SystemProcedures.java,1597,"IdUtil.appendId(userName, addList));"
java/engine/org/apache/derby/catalog/SystemProcedures.java,1632,"if (IdUtil.idOnList(sqlUser, fullUserList))"
java/engine/org/apache/derby/catalog/SystemProcedures.java,1637,"if (IdUtil.idOnList(sqlUser, readOnlyUserList))"
java/engine/org/apache/derby/iapi/util/IdUtil.java,68,char[] charArray = id.toCharArray();
java/engine/org/apache/derby/iapi/util/IdUtil.java,70,for (int ix = 0; ix < charArray.length; ix++){
java/engine/org/apache/derby/iapi/util/IdUtil.java,71,char currentChar = charArray[ix];
java/engine/org/apache/derby/iapi/util/IdUtil.java,90,return delimitId(id2);
java/engine/org/apache/derby/iapi/util/IdUtil.java,92,delimitId(id1) +
java/engine/org/apache/derby/iapi/util/IdUtil.java,94,delimitId(id2);
java/engine/org/apache/derby/iapi/util/IdUtil.java,106,sb.append(delimitId(ids[ix]));
java/engine/org/apache/derby/iapi/util/IdUtil.java,286,return delimitId(b.toString()); //Put the quotes back.
java/engine/org/apache/derby/iapi/util/IdUtil.java,559,sb.append(IdUtil.delimitId(ids[ix]));
java/engine/org/apache/derby/iapi/util/IdUtil.java,647,"public static String appendId(String id, String list)"
java/engine/org/apache/derby/iapi/util/IdUtil.java,651,return id;
java/engine/org/apache/derby/iapi/util/IdUtil.java,653,"return list+"",""+id;"
java/drda/org/apache/derby/impl/drda/DssTrace.java,163,protected void startComBufferTrace (String fileName)
java/drda/org/apache/derby/impl/drda/DssTrace.java,170,"comBufferWriter = new java.io.PrintWriter (new java.io.BufferedWriter (new java.io.FileWriter (fileName), 4096));"
java/drda/org/apache/derby/impl/drda/DssTrace.java,201,comBufferWriter.flush();
java/drda/org/apache/derby/impl/drda/DssTrace.java,202,comBufferWriter.close();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1399,"sendMessage(writer, ERROR,"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1400,"localizeMessage(""DRDA_SessionNotFound.U"","
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1401,"(session.langUtil == null) ? langUtil : session.langUtil,"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1402,new String [] {new Integer(sessionArg).toString()}));
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3284,session.setTraceOn(traceDirectory);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3296,session.setTraceOn(traceDirectory);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3303,return true;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2233,java.security.KeyManagementException
java/drda/org/apache/derby/impl/drda/Session.java,127,protected void initTrace(String traceDirectory)
java/drda/org/apache/derby/impl/drda/Session.java,145,protected void setTraceOn(String traceDirectory)
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,408,byte[]          inputBuffer = new byte[ 1000 ];
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,410,InputStream is = _inputStreamHolder[ 0 ];
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,202,String classpath;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,204,try {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,205,"classpath = System.getProperty(""java.class.path"");"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,292,private static String getJavaProperty (String whichProperty) {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,294,String property;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,295,"String unavailable = Main.getTextMessage (""SIF01.H"");"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,299,"property = System.getProperty (whichProperty, unavailable);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,300,return property;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,892,private static ZipInfoProperties checkForInfo(String cpEntry)
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,894,File f = new File(cpEntry);
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,895,if ( ! f.exists())
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,897,return null;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,906,if (f.isFile())
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,908,ZipInfoProperties zip = checkFile(cpEntry);
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,909,return zip;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,911,return null;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1078,"return getCompleteMessage(msgId, (Object[]) null);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1099,"return org.apache.derby.iapi.services.i18n.MessageService.formatMessage(getBundle(), msgId, arguments, false);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,462,"private static final String USAGESTRINGPARTA = MAINUSAGESTRING + "" [ [ "" + EMBEDDED + "" ][ "" + NET + "" ][ "" + CLIENT + ""] [ "" + DB2DRIVER + "" ] [ "" + TOOLS + "" ] [ "";"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1128,return formatURL(result);
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1221,"result = ""IOException"";"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,83,"javaVersion = System.getProperty(""java.specification.version"", ""1.3"");"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,88,"javaVersion = ""1.3"";"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,91,"if (javaSpec != null && javaSpec.startsWith(""J2ME""))"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,99,id = J2SE_13;
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,107,"if (javaVersion.equals(""1.2"") || javaVersion.equals(""1.3""))"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,109,id = J2SE_13; //jdk1.3 is still Java2 platform with the same API
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,111,"else if (javaVersion.equals(""1.4""))"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,132,id = J2SE_13;
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,165,"case J2SE_13: return J2ME ? ""J2ME - JDBC for CDC/FP 1.0"" : ""J2SE 1.3 - JDBC 2.1"";"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,166,"case J2SE_14: return ""J2SE 1.4 - JDBC 3.0"";"
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,1666,if( JVMInfo.JDK_ID >= JVMInfo.J2SE_14)
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,1283,if( moduleList.contains( key))
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,1838,if (cm != previousCM)
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,1839,cm.cleanupOnError(StandardException.closeException());
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,1851,cm.cleanupOnError(se);
java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java,185,"long autoincStart, long autoincInc)"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,3410,"(UUID) null, 0, 0);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,3594,"0, 0);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,1537,false);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,1578,false);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4159,"keyRow,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4160,"(ScanQualifier [][])null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4161,"ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4162,"(TupleDescriptor)null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4163,"statDescriptorList, false);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7724,else
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,395,public boolean readOnlyUpgrade;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5474,getDescriptorViaIndex(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5475,"SYSCONGLOMERATESRowFactory.SYSCONGLOMERATES_INDEX1_ID,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5476,"keyRow,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5477,"(ScanQualifier [][]) null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5478,"ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5479,"(TupleDescriptor) null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5480,"cdl,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5481,false);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,3504,"updCols = new int[]	{SYSSTATEMENTSRowFactory.SYSSTATEMENTS_VALID} ;"
java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java,266,new SQLLongint(autoincStart));
java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java,363,"long autoincStart, autoincInc;"
java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java,464,"defaultUUID, autoincStart, autoincInc);"
java/client/org/apache/derby/client/am/LogicalConnection.java,137,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,138,return physicalConnection_.createStatement();
java/client/org/apache/derby/client/am/LogicalConnection.java,142,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,143,return physicalConnection_.prepareStatement(sql);
java/client/org/apache/derby/client/am/LogicalConnection.java,156,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,157,return physicalConnection_.prepareCall(sql);
java/client/org/apache/derby/client/am/LogicalConnection.java,161,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,162,return physicalConnection_.nativeSQL(sql);
java/client/org/apache/derby/client/am/LogicalConnection.java,166,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,167,physicalConnection_.setAutoCommit(autoCommit);
java/client/org/apache/derby/client/am/LogicalConnection.java,171,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,172,return physicalConnection_.getAutoCommit();
java/client/org/apache/derby/client/am/LogicalConnection.java,176,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,177,physicalConnection_.commit();
java/client/org/apache/derby/client/am/LogicalConnection.java,181,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,182,physicalConnection_.rollback();
java/client/org/apache/derby/client/am/LogicalConnection.java,186,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,187,physicalConnection_.setTransactionIsolation(level);
java/client/org/apache/derby/client/am/LogicalConnection.java,191,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,192,return physicalConnection_.getTransactionIsolation();
java/client/org/apache/derby/client/am/LogicalConnection.java,196,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,197,return physicalConnection_.getWarnings();
java/client/org/apache/derby/client/am/LogicalConnection.java,201,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,202,physicalConnection_.clearWarnings();
java/client/org/apache/derby/client/am/LogicalConnection.java,206,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,207,return physicalConnection_.getMetaData();
java/client/org/apache/derby/client/am/LogicalConnection.java,211,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,212,physicalConnection_.setReadOnly(readOnly);
java/client/org/apache/derby/client/am/LogicalConnection.java,216,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,217,return physicalConnection_.isReadOnly();
java/client/org/apache/derby/client/am/LogicalConnection.java,221,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,222,physicalConnection_.setCatalog(catalog);
java/client/org/apache/derby/client/am/LogicalConnection.java,226,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,227,return physicalConnection_.getCatalog();
java/client/org/apache/derby/client/am/LogicalConnection.java,232,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,233,"return physicalConnection_.createStatement(resultSetType, resultSetConcurrency);"
java/client/org/apache/derby/client/am/LogicalConnection.java,45,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,240,"return physicalConnection_.prepareStatement(sql, resultSetType, resultSetConcurrency);"
java/client/org/apache/derby/client/am/LogicalConnection.java,246,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,247,"return physicalConnection_.prepareCall(sql, resultSetType, resultSetConcurrency);"
java/client/org/apache/derby/client/am/LogicalConnection.java,251,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,252,return physicalConnection_.getTypeMap();
java/client/org/apache/derby/client/am/LogicalConnection.java,256,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,257,physicalConnection_.setTypeMap(map);
java/client/org/apache/derby/client/am/LogicalConnection.java,262,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,263,"return physicalConnection_.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);"
java/client/org/apache/derby/client/am/LogicalConnection.java,148,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,270,"return physicalConnection_.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);"
java/client/org/apache/derby/client/am/LogicalConnection.java,276,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,277,"return physicalConnection_.prepareStatement(sql, resultSetType, resultSetConcurrency,"
java/client/org/apache/derby/client/am/LogicalConnection.java,278,resultSetHoldability);
java/client/org/apache/derby/client/am/LogicalConnection.java,283,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,284,"return physicalConnection_.prepareStatement(sql, autoGeneratedKeys);"
java/client/org/apache/derby/client/am/LogicalConnection.java,239,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,290,"return physicalConnection_.prepareStatement(sql, columnIndexes);"
java/client/org/apache/derby/client/am/LogicalConnection.java,295,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,296,"return physicalConnection_.prepareStatement(sql, columnNames);"
java/client/org/apache/derby/client/am/LogicalConnection.java,300,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,301,physicalConnection_.setHoldability(holdability);
java/client/org/apache/derby/client/am/LogicalConnection.java,305,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,306,return physicalConnection_.getHoldability();
java/client/org/apache/derby/client/am/LogicalConnection.java,310,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,311,return physicalConnection_.setSavepoint();
java/client/org/apache/derby/client/am/LogicalConnection.java,315,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,316,return physicalConnection_.setSavepoint(name);
java/client/org/apache/derby/client/am/LogicalConnection.java,320,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,321,physicalConnection_.rollback(savepoint);
java/client/org/apache/derby/client/am/LogicalConnection.java,325,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,326,physicalConnection_.releaseSavepoint(savepoint);
java/client/org/apache/derby/client/am/SqlCode.java,53,public final static SqlCode disconnectError = new SqlCode(-4499);
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/BadConnectionTest.java,68,"assertEquals(-4499, e.getErrorCode());"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/BadConnectionTest.java,87,"assertEquals(-4499, e.getErrorCode());"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/BadConnectionTest.java,106,"assertEquals(-1, e.getErrorCode());"
java/testing/org/apache/derbyTesting/system/nstest/NsTest.java,313,if ((sqe.getErrorCode() == -4499)
java/client/org/apache/derby/client/am/LogicalConnection40.java,57,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,58,"return physicalConnection_.createArrayOf( typeName, elements );"
java/client/org/apache/derby/client/am/LogicalConnection40.java,63,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,64,return physicalConnection_.createBlob();
java/client/org/apache/derby/client/am/LogicalConnection40.java,69,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,70,return physicalConnection_.createClob();
java/client/org/apache/derby/client/am/LogicalConnection40.java,75,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,76,return physicalConnection_.createNClob();
java/client/org/apache/derby/client/am/LogicalConnection40.java,81,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,82,return physicalConnection_.createSQLXML();
java/client/org/apache/derby/client/am/LogicalConnection40.java,87,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,88,"return physicalConnection_.createStruct( typeName, attributes );"
java/client/org/apache/derby/client/am/LogicalConnection40.java,103,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,104,return physicalConnection_.getClientInfo();
java/client/org/apache/derby/client/am/LogicalConnection40.java,119,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,120,return physicalConnection_.getClientInfo(name);
java/client/org/apache/derby/client/am/LogicalConnection40.java,130,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,131,return ((java.sql.Connection) physicalConnection_).getTypeMap();
java/client/org/apache/derby/client/am/LogicalConnection40.java,150,if (physicalConnection_ == null) {
java/client/org/apache/derby/client/am/LogicalConnection40.java,151,return false;
java/client/org/apache/derby/client/am/LogicalConnection40.java,153,return physicalConnection_.isValid(timeout);
java/client/org/apache/derby/client/am/LogicalConnection40.java,159,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,160,return interfaces.isInstance(this);
java/client/org/apache/derby/client/am/LogicalConnection40.java,173,try { checkForNullPhysicalConnection(); }
java/client/org/apache/derby/client/am/LogicalConnection40.java,174,catch (SQLException se) {
java/client/org/apache/derby/client/am/LogicalConnection40.java,175,throw new SQLClientInfoException
java/client/org/apache/derby/client/am/LogicalConnection40.java,176,"(se.getMessage(), se.getSQLState(),"
java/client/org/apache/derby/client/am/LogicalConnection40.java,177,(new FailedProperties40(properties)).getProperties());
java/client/org/apache/derby/client/am/LogicalConnection40.java,179,physicalConnection_.setClientInfo(properties);
java/client/org/apache/derby/client/am/LogicalConnection40.java,192,try { checkForNullPhysicalConnection(); }
java/client/org/apache/derby/client/am/LogicalConnection40.java,193,catch (SQLException se) {
java/client/org/apache/derby/client/am/LogicalConnection40.java,195,"(se.getMessage(), se.getSQLState(),"
java/client/org/apache/derby/client/am/LogicalConnection40.java,196,new FailedProperties40
java/client/org/apache/derby/client/am/LogicalConnection40.java,197,(FailedProperties40.makeProperties
java/client/org/apache/derby/client/am/LogicalConnection40.java,198,"(name,value)).getProperties());"
java/client/org/apache/derby/client/am/LogicalConnection40.java,200,"physicalConnection_.setClientInfo(name, value);"
java/client/org/apache/derby/client/am/LogicalConnection40.java,205,checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,207,try {
java/client/org/apache/derby/client/am/LogicalConnection40.java,208,return interfaces.cast(this);
java/client/org/apache/derby/client/am/LogicalConnection40.java,209,} catch (ClassCastException cce) {
java/client/org/apache/derby/client/am/LogicalConnection40.java,210,"throw new SqlException(null,"
java/client/org/apache/derby/client/am/LogicalConnection40.java,211,"new ClientMessageId(SQLState.UNABLE_TO_UNWRAP),"
java/client/org/apache/derby/client/am/LogicalConnection40.java,212,interfaces).getSQLException();
java/client/org/apache/derby/client/net/NetConnection40.java,247,"(se.getMessage(), se.getSQLState(),"
java/client/org/apache/derby/client/net/NetConnection40.java,248,new FailedProperties40(p).getProperties());
java/client/org/apache/derby/client/net/NetConnection40.java,277,fp.getProperties());
java/client/org/apache/derby/client/net/NetConnection40.java,290,"se.getSQLState(), fp.getProperties());"
java/client/org/apache/derby/client/net/NetConnection40.java,66,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection40.java,82,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection40.java,90,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection40.java,121,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,214,"(se.getMessage(), se.getSQLState(),"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,314,checkIfClosed();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,315,return interfaces.isInstance(this);
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,332,return interfaces.cast(this);
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,333,} catch (ClassCastException cce) {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,39,public class BrokeredConnection40 extends BrokeredConnection30 {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,42,public BrokeredConnection40(BrokeredConnectionControl control) {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,71,throw Util.noCurrentConnection();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,97,throw Util.noCurrentConnection();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,334,"throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,335,interfaces);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,155,fp.getProperties());
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,172,"se.getSQLState(), fp.getProperties());"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,42,public class EmbedConnection40 extends EmbedConnection30 {
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,403,"return formatTime.format(t,	new StringBuffer(),"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,404,new java.text.FieldPosition(0)).toString();
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,169,res = ResourceBundle.getBundle(MESSAGE_FILE);
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,819,"ioe, identity, new Integer(myContainer.getPageSize()));"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,836,"identity, new Integer(myContainer.getPageSize())));"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,771,if (myContainer != null)
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,773,try
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,775,myContainer.writePage(
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,776,"identity.getPageNumber(), pageData, syncMe);"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,783,if (!isOverflowPage() && isDirty())
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,788,myContainer.trackUnfilledPage(
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,789,"identity.getPageNumber(), unfilled());"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,799,int currentRowCount = internalNonDeletedRecordCount();
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,801,if (currentRowCount != initialRowCount)
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,803,myContainer.updateEstimatedRowCount(
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,804,currentRowCount - initialRowCount);
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,806,setContainerRowCount(
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,807,myContainer.getEstimatedRowCount(0));
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,809,initialRowCount = currentRowCount;
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,821,finally
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,823,containerCache.release(myContainer);
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,824,myContainer = null;
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,827,else
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,264,int[] createArgs = (int[]) createParameter;
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,266,if (createArgs[0] == -1)
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,275,if (createArgs[0] != getTypeFormatId())
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,278,"changeInstanceTo(createArgs[0], newIdentity).createIdentity("
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,304,if ((createArgs[1] & WRITE_SYNC) != 0 ||
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,305,(createArgs[1] & WRITE_NO_SYNC) != 0)
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,306,"writePage(newIdentity, (createArgs[1] & WRITE_SYNC) != 0);"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,312,String syncFlag =
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,313,"((createArgs[1] & WRITE_SYNC) != 0)     ? ""Write_Sync"" :"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,314,"(((createArgs[1] & WRITE_NO_SYNC) != 0) ? ""Write_NO_Sync"" :"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,319,"""creating new page "" + newIdentity + "" with "" + syncFlag);"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,910,"protected abstract void createPage(PageKey id, int[] args)"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,564,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,587,inClean = false;
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,588,throw StandardException.interrupt(ie);
java/client/org/apache/derby/client/net/NaiveTrustManager.java,55,java.security.KeyManagementException
java/client/org/apache/derby/client/net/NaiveTrustManager.java,62,"ctx.init(null, // Use default key manager"
java/client/org/apache/derby/client/net/NaiveTrustManager.java,63,"thisManager,"
java/client/org/apache/derby/client/net/NaiveTrustManager.java,64,null); // Use default random source
java/client/org/apache/derby/client/net/OpenSocketAction.java,44,java.security.KeyManagementException {
java/client/org/apache/derby/client/net/OpenSocketAction.java,48,case org.apache.derby.jdbc.ClientBaseDataSource.SSL_BASIC:
java/client/org/apache/derby/client/net/OpenSocketAction.java,51,case org.apache.derby.jdbc.ClientBaseDataSource.SSL_PEER_AUTHENTICATION:
java/client/org/apache/derby/client/net/OpenSocketAction.java,54,case org.apache.derby.jdbc.ClientBaseDataSource.SSL_OFF:
java/drda/org/apache/derby/impl/drda/NaiveTrustManager.java,55,java.security.KeyManagementException
java/drda/org/apache/derby/impl/drda/NaiveTrustManager.java,62,"ctx.init(null, // Use default key manager"
java/drda/org/apache/derby/impl/drda/NaiveTrustManager.java,63,"thisManager,"
java/drda/org/apache/derby/impl/drda/NaiveTrustManager.java,64,null); // Use default random source
java/drda/org/apache/derby/drda/NetworkServerControl.java,557,(!server.runningUnsecure())
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,108,ValueNode firstNonParameterNode;//The generated method will generate code to call coalesce on this non-parameter argument
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,155,firstNonParameterNode = (ValueNode) argumentsList.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,282,"firstNonParameterNode.generateExpression(acb, mb); //coalesce will be called on this non-parameter argument"
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,414,"printLabel(depth, ""argumentsList: "");"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,168,OpenBTree open_btree = new OpenBTree();
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,187,ConglomerateController base_cc =
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,188,btree.lockTable(
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,190,(ContainerHandle.MODE_FORUPDATE |
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,191,"ContainerHandle.MODE_LOCK_NOWAIT),"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,192,"TransactionController.MODE_TABLE,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,193,TransactionController.ISOLATION_REPEATABLE_READ);
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,195,open_btree.init(
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,196,"(TransactionManager) null,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,197,"internal_xact,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,198,"(ContainerHandle) null,           // open the container"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,199,"internal_xact.getRawStoreXact(),"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,200,"false,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,201,"ContainerHandle.MODE_FORUPDATE,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,202,"TransactionController.MODE_TABLE,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,203,btree.getBtreeLockingPolicy(
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,204,"internal_xact.getRawStoreXact(),"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,205,"TransactionController.MODE_TABLE,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,206,"LockingPolicy.MODE_CONTAINER,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,207,"TransactionController.ISOLATION_REPEATABLE_READ,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,208,"base_cc,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,209,"open_btree),"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,210,"btree,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,211,"(LogicalUndo) null,              // No logical undo necessry."
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,212,(DynamicCompiledOpenConglomInfo) null);
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,238,requeue_work = true;
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,123,return bytes[0];
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,113,return bytes[0];
java/tools/org/apache/derby/impl/tools/ij/util.java,470,if (driverName != null) {
java/tools/org/apache/derby/impl/tools/ij/util.java,475,if (jdbcProtocol != null)
java/tools/org/apache/derby/impl/tools/ij/util.java,485,if (databaseURL != null) {
java/client/org/apache/derby/client/am/MaterialStatement.java,64,public abstract void writeSetSpecialRegister_(java.util.ArrayList sqlsttList) throws SqlException;
java/client/org/apache/derby/client/am/Statement.java,1304,public void writeSetSpecialRegister(java.util.ArrayList sqlsttList) throws SqlException {
java/client/org/apache/derby/client/am/Statement.java,1305,materialStatement_.writeSetSpecialRegister_(sqlsttList);
java/client/org/apache/derby/client/am/Statement.java,1823,if (generatedKeysResultSet_ != null) {
java/client/org/apache/derby/client/am/Statement.java,1824,generatedKeysResultSet_.markClosed(removeListener);
java/client/org/apache/derby/client/am/Statement.java,1826,if (resultSet_ != null) {
java/client/org/apache/derby/client/am/Statement.java,1827,resultSet_.markClosed(removeListener);
java/client/org/apache/derby/client/am/Statement.java,1829,resultSet_ = null;
java/client/org/apache/derby/client/am/Statement.java,1830,resultSetList_ = null;
java/client/org/apache/derby/client/am/Statement.java,1831,generatedKeysResultSet_ = null;
java/client/org/apache/derby/client/net/NetStatement.java,111,public void writeSetSpecialRegister_(java.util.ArrayList sqlsttList) throws SqlException {
java/client/org/apache/derby/client/net/NetStatement.java,112,netAgent_.statementRequest_.writeSetSpecialRegister(sqlsttList);
java/client/org/apache/derby/client/net/NetStatementRequest.java,1759,public void writeSetSpecialRegister(java.util.ArrayList sqlsttList) throws SqlException {
java/client/org/apache/derby/client/net/NetStatementRequest.java,1760,Section section =
java/client/org/apache/derby/client/net/NetStatementRequest.java,1761,netAgent_.sectionManager_.getDynamicSection(java.sql.ResultSet.HOLD_CURSORS_OVER_COMMIT);
java/client/org/apache/derby/client/net/NetStatementRequest.java,1257,lidAndLengths[i][1] = 26;
java/client/org/apache/derby/client/net/StatementRequestInterface.java,91,public void writeSetSpecialRegister(java.util.ArrayList sqlsttList) throws SqlException;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,862,if (newCost < 0.0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,863,newCost = 0.0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,599,int nextOptimizable = 0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,761,if (nextOptimizable < numOptimizables)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,763,Optimizable nextOpt =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,764,optimizableList.getOptimizable(nextOptimizable);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,765,if (! (nextOpt.legalJoinOrder(assignedTableMap)))
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,767,if (optimizerTrace)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,769,"trace(SKIPPING_JOIN_ORDER, nextOptimizable, 0, 0.0, null);"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,871,if (joinPosition == 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,873,if (outermostCostEstimate != null)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,875,newCost = outermostCostEstimate.getEstimatedCost();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,877,else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,879,newCost = 0.0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,883,currentCost.setCost(
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,884,"newCost,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,885,"prevRowCount,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,886,prevSingleScanRowCount);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,897,if (requiredRowOrdering != null)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,899,if (pullMe.considerSortAvoidancePath())
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,901,AccessPath ap = pullMe.getBestSortAvoidancePath();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,902,"double	   prevEstimatedCost = 0.0d;"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,913,if (joinPosition == 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,915,prevRowCount = outermostCostEstimate.rowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,916,prevSingleScanRowCount = outermostCostEstimate.singleScanRowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,922,prevEstimatedCost = outermostCostEstimate.getEstimatedCost();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,924,else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,926,CostEstimate localCE =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,927,optimizableList.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,928,getOptimizable(prevPosition).
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,929,getBestSortAvoidancePath().
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,930,getCostEstimate();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,931,prevRowCount = localCE.rowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,932,prevSingleScanRowCount = localCE.singleScanRowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,933,prevEstimatedCost = currentSortAvoidanceCost.getEstimatedCost() -
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,934,ap.getCostEstimate().getEstimatedCost();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,937,currentSortAvoidanceCost.setCost(
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,938,"prevEstimatedCost,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,939,"prevRowCount,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,940,prevSingleScanRowCount);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,949,bestRowOrdering.removeOptimizable(
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,950,pullMe.getTableNumber());
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,958,bestRowOrdering.copy(currentRowOrdering);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1004,proposedJoinOrder[joinPosition] = -1;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,217,if (numTablesInQuery > 6)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,219,permuteState = READY_TO_JUMP;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,220,firstLookOrder = new int[numOptimizables];
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,222,else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,223,permuteState = NO_JUMP;
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,85,InListOperatorNode inListProbeSource = null;
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,780,if (inListProbeSource != null)
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,1218,return (inListProbeSource == null);
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,1228,return (inListProbeSource == null) &&
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,1250,if (inListProbeSource != null)
java/engine/org/apache/derby/impl/sql/compile/OrNode.java,155,if (bron.getInListOp() == null)
java/engine/org/apache/derby/impl/sql/compile/OrNode.java,226,if (bron.getInListOp() != null)
java/engine/org/apache/derby/iapi/types/SQLChar.java,2514,RuleBasedCollator rbc = getLocaleFinder().getCollator();
java/engine/org/apache/derby/iapi/types/SQLChar.java,1172,sb.append( microsStr);
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,858,columnNumber = ftRC.getColumnPosition();
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,833,if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,853,"SanityManager.ASSERT(ftRC != null,"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,854,"""Failed to find column '"" + columnName + ""' in the "" +"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,855,"""RCL for '"" + ft.getTableName() + ""'."");"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,683,columnNumber = source.getColumnPosition();
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,70,"protected	long				CID;"
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,251,if(!isUniqueStream)
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,519,if (conglomCreated)
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,521,TransactionController tc = activation.getTransactionController();
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,522,tc.dropConglomerate(CID);
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,523,conglomCreated = false;
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,162,holder.CID = currentConglomId;
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,285,if (holder.CID == 0)
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,297,"holder.CID,"
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,350,"heapCC = tc.openConglomerate( holder.CID,"
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,370,if(holder.CID ==0)
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,374,"heapCC = tc.openConglomerate( holder.CID,"
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,1145,public void updateRow(ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,259,ps.rePrepare(getLanguageConnectionContext());
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,819,normExpressions();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,883,havingClause = havingClause.preprocess(
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1073,private void normExpressions()
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1082,if (whereClause != null)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1084,whereClause = whereClause.eliminateNots(false);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1087,if (!(whereClause.verifyEliminateNots()) )
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1089,whereClause.treePrint();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1091,"""whereClause in invalid form: "" + whereClause);"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1094,whereClause = whereClause.putAndsOnTop();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1097,if (! ((whereClause instanceof AndNode) &&
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1098,(whereClause.verifyPutAndsOnTop())) )
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1100,whereClause.treePrint();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1102,"""whereClause in invalid form: "" + whereClause);"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1105,whereClause = whereClause.changeToCNF(true);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1108,if (! ((whereClause instanceof AndNode) &&
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1109,(whereClause.verifyChangeToCNF())) )
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1111,whereClause.treePrint();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1113,"""whereClause in invalid form: "" + whereClause);"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1406,prnRSN.adjustForSortElimination();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1378,ResultColumnList newSelectList = prnRSN.getResultColumns().copyListAndObjects();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1379,newSelectList.removeGeneratedGroupingColumns();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1380,"newSelectList.genVirtualColumnNodes(prnRSN, prnRSN.getResultColumns());"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1384,"newSelectList,"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,902,groupByList);
java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java,612,underTopAndNode &&
java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java,676,underTopAndNode &&
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,1018,"boolean probeValsAreSorted,"
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,116,"ResultSet getInsertResultSet(NoPutResultSet source,"
java/engine/org/apache/derby/impl/sql/compile/BaseTableNumbersVisitor.java,99,rc = (ResultColumn)rc;
java/engine/org/apache/derby/impl/sql/compile/BaseTableNumbersVisitor.java,152,((ColumnReference)node).getTablesReferenced(tableMap);
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2912,mb.push(ilon.isOrdered());
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2217,else if (right instanceof ConstantNode && left instanceof ColumnReference)
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2220,bcon.swapOperands();
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,1495,! (opNode.getRightOperand() instanceof ConstantNode ||
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,1496,opNode.getRightOperand() instanceof ParameterNode))
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2212,if (left instanceof ColumnReference &&
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2213,(right instanceof ConstantNode || right instanceof ParameterNode))
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,734,"boolean probeValsAreSorted,"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,766,"probeValsAreSorted,"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,69,"public ResultSet getInsertResultSet(NoPutResultSet source,"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,75,"return new InsertResultSet(source, checkGM, activation );"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,158,"return new UpdateResultSet(source, checkGM, activation);"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,187,"return new UpdateResultSet(source, checkGM, activation,"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,221,"constantRestriction, mapRefItem,"
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,88,private boolean needSort;
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,106,"boolean probeValsAreSorted,"
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,160,this.needSort = !probeValsAreSorted;
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,178,if (needSort)
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,193,java.util.Arrays.sort(pVals);
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,280,DataValueDescriptor pv = null;
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,281,if (moreInListVals())
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,283,pv = getNextProbeValue();
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,284,if (pv == null)
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,290,return;
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,294,reopenScanController(pv);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,205,TestConfiguration.defaultSuite(DatabaseMetaDataTest.class));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1718,"true, true, true, false,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1719,"true, true, false,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2096,"true, false, false, true, // TABLE_SCHEM cannot be NULL in Derby"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2097,"true, true, true, true,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2699,"true, false, false, false,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2700,"true, false, false, false,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1178,public void testGetColumnsReadOnly() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1192,public void testGetColumnsModify() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1449,throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1499,public static void crossCheckGetColumnRowAndResultSetMetaData(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1501,throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1530,else if (dmdColumnType == Types.JAVA_OBJECT && usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,592,"assertEquals(""getURL match"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,593,"getTestConfiguration().getJDBCUrl(),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,594,url);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2073,"Types.VARCHAR, Types.SMALLINT, Types.VARCHAR"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1505,"assertEquals(""RSMD.getCatalogName"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1506,"rsmdt.getCatalogName(col), rs.getString(""TABLE_CAT""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1507,"assertEquals(""RSMD.getSchemaName"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1508,"rsmdt.getSchemaName(col), rs.getString(""TABLE_SCHEM""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1509,"assertEquals(""RSMD.getTableName"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1510,"rsmdt.getTableName(col), rs.getString(""TABLE_NAME""));"
java/client/org/apache/derby/client/ClientDataSourceFactory.java,84,ClientBaseDataSource ds = null;
java/client/org/apache/derby/client/ClientDataSourceFactory.java,85,if (ref.getClassName().equals(ClientDataSource.className__)) {
java/client/org/apache/derby/client/ClientDataSourceFactory.java,86,ds = new ClientDataSource();
java/client/org/apache/derby/client/ClientDataSourceFactory.java,87,} else if (ref.getClassName().equals(ClientXADataSource.className__)) {
java/client/org/apache/derby/client/ClientDataSourceFactory.java,88,ds = new ClientXADataSource();
java/client/org/apache/derby/client/ClientDataSourceFactory.java,89,} else if (ref.getClassName().equals(ClientConnectionPoolDataSource.className__)) {
java/client/org/apache/derby/client/ClientDataSourceFactory.java,90,ds = new ClientConnectionPoolDataSource();
java/client/org/apache/derby/client/ClientDataSourceFactory.java,91,} else {
java/client/org/apache/derby/client/ClientDataSourceFactory.java,92,return null;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2420,"constraintText.append(columnNames[colCtr] + "" IS NOT NULL "");"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,883,"cd.drop(lcc, false);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,901,"fkcd.drop(lcc, true);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1743,"cd.drop(activation.getLanguageConnectionContext(), td);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,408,"dropColumnFromTable(activation, ix);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,699,"private void dropColumnFromTable(Activation activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,700,int ix)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,709,ColumnDescriptor columnDescriptor =
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,710,td.getColumnDescriptor(columnInfo[ix].name);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,713,if (columnDescriptor == null)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,715,throw
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,716,StandardException.newException(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,717,"SQLState.LANG_COLUMN_NOT_FOUND_IN_TABLE,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,718,"columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,719,td.getQualifiedName());
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,723,ColumnDescriptorList tab_cdl = td.getColumnDescriptorList();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,724,int size = tab_cdl.size();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,727,if (size == 1)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,732,"""THE *LAST* COLUMN "" + columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,789,"columnInfo[ix].name, ""TRIGGER"","
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,859,"columnInfo[ix].name, ""CONSTRAINT"","
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,930,"dd.dropColumnDescriptor(td.getUUID(), columnInfo[ix].name, tc);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,219,"public void	executeConstantAction("
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,220,Activation activation)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,221,throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,223,LanguageConnectionContext   lcc =
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,224,activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,225,DataDictionary              dd = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,226,DependencyManager           dm = dd.getDependencyManager();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,227,TransactionController       tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,355,"addNewColumnToTable(activation, lcc, dd, tc, ix);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,364,"modifyColumnDefault(activation, ix);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,369,"modifyColumnType(activation, ix);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,374,modifyColumnConstraint(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,375,"activation, columnInfo[ix].name, true);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,402,modifyColumnConstraint(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,403,"activation, columnInfo[ix].name, false);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,525,compressTable(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,531,truncateTable(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,542,private void addNewColumnToTable(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,543,"Activation                  activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,544,"LanguageConnectionContext   lcc,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,545,"DataDictionary              dd,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,546,"TransactionController       tc,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,547,int                         ix)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,617,"updateNewAutoincrementColumn(activation, columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,927,compressTable(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,983,"private void modifyColumnType(Activation activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,984,int ix)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1067,throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1069,LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1070,DataDictionary dd = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1072,TransactionController tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1065,"private void modifyColumnDefault(Activation activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1066,int ix)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1127,"long maxValue = getColumnMax(activation, td, columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1128,"columnInfo[ix].autoincInc,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1129,columnInfo[ix].autoincStart);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1150,private void compressTable(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1151,Activation activation)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1210,getAffectedIndexes(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1342,private void truncateTable(Activation activation)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1435,getAffectedIndexes(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1709,private void getAffectedIndexes(Activation activation)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2236,"private long getColumnMax(Activation activation, TableDescriptor td, String columnName,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2237,"long increment, long initial)"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2238,throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2317,"private void updateNewAutoincrementColumn(Activation activation, String columnName, long initial,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,889,if (cascade)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2489,break;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ScrollCursors1Test.java,686,"s.executeUpdate(""drop table t1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/_Suite.java,131,if (!(JDBC.vmSupportsJSR169() &&
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/_Suite.java,132,(OLD_VERSIONS[i][0]==10) && (OLD_VERSIONS[i][1]==0)))
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/_Suite.java,133,suite.addTest(UpgradeRun.suite(OLD_VERSIONS[i]));
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedInput.java,28,public class LocalizedInput extends InputStreamReader{
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedInput.java,31,super(i);
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedInput.java,36,"super(i,encode);"
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1047,for (int index = 0; index < numTables; index++)
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1049,if ((index != tableNumber) && referencedTableMap.get(index))
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1051,dependencyMap.set(index);
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,298,boolean duplicate = false;
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,299,long conglomId = 0;
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,320,if ((bcps.length == baseColumnPositions.length) &&
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,321,(irg.isUnique() || !unique) &&
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,322,indexType.equals(irg.indexType()))
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,331,"if (j == baseColumnPositions.length)	// duplicate"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,349,indexRowGenerator = cd.getIndexDescriptor();
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,353,duplicate = true;
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,363,if (duplicate)
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,414,if (! duplicate)
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,527,if (duplicate)
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,648,ConglomerateDescriptor cgd =
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,649,"ddg.newConglomerateDescriptor(conglomId, indexName, true,"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,650,"indexRowGenerator, isConstraint,"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,651,"conglomerateUUID, td.getUUID(), sd.getUUID() );"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,653,"dd.addDescriptor(cgd, sd, DataDictionary.SYSCONGLOMERATES_CATALOG_NUM, false, tc);"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,657,ConglomerateDescriptorList cdl = td.getConglomerateDescriptorList();
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,658,cdl.add(cgd);
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,668,"new StatisticsDescriptor(dd, dd.getUUIDFactory().createUUID(),"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,669,"cgd.getUUID(), td.getUUID(), ""I"", new StatisticsImpl(numRows, c[i]),"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,670,i + 1);
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,355,"public void drop(LanguageConnectionContext lcc,"
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,356,TableDescriptor td)
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,357,throws StandardException
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,369,if (dd.getConglomerateDescriptors(getConglomerateNumber()).length == 1)
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,645,"public void drop(LanguageConnectionContext lcc,"
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,646,boolean clearDependencies)
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,647,throws StandardException
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,692,"conglomDescs[i].drop(lcc, table);"
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,609,"drop(lcc, true);"
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,458,"""referencedColumns: "" + referencedColumns + ""\n"" +"
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,178,if (resultCol == null) {
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,199,columnPosition = targetCols.size() - targetCols.getOrderBySelect() + addedColumnOffset + 1;
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,290,if(!expression.isConstantExpression()){
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,291,return false;
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,294,return expression.getConstantValueAsObject() instanceof Integer;
java/engine/org/apache/derby/impl/sql/execute/DropConstraintConstantAction.java,230,"conDesc.drop(lcc, !cascadeOnRefKey);"
java/engine/org/apache/derby/impl/sql/execute/DropConstraintConstantAction.java,246,"fkcd.drop(lcc, true);"
java/engine/org/apache/derby/impl/sql/execute/DropIndexConstantAction.java,174,"cd.drop(lcc, td);"
java/engine/org/apache/derby/impl/sql/execute/DropTableConstantAction.java,315,"cd.drop(lcc, true);"
java/engine/org/apache/derby/impl/sql/execute/DropTableConstantAction.java,346,"cd.drop(lcc, false);"
java/engine/org/apache/derby/impl/sql/execute/DropTableConstantAction.java,369,"fkcd.drop(lcc, true);"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4284,if (isClosed) {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3676,} catch (StandardException t) {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3761,} catch (StandardException t) {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3822,} catch (StandardException t) {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4010,if (wasNull = dvd.isNull())
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4022,"return new EmbedBlob(dvd, getEmbedConnection());"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4062,if (wasNull = dvd.isNull())
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4074,"return new EmbedClob(getEmbedConnection(), dvd);"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4476,try {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,634,isClosed = true;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4307,isClosed = true;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,2090,if (rows < 0 || (stmt.getMaxRows() != 0 && rows > stmt.getMaxRows())) {
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,388,SubstituteExpressionVisitor se =
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,389,new SubstituteExpressionVisitor(
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,390,"gbc.getColumnExpression(),"
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,391,"vc,"
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,393,parent.getResultColumns().accept(se);
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,419,new SubstituteExpressionVisitor(
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,420,"gbc.getColumnExpression(),"
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,421,"vc, null);"
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,422,havingClause.accept(havingSE);
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,1161,if (accessPath == null)
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,341,private void addUnAggColumns() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,507,addUnAggColumns();
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,624,ps = database.getConnection().prepareCall(sqlStmt);
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,630,parsePkgidToFindHoldability();
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,631,"ps = prepareStatementJDBC3(sqlStmt, scrollType, concurType,"
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,632,withHoldCursor);
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,651,return ps;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,472,if (columnName.equals( resultColumn.getName()) )
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,576,if (columnName.equals( resultColumn.getName()) )
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2239,int size = size();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2350,int size = size();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2222,"""size() = ("" +"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2223,size() +
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2224,""") is expected to equal otherRCL.size ("" +"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2225,otherRCL.size() +
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3837,if (defaultInfo != null)
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1674,if (resultColumn.isGenerated())
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3431,int[] mapSourceColumns()
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3433,"int[]			mapArray = new int[size()];"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3453,mapArray[index] = vcn.getSourceColumn().getVirtualColumnId();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3468,mapArray[index] = cr.getSource().getVirtualColumnId();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3477,return mapArray;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2278,if (
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2279,"!thisExpr.getTypeCompiler().storable(otherTypeId, cf) &&"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2280,"!otherExpr.getTypeCompiler().storable(thisTypeId, cf))"
java/client/org/apache/derby/client/am/Blob.java,263,private java.io.InputStream getBinaryStreamX() throws SqlException {
java/client/org/apache/derby/client/am/Clob.java,366,private java.io.Reader getCharacterStreamX() throws SqlException {
java/client/org/apache/derby/client/am/Clob.java,412,private java.io.InputStream getAsciiStreamX() throws SqlException {
java/client/org/apache/derby/client/am/Clob.java,641,if ((offset < 0) || offset > str.length() ) {
java/client/org/apache/derby/client/am/Cursor.java,982,"Blob b = (Blob) getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,983,"return agent_.crossConverters_.getStringFromBytes(b.getBytes(1, (int) b.length()));"
java/client/org/apache/derby/client/am/Cursor.java,986,"return c.getSubString(1, (int) c.length());"
java/client/org/apache/derby/client/am/Cursor.java,1005,"Blob b = (Blob) getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1006,"return b.getBytes(1, (int) b.length());"
java/client/org/apache/derby/client/am/Cursor.java,1016,public final java.io.InputStream getBinaryStream(int column) throws SqlException {
java/client/org/apache/derby/client/am/Cursor.java,1017,try {
java/client/org/apache/derby/client/am/Cursor.java,1018,switch (jdbcTypes_[column - 1]) {
java/client/org/apache/derby/client/am/Cursor.java,1025,"Blob b = (Blob) getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1026,return b.getBinaryStream();
java/client/org/apache/derby/client/am/Cursor.java,1036,public final java.io.InputStream getAsciiStream(int column) throws SqlException {
java/client/org/apache/derby/client/am/Cursor.java,1037,try {
java/client/org/apache/derby/client/am/Cursor.java,1038,switch (jdbcTypes_[column - 1]) {
java/client/org/apache/derby/client/am/Cursor.java,1041,return c.getAsciiStream();
java/client/org/apache/derby/client/am/Cursor.java,1065,"Blob b = (Blob) getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1066,return b.getBinaryStream();
java/client/org/apache/derby/client/am/Cursor.java,1117,"Blob b = (Blob) getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1118,return b.getBinaryStream();
java/client/org/apache/derby/client/am/Cursor.java,1128,public final java.io.Reader getCharacterStream(int column) throws SqlException {
java/client/org/apache/derby/client/am/Cursor.java,1129,try {
java/client/org/apache/derby/client/am/Cursor.java,1130,switch (jdbcTypes_[column - 1]) {
java/client/org/apache/derby/client/am/Cursor.java,1133,return c.getCharacterStream();
java/client/org/apache/derby/client/am/Cursor.java,1158,"Blob b = (Blob) getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1159,"return new java.io.InputStreamReader(b.getBinaryStream(), ""UTF-16BE"");"
java/client/org/apache/derby/client/am/Cursor.java,664,"abstract public Blob getBlobColumn_(int column, Agent agent) throws SqlException;"
java/client/org/apache/derby/client/am/Cursor.java,666,"abstract public Clob getClobColumn_(int column, Agent agent) throws SqlException;"
java/client/org/apache/derby/client/am/Cursor.java,985,"Clob c = getClobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1040,"Clob c = getClobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1082,"Clob c = getClobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1132,"Clob c = getClobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1177,"return getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1187,"return getClobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1236,"return getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1238,"return getClobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,545,charsetName_[column - 1]);
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,273,"protected void createPage(PageKey newIdentity, int[] args)"
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,286,int pageSize = args[2];
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,287,int minimumRecordSize = args[5];
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,288,borrowedSpace = args[4];
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,324,"extent = createExtent(newIdentity.getPageNumber()+1, pageSize, 0 /* pagesAlloced */, maxSpace);"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1771,int[] createPageArgs = new int[STORED_PAGE_ARG_NUM];
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1772,createPageArgs[0] = StoredPage.FORMAT_NUMBER;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1773,createPageArgs[1] = prealloced ?
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1774,0 : (noIO ? 0 : CachedPage.WRITE_SYNC);
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1775,createPageArgs[2] = pageSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1776,createPageArgs[3] = spareSpace;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1777,createPageArgs[4] = minimumRecordSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1800,"""\ncreatePageArgs[1] = "" + createPageArgs[1] +"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2226,int[] createAllocPageArgs = new int[ALLOC_PAGE_ARG_NUM];
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2227,createAllocPageArgs[0] = AllocPage.FORMAT_NUMBER;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2228,createAllocPageArgs[1] = noIO ? 0 : CachedPage.WRITE_SYNC;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2229,createAllocPageArgs[2] = pageSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2230,"createAllocPageArgs[3] = 0;		// allocation page has no need for spare"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2231,createAllocPageArgs[4] = containerInfoSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2232,createAllocPageArgs[5] = minimumRecordSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2282,"int[] createArgs,"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2556,int[] reCreatePageArgs = null;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2560,reCreatePageArgs = new int[STORED_PAGE_ARG_NUM];
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2561,reCreatePageArgs[0] = pageFormat;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2562,reCreatePageArgs[1] = CachedPage.WRITE_SYNC;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2563,reCreatePageArgs[2] = pageSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2564,reCreatePageArgs[3] = spareSpace;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2565,reCreatePageArgs[4] = minimumRecordSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,3254,int[] createArgs = new int[5];
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,3255,"createArgs[0] = StoredPage.FORMAT_NUMBER;	// default is a stored page"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,3256,"createArgs[1] = CachedPage.WRITE_NO_SYNC;	// write it but no sync"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,3257,createArgs[2] = pageSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,3258,createArgs[3] = spareSpace;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,3259,createArgs[4] = minimumRecordSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,712,protected void readHeader(DataInput fileData)
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,889,"protected void writeHeader(DataOutput fileData, boolean create, byte[] epage)"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,912,fileData.write(epage);
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1528,"long pageNumber;		// the page number of the new page"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1536,long startSearch = lastAllocatedPage;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1601,allocPage =
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1602,"findAllocPageForAdd(allocHandle, ntt, startSearch);"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1984,synchronized(allocCache)
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1986,"if (pagenum <= allocCache.getLastPageNumber(handle, firstAllocPageNumber) &&"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1987,"allocCache.getPageStatus(handle, pagenum, firstAllocPageNumber) == AllocExtent.ALLOCATED_PAGE)"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1988,retval = true;
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,727,try {
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,732,if (!local) {
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,733,XAResource xaResource = getXAResource();
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,736,"xaResource.end(xid, XAResource.TMFAIL);"
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,741,if (e.errorCode < XAException.XA_RBBASE
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,742,|| e.errorCode > XAException.XA_RBEND) {
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,743,connThread.getServer().consoleExceptionPrint(e);
java/drda/org/apache/derby/impl/drda/XADatabase.java,37,import org.apache.derby.impl.drda.DRDAXid;
java/drda/org/apache/derby/impl/drda/XADatabase.java,38,import  org.apache.derby.iapi.jdbc.BrokeredConnection;
java/drda/org/apache/derby/impl/drda/XADatabase.java,50,private EmbeddedXADataSource xaDataSource;
java/drda/org/apache/derby/impl/drda/XADatabase.java,69,if (xaDataSource == null)
java/drda/org/apache/derby/impl/drda/XADatabase.java,71,xaDataSource = new EmbeddedXADataSource();
java/engine/org/apache/derby/jdbc/XATransactionState.java,86,boolean isFinished;
java/engine/org/apache/derby/jdbc/XATransactionState.java,103,XATransactionState.this.cancel();
java/engine/org/apache/derby/jdbc/XATransactionState.java,104,} catch (XAException ex) {
java/engine/org/apache/derby/jdbc/XATransactionState.java,105,Monitor.logThrowable(ex);
java/engine/org/apache/derby/jdbc/XATransactionState.java,121,this.isFinished = false;
java/engine/org/apache/derby/jdbc/XATransactionState.java,357,isFinished = true;
java/engine/org/apache/derby/jdbc/XATransactionState.java,366,private synchronized void cancel() throws XAException {
java/engine/org/apache/derby/jdbc/XATransactionState.java,371,if (!isFinished) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,100,Assert.assertTrue(rs.next());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,104,"Assert.assertEquals(xid, rXid);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,107,Assert.assertFalse(rs.next());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,167,int timeoutStatementsToExecute = 1000;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,183,XAConnection xaConn = null;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,188,xaConn = xaDataSource.getXAConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,189,xaRes = xaConn.getXAResource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,190,conn = xaConn.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,193,xaRes.setTransactionTimeout(5);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,210,Assert.fail();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,225,xaConn.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,226,} else {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,233,"ResultSet rs = stm.executeQuery(""select count(*) from XATT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,238,Assert.assertTrue(rs.getInt(1) == timeoutStatementsCommitted);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,241,xaConn = xaDataSource.getXAConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,242,xaRes = xaConn.getXAResource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,243,conn = xaConn.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,256,"""select * from XATT a, XATT b, XATT c, XATT d, XATT e """
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,257,"+ ""order by a.i"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,262,ex
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,264,exceptionThrown = true;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,274,Assert.assertTrue(rs.getInt(1) == timeoutStatementsCommitted);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,299,Assert.assertNotNull(str);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,300,"Assert.assertTrue(str.matches(""\\(\\p{Digit}+,\\p{XDigit}+,\\p{XDigit}+\\)""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,306,Assert.assertTrue(gtidS.length() % 2 == 0);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,307,Assert.assertTrue(bqualS.length() % 2 == 0);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,335,return TestConfiguration.defaultSuite(XATransactionTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,67,"Xid xid = new ClientXid(0x1234, gid, bid);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,288,"Xid xid = new ClientXid(0x1234, gid, bid);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,289,return xid;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,325,"return new ClientXid(fmtid, gtid, bqual);"
java/engine/org/apache/derby/impl/store/raw/data/InputStreamContainer.java,92,readHeader(dis);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,682,file.seek(FIRST_ALLOC_PAGE_OFFSET);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,683,epage = getEmbryonicPage(file);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1396,fileData.seek(FIRST_ALLOC_PAGE_OFFSET);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1397,readHeader(fileData);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1438,readHeader(fileData);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,179,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,479,synchronized (this) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,483,if (getCommittedDropState()) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,484,clearDirty();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,485,return;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,492,while(preDirty == true)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,494,waited = true;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,495,try
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,497,wait();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,499,catch (InterruptedException ie)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,501,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,505,if (waited)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,508,if (getCommittedDropState())
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,510,clearDirty();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,511,return;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,857,return AccessController.doPrivileged( this) != null;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1022,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,850,synchronized boolean openContainer(ContainerKey newIdentity)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1297,try {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1302,dataFactory.writeInProgress();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1303,try
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1305,"fileData = file.getRandomAccessFile( ""rw"");"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1307,finally
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1309,dataFactory.writeFinished();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1334,} catch (SecurityException se) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1338,"throw StandardException.newException( SQLState.FILE_CREATE, se, file);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1340,} catch (IOException ioe) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1353,"throw StandardException.newException( SQLState.FILE_CREATE, ioe, file);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,100,boolean result = super.openContainer(newIdentity);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,101,if (result == true && super.fileData != null &&
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,102,super.fileData instanceof java.io.RandomAccessFile) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,110,ourChannel = ((RandomAccessFile)super.fileData).getChannel();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,112,return result;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,242,ioChannel = ourChannel;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,243,if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,246,SanityManager.ASSERT(! ((ioChannel == null) &&
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,247,"super.fileData instanceof java.io.RandomAccessFile),"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,248,"""RAFContainer4: New style writePage attempted "" +"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,249,"""with uninitialized ioChannel"");"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,81,private int iosInProgress = 0;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,174,SanityManager.ASSERT(!getCommittedDropState());
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,201,"readFull(pageBuf, ioChannel, pageOffset);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,213,pageNumber != FIRST_ALLOC_PAGE_NUMBER)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,307,"SanityManager.DEBUG_PRINT(""RAFContainer4"","
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,308,"""Write to a dropped and closed container discarded."");"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,234,"throws IOException, StandardException"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,99,ConstantAction csca
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,102,try {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,103,csca.executeConstantAction(activation);
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,104,} catch (StandardException se) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,105,if (se.getMessageId()
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,106,.equals(SQLState.LANG_OBJECT_ALREADY_EXISTS)) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,109,} else {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,110,throw se;
java/engine/org/apache/derby/impl/jdbc/PositionedStoreStream.java,99,int ret = this.stream.read(b);
java/engine/org/apache/derby/impl/jdbc/PositionedStoreStream.java,100,this.pos += ret;
java/engine/org/apache/derby/impl/jdbc/PositionedStoreStream.java,101,return ret;
java/engine/org/apache/derby/impl/jdbc/PositionedStoreStream.java,115,this.pos += ret;
java/engine/org/apache/derby/impl/jdbc/PositionedStoreStream.java,128,if (ret > -1) {
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetStream.java,25,import java.io.IOException;
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetStream.java,32,extends InputStream {
java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java,140,this.in = new BufferedInputStream(in);
java/engine/org/apache/derby/impl/load/Export.java,129,return PrivilegedFileOps.exists(file);
java/engine/org/apache/derby/impl/load/Export.java,146,return PrivilegedFileOps.exists(file);
java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java,578,if(PrivilegedFileOps.exists(backupRoot))
java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java,582,if(PrivilegedFileOps.exists(bserviceProp))
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2508,File bsegdir;   //segment directory in the backup
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2509,"File backupRoot = new java.io.File(backupPath);	//root dir of backup db"
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2517,String[] bfilelist = PrivilegedFileOps.list(backupRoot);
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2526,"bsegdir = new File(backupRoot , bfilelist[i]);"
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2527,if(PrivilegedFileOps.exists(bsegdir) &&
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2528,PrivilegedFileOps.isDirectory(bsegdir))
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2530,segmentexist = true;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2531,break;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2660,public final Object run() throws Exception
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,474,istream.println(LINE);
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2320,isFrozen = false;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2321,freezeSemaphore.notifyAll();
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2323,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2366,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,499,storageFactory.shutdown();
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,1635,actionCode = REMOVE_STUBS_ACTION;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,1636,try
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,1638,AccessController.doPrivileged( this);
java/client/org/apache/derby/client/am/Sqlca.java,393,"states[i] = tokens[i].substring(0, 5);"
java/client/org/apache/derby/client/am/Sqlca.java,394,tokens[i] = tokens[i].substring(6);
java/client/org/apache/derby/client/am/Sqlca.java,319,int sqlCode;
java/client/org/apache/derby/client/am/Sqlca.java,325,sqlCode = getSqlCode();
java/client/org/apache/derby/client/am/Sqlca.java,330,sqlCode = 0;
java/client/org/apache/derby/client/am/Sqlca.java,334,"return ""DERBY SQL error: SQLCODE: "" + sqlCode + "", SQLSTATE: "" +"
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,106,lobFile =
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,44,import org.apache.derby.shared.common.error.ExceptionUtil;
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,293,SchemaDescriptor sd = getSchemaDescriptor();
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,368,getSchemaDescriptor());
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,463,return isSessionSchema(getSchemaDescriptor());
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,483,SchemaDescriptor sd = getSchemaDescriptor();
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,433,"getObjectName(),"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,416,if (numCheckConstraints > 0)
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,448,tableElementList.bindAndValidateCheckConstraints(fromList);
java/engine/org/apache/derby/impl/sql/compile/DropTableNode.java,133,"return	getGenericConstantActionFactory().getDropTableConstantAction( getFullName(),"
java/engine/org/apache/derby/impl/sql/compile/DropTableNode.java,134,"getRelativeName(),"
java/engine/org/apache/derby/impl/sql/compile/DropTableNode.java,135,"getSchemaDescriptor(),"
java/engine/org/apache/derby/impl/sql/compile/DropTableNode.java,136,"conglomerateNumber,"
java/engine/org/apache/derby/impl/sql/compile/DropTableNode.java,137,"td.getUUID(),"
java/engine/org/apache/derby/impl/sql/compile/DropTableNode.java,138,dropBehavior);
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,94,return defaultText;
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,287,if (numCheckConstraints > 0)
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,297,FromList fromList = (FromList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,298,"C_NodeTypes.FROM_LIST,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,299,"getNodeFactory().doJoinOrderOptimization(),"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,300,getContextManager());
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,301,FromBaseTable table = (FromBaseTable)
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,302,getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,303,"C_NodeTypes.FROM_BASE_TABLE,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,304,"getObjectName(),"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,305,"null,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,306,"null,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,307,"null,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,308,getContextManager());
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,309,fromList.addFromTable(table);
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,310,"fromList.bindTables(dd,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,311,(FromList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,312,"C_NodeTypes.FROM_LIST,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,313,"getNodeFactory().doJoinOrderOptimization(),"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,314,getContextManager()));
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,315,tableElementList.appendNewColumnsToRCL(table);
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,320,tableElementList.bindAndValidateCheckConstraints(fromList);
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1219,return (TableName) getNodeFactory().getNode
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1224,getContextManager()
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,492,public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,708,return p.parseStatement(sql);
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,67,public abstract class QueryTreeNode implements Visitable
java/tools/org/apache/derby/impl/tools/dblook/DB_Table.java,152,"colDef.append("" DEFAULT "");"
java/tools/org/apache/derby/impl/tools/dblook/DB_Table.java,153,colDef.append(rs.getString(2));
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,482,"bindCheckConstraint(nodeFactory,"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,506,"void	bindCheckConstraint"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,511,"ValueNode			checkConstraint"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,516,"TableName	targetTableName ="
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,517,"makeTableName(targetTableDescriptor.getSchemaName(),"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,518,targetTableDescriptor.getName());
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,543,getContextManager());
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,551,getContextManager());
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,556,checkConstraint = checkConstraint.bindExpression(
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,773,continue;
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1195,StatementNode qt = p.parseStatement(select);
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,842,"mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, ""getInsertResultSet"", ClassName.ResultSet, 2);"
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,187,this.expression = (ValueNode) arg2;
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,162,this.expression = (ValueNode) arg2;
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,193,this.expression = (ValueNode) arg2;
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,175,this.expression = (ValueNode) arg2;
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,580,"expression = expression.bindExpression(fromList, subqueryList,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,581,aggregateVector);
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,819,"expression = expression.preprocess(numTables, outerFromList,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,821,outerPredicateList);
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1538,expression = (ValueNode)expression.accept(v);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1152,String defaultText = defaultInfo.getDefaultText();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1153,ValueNode defaultTree = parseDefault(defaultText);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1154,defaultTree = defaultTree.bindExpression(
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1155,"getFromList(),"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1156,"(SubqueryList) null,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1157,(Vector) null);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1158,newResultColumn = (ResultColumn) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1159,"C_NodeTypes.RESULT_COLUMN,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1160,"defaultTree.getTypeServices(),"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1161,"defaultTree,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1162,getContextManager());
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,317,if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,318,"SanityManager.ASSERT(resultColumns.visibleSize() <= typeColumns.size(),"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,319,"""More columns in ResultColumnList than in base table"");"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,322,int rclSize = resultColumns.size();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,323,for (int index = 0; index < rclSize; index++)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,325,"ResultColumn	rc = (ResultColumn) resultColumns.elementAt(index);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,327,ValueNode re = rc.getExpression();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,329,if (re.requiresTypeFromContext())
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,331,"ResultColumn	typeCol ="
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,332,(ResultColumn) typeColumns.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,338,re.setType(typeCol.getTypeServices());
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,340,else if (re instanceof CharConstantNode)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,378,"ResultColumn	typeCol ="
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,379,(ResultColumn) typeColumns.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,381,TypeId colTypeId = typeCol.getTypeId();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,383,if (colTypeId.isStringTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,385,if (colTypeId.getJDBCTypeId() != java.sql.Types.CHAR) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,387,int maxWidth = re.getTypeServices().getMaximumWidth();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,389,"re.setType(new DataTypeDescriptor(colTypeId, true, maxWidth));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,392,else if (colTypeId.isBitTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,393,if (colTypeId.getJDBCTypeId() == java.sql.Types.VARBINARY) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,401,TypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.VARCHAR);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,402,"re.setType(new DataTypeDescriptor(tId, true));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,403,"typeColumns.setElementAt(typeCol, index);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,405,else if (colTypeId.getJDBCTypeId() == java.sql.Types.LONGVARBINARY) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,406,TypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.LONGVARCHAR);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,407,"re.setType(new DataTypeDescriptor(tId, true));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,408,"typeColumns.setElementAt(typeCol, index);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,413,else if (re instanceof BitConstantNode)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,415,"ResultColumn	typeCol ="
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,416,(ResultColumn) typeColumns.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,418,TypeId colTypeId = typeCol.getTypeId();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,420,if (colTypeId.isBitTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,425,if ((colTypeId.getJDBCTypeId() != java.sql.Types.BINARY) &&
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,426,(colTypeId.getJDBCTypeId() != java.sql.Types.BLOB)) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,428,int maxWidth = re.getTypeServices().getMaximumWidth();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,430,"re.setType(new DataTypeDescriptor(colTypeId, true, maxWidth));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,433,else if (colTypeId.isStringTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,434,if (colTypeId.getJDBCTypeId() == java.sql.Types.VARCHAR) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,442,TypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.VARBINARY);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,443,"re.setType(new DataTypeDescriptor(tId, true));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,444,"typeColumns.setElementAt(typeCol, index);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,446,else if (colTypeId.getJDBCTypeId() == java.sql.Types.LONGVARCHAR) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,447,TypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.LONGVARBINARY);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,448,"re.setType(new DataTypeDescriptor(tId, true));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,449,"typeColumns.setElementAt(typeCol, index);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1243,StatementNode qt = p.parseStatement(values);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,460,if (checkGM != null)
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,450,afterColumns);
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,554,"if (hasCheckConstraints(dataDictionary, targetTableDescriptor))"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,593,"hasTriggers ? resultColumnList : afterColumns,"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,818,"generateCheckConstraints( checkConstraints, acb, mb ); // arg 2"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,825,"ClassName.ResultSet, 4);"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,829,"ClassName.ResultSet, 2);"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,873,"ResultColumnList	updateColumnList"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,884,"FormatableBitSet	columnMap = UpdateNode.getUpdateReadMap(baseTable,"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,885,"updateColumnList, conglomVector, relevantCdl, relevantTriggers, needsDeferredProcessing );"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,940,"boolean[]					needsDeferredProcessing"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,125,"this(source, checkGM , activation, activation.getConstantAction(),null);"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,147,"this(source, checkGM , activation,"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,566,source.updateRow(newBaseRow);
java/client/org/apache/derby/client/net/NetConnection.java,297,completeConnect();
java/client/org/apache/derby/client/net/NetConnection.java,1367,"extnam_ = ""derbydnc"" + java.lang.Thread.currentThread().getName();"
java/client/org/apache/derby/client/net/NetConnection.java,218,if(!isConnectionNull())
java/client/org/apache/derby/client/net/NetConnection.java,36,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/net/NetConnection.java,194,"public NetConnection(NetLogWriter netLogWriter,"
java/client/org/apache/derby/client/net/NetConnection.java,195,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,196,"String user,"
java/client/org/apache/derby/client/net/NetConnection.java,197,String password) throws SqlException {
java/client/org/apache/derby/client/net/NetConnection.java,215,String password = ClientBaseDataSource.getPassword(properties);
java/client/org/apache/derby/client/net/NetConnection.java,216,securityMechanism_ = ClientBaseDataSource.getSecurityMechanism(properties);
java/client/org/apache/derby/client/net/NetConnection.java,226,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,237,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,274,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,286,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,415,if (!isAutoincrement)
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,108,"An update row, for an update statement which sets n columns; i.e"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,109,"UPDATE tab set x,y,z=.... where ...;"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,110,"has,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,111,"before values of x,y,z after values of x,y,z and rowlocation."
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,112,"need only normalize after values of x,y,z."
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,113,"i.e insead of starting at index = 1, I need to start at index = 4."
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,114,also I needn't normalize the last value in the row.
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,116,startCol = (forUpdate) ? ((numCols - 1)/ 2) + 1 : 1;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,307,if (desiredTypes == null)
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,309,desiredTypes = new DataTypeDescriptor[numCols];
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,310,for (whichCol = 1; whichCol <= numCols; whichCol++)
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,312,DataTypeDescriptor dtd = resultDescription.getColumnDescriptor(whichCol).getType();
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,314,desiredTypes[whichCol - 1] = dtd;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,319,for (whichCol = 1; whichCol <= numCols; whichCol++)
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,321,DataValueDescriptor sourceCol = sourceRow.getColumn(whichCol);
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,326,if (whichCol < startCol)
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,327,normalizedCol = sourceCol;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,329,try {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,330,normalizedCol =
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,331,"desiredTypes[whichCol - 1].normalize(sourceCol,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,332,normalizedRow.getColumn(whichCol));
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,333,} catch (StandardException se) {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,335,if (se.getMessageId().startsWith(SQLState.LANG_NULL_INTO_NON_NULL))
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,337,ResultColumnDescriptor columnDescriptor =
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,338,resultDescription.getColumnDescriptor(whichCol);
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,339,throw
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,340,"StandardException.newException(SQLState.LANG_NULL_INTO_NON_NULL,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,341,columnDescriptor.getName());
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,344,throw se;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,347,"normalizedRow.setColumn(whichCol, normalizedCol);"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,357,public void updateRow (ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,358,source.updateRow(row);
java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java,328,defaultInfo = (DefaultInfoImpl)cd.getDefaultInfo();
java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java,327,if (defaultNode == null)
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1011,if (!privExists(dbHistoryFile))
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,393,public int genColumnInfos(ColumnInfo[] colInfos)
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,404,"null, null, null, null, null,"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2206,"FromTable					fsq;"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2226,prevCompSchema = compilerContext.setCompilationSchema(compSchema);
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2271,fsq = (FromTable) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2293,compilerContext.setCompilationSchema(prevCompSchema);
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2289,"return fsq.bindNonVTITables(dataDictionary, fromListParam);"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2287,fsq.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2177,ResultSetNode vtiNode = getNodeFactory().mapTableAsVTI(
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,216,subquery.bindExpressions(nestedFromList);
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,217,subquery.bindResultColumns(nestedFromList);
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,438,GroupByList gbl)
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,132,"return super.getFromTableByName(name, schemaName, exactMatch);"
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,138,if ((num_possible_commit_delete > 0) &&
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,139,(btree_locking_policy.lockScanForReclaimSpace(leaf)))
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,189,if (controlRow != null)
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,463,"""BTreeController_doIns"", false,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,319,"""BTreeScan_fetchNextGroup"", false,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,331,if (latch_released)
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,459,if (max_rowcnt <= ret_row_count)
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,160,"""BTreeMaxScan_fetchNextGroup"", false,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,183,if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,186,SanityManager.THROWASSERT(
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,187,"""can not fail holding scan lock."");"
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,348,"""BTreeMaxScan_positionAtStartPosition"", true,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,533,"max_found = fetchMaxRowFromBeginning(scan_position, fetch_row);"
java/engine/org/apache/derby/impl/store/access/btree/BTreeRowPosition.java,58,public BTreeRowPosition()
java/engine/org/apache/derby/impl/store/access/btree/BTreeRowPosition.java,60,super();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,260,scan_position = new BTreeRowPosition();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,465,"""BTreeScan_positionAtStartPosition"", true,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,624,"""BTreeScan_positionAtStartPosition"", true,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,673,while (true)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,675,if ((pos.next_leaf =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,676,(LeafControlRow) pos.current_leaf.getRightSibling(this)) == null)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,678,break;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1058,if ((pos.current_rh == null) != (pos.current_positionKey != null))
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1065,if (!((pos.current_rh == null) == (pos.current_positionKey != null)))
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1073,if (pos.current_positionKey == null)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1079,pos.current_leaf = (LeafControlRow)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1080,"ControlRow.get(this, pos.current_rh.getPageNumber());"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1081,pos.current_slot =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1082,pos.current_leaf.page.getSlotNumber(pos.current_rh);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1103,boolean latch_released;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1104,do
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1106,pos.current_leaf = (LeafControlRow)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1109,if (sp.resultExact || missing_row_for_key_ok)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1119,latch_released =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1120,!this.getLockingPolicy().lockScan(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1121,"pos.current_leaf,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1122,"(LeafControlRow) null, // no other latch currently"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1123,"false /* not for update */,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1124,ConglomerateController.LOCK_READ); // read lock on scan position
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1127,if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1129,latch_released =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1130,test_errors(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1131,"this,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1132,"""BTreeScan_reposition"", true,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1133,"this.getLockingPolicy(),"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1134,"pos.current_leaf, latch_released);"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1137,else
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1146,} while (latch_released);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1402,scan_position.current_leaf.release();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1403,scan_position.current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1503,scan_position.current_leaf.release();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1504,scan_position.current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1584,scan_position.current_leaf.release();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1585,scan_position.current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1699,scan_position.current_leaf.release();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1700,scan_position.current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2269,if (scan_position.current_positionKey == null)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2356,else
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2363,if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2364,SanityManager.THROWASSERT(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2365,"""Must always be able to reposition."");"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2370,finally
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2373,if (scan_position.current_leaf != null)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2376,scan_position.current_leaf.release();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2377,scan_position.current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2397,"public void savePosition(Conglomerate conglom, Page page)"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2398,throws StandardException
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2405,if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2407,SanityManager.ASSERT(page.isLatched());
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2411,System.out.println(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2412,"""Saving position in btree at top: "" +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2413,""" this.conglomerate = "" +  this.conglomerate        +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2414,""" this.scan_state   = "" +  this.scan_state);"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2415,"SanityManager.DEBUG_PRINT(""savePosition()"","
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2416,"""Saving position in btree at top: "" +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2417,""" this.conglomerate = "" +  this.conglomerate        +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2418,""" this.scan_state   = "" +  this.scan_state);"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2422,if ((this.getConglomerate() == conglom) &&
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2423,(this.scan_state == SCAN_INPROGRESS))
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2426,if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2428,SanityManager.ASSERT(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2429,(scan_position.current_rh == null) ==
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2430,(scan_position.current_positionKey != null));
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2434,"SanityManager.DEBUG_PRINT(""savePosition()"","
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2435,"""Saving position in btree: "" +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2436,""";current_scan_pageno = "" + this.current_scan_pageno +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2437,"""this.current_rh = "" + this.current_rh +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2438,""";page.getPageNumber() = "" + page.getPageNumber() +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2439,((this.current_rh != null) ?
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2440,"("";this.current_rh.getPageNumber() = "" +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2441,"this.current_rh.getPageNumber()) : """"));"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2444,if (scan_position.current_rh != null &&
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2445,page.getPageNumber() ==
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2446,scan_position.current_rh.getPageNumber())
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2448,scan_position.current_positionKey =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2449,runtime_mem.get_row_for_export(getRawTran());
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2451,RecordHandle rh =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2452,page.fetchFromSlot(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2454,"page.getSlotNumber(scan_position.current_rh),"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2455,"scan_position.current_positionKey,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2456,"(FetchDescriptor) null,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2459,if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2461,SanityManager.ASSERT(rh != null);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2464,scan_position.current_rh = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2465,scan_position.current_slot = Page.INVALID_SLOT_NUMBER;
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,638,"boolean             release_scan_lock,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,268,"boolean                 check_changed_rowloc,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,324,if (current_leaf != null)
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,403,"false,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,568,"""B2iRowLocking3_1_lockScanRow"",  false,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,582,"true,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,595,"""B2iRowLocking3_2_lockScanRow"", false,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,934,"false,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,1052,"false,"
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,361,"SanityManager.THROWASSERT(""SHOULD NOT BE CALLED"");"
java/engine/org/apache/derby/iapi/sql/execute/NoPutResultSet.java,182,public void updateRow(ExecRow row) throws StandardException;
java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java,333,public void updateRow (ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java,334,((NoPutResultSet)cursor).updateRow(row);
java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java,521,public void updateRow(ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,577,public void updateRow (ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,578,source.updateRow(row);
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,500,"result.setColumn(index + 1, sourceRow.getColumn(projectMapping[index]));"
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1101,public void updateRow(ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1102,ExecRow newRow = row;
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1103,boolean undoProjection = false;
java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java,144,scanController = loadSorter();
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,166,if (isInSortedOrder)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,168,currSortedRow = getNextRowFromRS();
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,169,if (currSortedRow != null)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,171,currSortedRow = (ExecIndexRow) currSortedRow.getClone();
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,172,initializeVectorAggregation(currSortedRow);
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,175,else
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,180,scanController = loadSorter();
java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java,146,leftRow = leftResultSet.getNextRowCore();
java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java,147,if (leftRow != null)
java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java,149,openRight();
java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java,150,rowsSeenLeft++;
java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java,110,rightSource.openCore();
java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java,111,rightInputRow = rightSource.getNextRowCore();
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,255,if (isInSortedOrder && distinct)
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,257,currSortedRow = getNextRowFromRS();
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,258,if (currSortedRow != null)
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,260,currSortedRow = (ExecRow) currSortedRow.getClone();
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,263,else
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,268,scanController = loadSorter();
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,269,sorted = true;
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,458,if (cachedDest == null)
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,459,cachedDest = getNull();
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,460,else
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,461,cachedDest.setToNull();
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1037,return (compareWithTypeID.isNumericTypeId() ||
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1038,compareWithTypeID.isBooleanTypeId());
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1062,compareWithTypeID.isStringTypeId() ||
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1063,compareWithTypeID.isNumericTypeId());
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,86,private boolean sameStartStopPosition;
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,256,if (startKeyGetter != null)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,258,startPosition = (ExecIndexRow) startKeyGetter.invoke(activation);
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,259,if (sameStartStopPosition)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,261,stopPosition = startPosition;
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,264,if (stopKeyGetter != null)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,266,stopPosition = (ExecIndexRow) stopKeyGetter.invoke(activation);
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,502,if (probeValue != null)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,504,startPositionRow[0] = probeValue;
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,505,if (!sameStartStopPosition)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,506,stopPositionRow[0] = probeValue;
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,508,else
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,509,rowsThisScan = 0;
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,542,if (startKeyGetter != null)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,544,startPosition = (ExecIndexRow) startKeyGetter.invoke(activation);
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,545,if (sameStartStopPosition)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,547,stopPosition = startPosition;
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,550,if (stopKeyGetter != null)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,552,stopPosition = (ExecIndexRow) stopKeyGetter.invoke(activation);
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,327,"if ((otherType.isNumericTypeId())	||"
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,328,(otherType.isBooleanTypeId()))
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,329,return true;
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,55,int otherJDBCTypeId = otherType.getJDBCTypeId();
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,57,if ((otherJDBCTypeId == Types.DATE) ||
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,58,(otherJDBCTypeId == Types.TIME) ||
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,59,(otherJDBCTypeId == Types.TIMESTAMP))
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,61,return false;
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,64,return true;
java/engine/org/apache/derby/impl/sql/compile/CLOBTypeCompiler.java,55,return (otherType.isStringTypeId()) ;
java/engine/org/apache/derby/impl/sql/compile/CLOBTypeCompiler.java,81,return (otherType.isStringTypeId()) ;
java/engine/org/apache/derby/impl/sql/compile/CharTypeCompiler.java,58,return (otherType.isStringTypeId());
java/client/org/apache/derby/client/net/DssConstants.java,25,static final int MAX_DSS_LEN = 32767;
java/client/org/apache/derby/client/net/NetStatementReply.java,2064,int columnNumber) throws DisconnectException {
java/client/org/apache/derby/client/net/NetStatementReply.java,2065,if (readFastUnsignedByte() == CodePoint.NULLDATA) {
java/client/org/apache/derby/client/net/NetStatementReply.java,2066,return;
java/client/org/apache/derby/client/net/NetStatementReply.java,1554,} else if ((ddmLength >= 71) && (ddmLength <= 781)) {
java/client/org/apache/derby/client/net/NetStatementReply.java,1562,if (scldtaLen < 18 || scldtaLen > 255) {
java/client/org/apache/derby/client/net/Request.java,1582,"System.arraycopy(bytes, 0, bytes_, offset_, bytes.length);"
java/client/org/apache/derby/client/net/Request.java,1583,offset_ += bytes.length;
java/client/org/apache/derby/client/net/Request.java,1528,ensureLength(offset_ + 26);
java/client/org/apache/derby/client/net/Request.java,1529,"org.apache.derby.client.am.DateTime.timestampToTimestampBytes(bytes_, offset_, timestamp);"
java/client/org/apache/derby/client/net/Request.java,1530,offset_ += 26;
java/client/org/apache/derby/client/net/Typdef.java,429,"null,"
java/client/org/apache/derby/client/net/Typdef.java,431,"null,"
java/client/org/apache/derby/client/net/Typdef.java,768,"0x00, // 0x50 Empties"
java/client/org/apache/derby/client/net/Typdef.java,769,"0x00, // 0x51 Empties"
java/drda/org/apache/derby/impl/drda/FdocaConstants.java,136,"protected static int mapJdbcTypeToDrdaType(int jdbcType, boolean nullable,"
java/drda/org/apache/derby/impl/drda/FdocaConstants.java,199,drdaType = DRDAConstants.DRDA_TYPE_NLONG;
java/drda/org/apache/derby/impl/drda/FdocaConstants.java,200,outlen[0] = LONGVARCHAR_MAX_LEN;
java/drda/org/apache/derby/impl/drda/FdocaConstants.java,182,outlen[0] = 26;
java/drda/org/apache/derby/impl/drda/SQLTypes.java,134,"static protected int mapJdbcTypeToDB2SqlType (int jdbctype, boolean nullable,"
java/drda/org/apache/derby/impl/drda/SQLTypes.java,144,"FdocaConstants.mapJdbcTypeToDrdaType(jdbctype,nullable,outlen);"
java/drda/org/apache/derby/impl/drda/SQLTypes.java,180,return DRDAConstants.DB2_SQLTYPE_LONG + nullAddVal;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,151,switch (formatId)
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,236,return formatId;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,268,switch (formatId)
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,427,"SanityManager.THROWASSERT(""Unexpected formatId "" + formatId);"
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,272,JDBCTypeId = JVMInfo.JAVA_SQL_TYPES_BOOLEAN;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,36,public class DynamicByteArrayOutputStream extends OutputStream {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,38,private static int INITIAL_SIZE = 4096;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,40,private byte[] buf;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,41,"private int		position;"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,42,"private int		used;		// how many bytes are used"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,43,"private int		beginPosition;"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,45,public DynamicByteArrayOutputStream() {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,46,this(INITIAL_SIZE);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,49,public DynamicByteArrayOutputStream(int size) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,50,super();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,52,buf = new byte[size];
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,55,public DynamicByteArrayOutputStream(byte[] data) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,56,super();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,58,buf = data;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,61,public DynamicByteArrayOutputStream(DynamicByteArrayOutputStream toBeCloned) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,63,byte[] cbuf = toBeCloned.getByteArray();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,64,buf = new byte[cbuf.length];
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,66,"write(cbuf, 0, cbuf.length);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,67,position = toBeCloned.getPosition();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,68,used = toBeCloned.getUsed();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,69,beginPosition = toBeCloned.getBeginPosition();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,75,public void write(int b)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,77,if (position >= buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,78,expandBuffer(INITIAL_SIZE);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,80,buf[position++] = (byte) b;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,82,if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,83,used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,86,"public void write(byte[] b, int off, int len)"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,88,if ((position+len) > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,89,expandBuffer(len);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,91,"System.arraycopy(b, off, buf, position, len);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,92,position += len;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,94,if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,95,used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,98,"void writeCompleteStream(InputStream dataIn, int len) throws IOException"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,100,if ((position+len) > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,101,expandBuffer(len);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,103,"org.apache.derby.iapi.services.io.InputStreamUtil.readFully(dataIn, buf, position, len);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,104,position += len;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,106,if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,107,used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,110,public void close()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,112,buf = null;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,113,reset();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,121,Reset the stream for reuse
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,123,public void reset()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,125,position = 0;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,126,beginPosition = 0;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,127,used = 0;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,131,Get a reference to the byte array stored in the byte array output
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,132,stream. Note that the byte array may be longer that getPosition().
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,133,Bytes beyond and including the current poistion are invalid.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,135,public byte[] getByteArray()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,137,return buf;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,141,Get the number of bytes that was used.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,143,public int getUsed()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,145,return used;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,149,Get the current position in the stream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,151,public int getPosition()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,153,return position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,157,Get the current position in the stream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,159,public int getBeginPosition()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,161,return beginPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,165,Set the position of the stream pointer.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,166,It is up to the caller to make sure the stream has no gap of garbage in
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,167,it or useful information is not left out at the end because the stream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,168,does not remember anything about the previous position.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,170,public void setPosition(int newPosition)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,172,if (newPosition > position)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,174,if (newPosition > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,175,expandBuffer(newPosition - buf.length);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,178,position = newPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,180,if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,181,used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,183,return ;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,187,Set the begin position of the stream pointer.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,188,"If the newBeginPosition is larger than the stream itself,"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,189,"then, the begin position is not set."
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,191,public void setBeginPosition(int newBeginPosition)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,194,if (newBeginPosition > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,195,return;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,197,beginPosition = newBeginPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,201,Shrink the buffer left by the amount given. Ie.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,202,bytes from 0 to amountToShrinkBy are thrown away
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,204,public void discardLeft(int amountToShrinkBy) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,206,"System.arraycopy(buf, amountToShrinkBy, buf, 0,"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,207,used - amountToShrinkBy);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,209,position -= amountToShrinkBy;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,210,used -= amountToShrinkBy;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,214,Expand the buffer by at least the number of bytes requested in minExtension.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,216,"To optimize performance and reduce memory copies and allocation, we have a staged buffer"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,217,expansion.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,219,<UL>
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,220,<LI> buf.length < 128k - increase by 4k
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,221,<LI> buf.length < 1Mb - increase by 128k
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,222,<LI> otherwise increase by 1Mb.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,223,</UL>
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,225,"In all cases, if minExpansion is greater than the value about then the buffer will"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,226,be increased by minExtension.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,228,private void expandBuffer(int minExtension)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,230,if (buf.length < (128 * 1024)) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,231,if (minExtension < INITIAL_SIZE)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,232,minExtension = INITIAL_SIZE;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,233,} else if (buf.length < (1024 * 1024)) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,235,if (minExtension < (128 * 1024))
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,236,minExtension = (128 * 1024);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,237,} else {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,238,if (minExtension < (1024 * 1024))
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,239,minExtension = 1024 * 1024;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,242,int newsize = buf.length + minExtension;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,244,byte[] newbuf = new byte[newsize];
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,245,"System.arraycopy(buf, 0, newbuf, 0, buf.length);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,246,buf = newbuf;
java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java,204,size = (w > 0 ? w : 15);
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,54,public static final int PARAMETER_NO_NULLS = ParameterMetaData.parameterNoNulls;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,55,public static final int PARAMETER_NULLABLE = ParameterMetaData.parameterNullable;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,56,public static final int PARAMETER_NULLABLE_UNKNOWN = ParameterMetaData.parameterNullableUnknown;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,57,public static final int PARAMETER_MODE_UNKNOWN = ParameterMetaData.parameterModeUnknown;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,58,public static final int PARAMETER_MODE_IN = ParameterMetaData.parameterModeIn;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,59,public static final int PARAMETER_MODE_IN_OUT = ParameterMetaData.parameterModeInOut;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,60,public static final int PARAMETER_MODE_OUT = ParameterMetaData.parameterModeOut;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1014,pingServer(5); // Wait for the server to come up in a reasonable time....
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1148,"private	void	pingServer( int iterations )"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1152,"ping( new NetworkServerControl(), iterations );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1157,"private	void	ping( NetworkServerControl controller, int iterations )"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1176,"System.out.println( ""Server did not come up: "" + finalException.getMessage() );"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,516,"dropSchemaObject( conn, TABLE, name );"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,530,"dropSchemaObject( conn, FUNCTION, name );"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,544,"dropSchemaObject( conn, PROCEDURE, name );"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,556,"protected	static	void	dropSchemaObject( Connection conn, String genus, String objectName )"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,561,"ps = prepare( conn, ""drop "" + genus + "" "" + objectName );"
java/engine/org/apache/derby/impl/sql/compile/HashTableNode.java,259,int[] mapArray = resultColumns.mapSourceColumns();
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1389,int[] mapArray = resultColumns.mapSourceColumns();
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1569,"ClassName.NoPutResultSet, 10);"
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,70,"NoPutResultSet[]	subqueryTrackingArray;"
java/client/org/apache/derby/client/am/DateTime.java,48,private static final int timestampRepresentationLength = 26;
java/client/org/apache/derby/client/am/DateTime.java,162,String encoding)
java/client/org/apache/derby/client/am/DateTime.java,166,"String timestamp = new String(buffer, offset,"
java/client/org/apache/derby/client/am/DateTime.java,167,"DateTime.timestampRepresentationLength,encoding);"
java/client/org/apache/derby/client/am/DateTime.java,174,"int micros = parseTimestampString(timestamp, cal);"
java/client/org/apache/derby/client/am/DateTime.java,176,ts.setNanos(micros * 1000);
java/client/org/apache/derby/client/am/DateTime.java,194,Calendar cal)
java/client/org/apache/derby/client/am/DateTime.java,224,int micros =
java/client/org/apache/derby/client/am/DateTime.java,225,100000 * (((int) timestamp.charAt(20)) - zeroBase) +
java/client/org/apache/derby/client/am/DateTime.java,226,10000 * (((int) timestamp.charAt(21)) - zeroBase) +
java/client/org/apache/derby/client/am/DateTime.java,227,1000 * (((int) timestamp.charAt(22)) - zeroBase) +
java/client/org/apache/derby/client/am/DateTime.java,228,100 * (((int) timestamp.charAt(23)) - zeroBase) +
java/client/org/apache/derby/client/am/DateTime.java,229,10 * (((int) timestamp.charAt(24)) - zeroBase) +
java/client/org/apache/derby/client/am/DateTime.java,230,(((int) timestamp.charAt(25)) - zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,236,"cal.set(Calendar.MILLISECOND, micros / 1000);"
java/client/org/apache/derby/client/am/DateTime.java,237,return micros;
java/client/org/apache/derby/client/am/DateTime.java,344,java.sql.Timestamp timestamp)
java/client/org/apache/derby/client/am/DateTime.java,359,char[] timestampChars = new char[DateTime.timestampRepresentationLength];
java/client/org/apache/derby/client/am/DateTime.java,391,byte[] timestampBytes = (new String(timestampChars)).getBytes(Typdef.UTF8ENCODING);
java/client/org/apache/derby/client/am/DateTime.java,392,"System.arraycopy(timestampBytes, 0, buffer, offset, DateTime.timestampRepresentationLength);"
java/client/org/apache/derby/client/am/DateTime.java,394,return DateTime.timestampRepresentationLength;
java/client/org/apache/derby/client/am/DateTime.java,590,"parseTimestampString(timestamp, cal);"
java/client/org/apache/derby/client/am/DateTime.java,726,"public static final int dateToTimestampBytes(byte[] buffer,"
java/client/org/apache/derby/client/am/DateTime.java,727,"int offset,"
java/client/org/apache/derby/client/am/DateTime.java,728,java.sql.Date date)
java/client/org/apache/derby/client/am/DateTime.java,729,"throws SqlException, UnsupportedEncodingException {"
java/client/org/apache/derby/client/am/DateTime.java,730,int year = date.getYear() + 1900;
java/client/org/apache/derby/client/am/DateTime.java,731,if (year > 9999) {
java/client/org/apache/derby/client/am/DateTime.java,732,"throw new SqlException(null,"
java/client/org/apache/derby/client/am/DateTime.java,733,"new ClientMessageId(SQLState.YEAR_EXCEEDS_MAXIMUM),"
java/client/org/apache/derby/client/am/DateTime.java,734,"new Integer(year), ""9999"");"
java/client/org/apache/derby/client/am/DateTime.java,736,int month = date.getMonth() + 1;
java/client/org/apache/derby/client/am/DateTime.java,737,int day = date.getDate();
java/client/org/apache/derby/client/am/DateTime.java,739,char[] timestampChars = new char[DateTime.timestampRepresentationLength];
java/client/org/apache/derby/client/am/DateTime.java,740,int zeroBase = (int) '0';
java/client/org/apache/derby/client/am/DateTime.java,741,timestampChars[0] = (char) (year / 1000 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,742,timestampChars[1] = (char) ((year % 1000) / 100 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,743,timestampChars[2] = (char) ((year % 100) / 10 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,744,timestampChars[3] = (char) (year % 10 + +zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,745,timestampChars[4] = '-';
java/client/org/apache/derby/client/am/DateTime.java,746,timestampChars[5] = (char) (month / 10 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,747,timestampChars[6] = (char) (month % 10 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,748,timestampChars[7] = '-';
java/client/org/apache/derby/client/am/DateTime.java,749,timestampChars[8] = (char) (day / 10 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,750,timestampChars[9] = (char) (day % 10 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,751,timestampChars[10] = '-';
java/client/org/apache/derby/client/am/DateTime.java,752,timestampChars[11] = '0';
java/client/org/apache/derby/client/am/DateTime.java,753,timestampChars[12] = '0';
java/client/org/apache/derby/client/am/DateTime.java,754,timestampChars[13] = '.';
java/client/org/apache/derby/client/am/DateTime.java,755,timestampChars[14] = '0';
java/client/org/apache/derby/client/am/DateTime.java,756,timestampChars[15] = '0';
java/client/org/apache/derby/client/am/DateTime.java,757,timestampChars[16] = '.';
java/client/org/apache/derby/client/am/DateTime.java,758,timestampChars[17] = '0';
java/client/org/apache/derby/client/am/DateTime.java,759,timestampChars[18] = '0';
java/client/org/apache/derby/client/am/DateTime.java,760,timestampChars[19] = '.';
java/client/org/apache/derby/client/am/DateTime.java,761,timestampChars[20] = '0';
java/client/org/apache/derby/client/am/DateTime.java,762,timestampChars[21] = '0';
java/client/org/apache/derby/client/am/DateTime.java,763,timestampChars[22] = '0';
java/client/org/apache/derby/client/am/DateTime.java,764,timestampChars[23] = '0';
java/client/org/apache/derby/client/am/DateTime.java,765,timestampChars[24] = '0';
java/client/org/apache/derby/client/am/DateTime.java,766,timestampChars[25] = '0';
java/client/org/apache/derby/client/am/DateTime.java,771,byte[] timestampBytes = (new String(timestampChars)).getBytes(Typdef.UTF8ENCODING);
java/client/org/apache/derby/client/am/DateTime.java,772,"System.arraycopy(timestampBytes, 0, buffer, offset, DateTime.timestampRepresentationLength);"
java/client/org/apache/derby/client/am/DateTime.java,774,return DateTime.timestampRepresentationLength;
java/engine/org/apache/derby/iapi/types/TypeId.java,127,"public static final int TIMESTAMP_MAXWIDTH      = 26;	// yyyy-mm-dd hh:mm:ss.ffffff"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,776,if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,777,"assertEquals(""2004-02-14 17:14:24.097625551"",s);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,778,else
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,779,"assertEquals(""2004-02-14 17:14:24.097625"",s);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3505,if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3506,"assertEquals(""2004-03-12 21:14:24.938222433"", val.toString());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3507,else
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3508,"assertEquals(""2004-03-12 21:14:24.938222"", val.toString());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3510,if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3511,"assertEquals(""2004-04-12 04:25:26.462983731"", val.toString());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3512,else
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3513,"assertEquals(""2004-04-12 04:25:26.462983"", val.toString());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3514,break;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,64,"Types.DECIMAL, Types.NUMERIC, Types.BIT, Types.NULL, // Types.BOOLEAN"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,70,"""REAL"", ""FLOAT"", ""DOUBLE"", ""DECIMAL(10,5)"", null, null, null,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,78,"""98"",""98"", ""98"",""98"",null,null,null,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,537,"assertEquals(32, b);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,562,"assertEquals(32, s);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,588,"assertEquals(32, i);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,612,"assertEquals(32, l);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,639,"assertEquals(32.0, f, .000001);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,664,"assertEquals(32.0, d, .00001);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,692,"new BigDecimal(""32.0"").compareTo(bd));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,753,"assertEquals(""32"",s);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,758,"assertEquals(""32.0"",s);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,762,"assertEquals(""32.00000"",s);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1227,if (worked && B2_MOD[whichCall][type])
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1233,else if (B2_MOD[whichCall][type]) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1249,if (worked && B5[b5o][type])
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1255,else if (B5[b5o][type]) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3166,case Types.BIT: {
java/engine/org/apache/derby/impl/sql/compile/FromList.java,732,GroupByList gbl)
java/engine/org/apache/derby/impl/sql/compile/FromList.java,775,gbl);
java/engine/org/apache/derby/impl/sql/compile/FromTable.java,1431,GroupByList gbl)
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1370,GroupByList gbl)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StreamsTest.java,307,if ((new Throwable().getStackTrace().toString()).indexOf(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StreamsTest.java,311,new Throwable().getStackTrace().length - 1;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StreamsTest.java,314,readerStackLevel = new Throwable().getStackTrace().length;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,303,{// left operand must be either a base table or another LOJ
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,318,{// right operand must be either a base table or another LOJ
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,335,"JBitSet				NPReferencedTableMap; // Null-producing"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,336,"JBitSet				RPReferencedTableMap; // Row-preserving"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,356,BinaryRelationalOperatorNode equals;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,357,ValueNode leftCol;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,358,ValueNode rightCol;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,359,AndNode   and;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,360,ValueNode left;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,361,ValueNode vn = joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,362,while (vn instanceof AndNode)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,364,and = (AndNode) vn;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,365,left = and.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,379,boolean refCheck = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,380,boolean leftOperandCheck = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,382,if (RPReferencedTableMap.get(((ColumnReference)leftCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,384,refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,385,leftOperandCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,387,else if (NPReferencedTableMap.get(((ColumnReference)leftCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,389,refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,392,if (refCheck == false)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,393,return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,395,refCheck = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,396,if (leftOperandCheck == false && RPReferencedTableMap.get(((ColumnReference)rightCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,398,refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,400,else if (leftOperandCheck == true && NPReferencedTableMap.get(((ColumnReference)rightCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,402,refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,405,if (refCheck == false)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,406,return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,408,else return LOJ_bindResultColumns(anyChange); //  get out of here
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,410,vn = and.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,415,boolean       push = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,418,if (logicalRightResultSet instanceof HalfOuterJoinNode)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,421,JBitSet  logicalNPRefTableMap = ((HalfOuterJoinNode)logicalRightResultSet).LOJgetNPReferencedTables(numTables);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,426,vn = joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,427,push = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,428,while (vn instanceof AndNode)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,430,and = (AndNode) vn;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,431,left = and.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,432,equals = (BinaryRelationalOperatorNode) left;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,433,leftCol = equals.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,434,rightCol = equals.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,436,if (logicalNPRefTableMap.get(((ColumnReference)leftCol).getTableNumber()) ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,437,logicalNPRefTableMap.get(((ColumnReference)rightCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,439,push = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,440,break;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,443,vn = and.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,448,if (push)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,452,if (super.subqueryList.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,453,((JoinNode)logicalRightResultSet).subqueryList.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,454,super.joinPredicates.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,455,((JoinNode)logicalRightResultSet).joinPredicates.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,456,super.usingClause != null ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,457,((JoinNode)logicalRightResultSet).usingClause != null)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,458,return LOJ_bindResultColumns(anyChange); //  get out of here
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,460,anyChange = true; // we are reordering the LOJs.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,462,ResultSetNode tmp = logicalLeftResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,463,"ResultSetNode LChild, RChild;"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,481,LChild = ((HalfOuterJoinNode)logicalRightResultSet).leftResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,482,RChild = ((HalfOuterJoinNode)logicalRightResultSet).rightResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,484,((HalfOuterJoinNode)logicalRightResultSet).rightResultSet = LChild;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,485,((HalfOuterJoinNode)logicalRightResultSet).leftResultSet  = tmp;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,488,vn = joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,489,joinClause   = ((HalfOuterJoinNode)logicalRightResultSet).joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,490,((HalfOuterJoinNode)logicalRightResultSet).joinClause = vn;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,501,FromList localFromList = (FromList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,502,"C_NodeTypes.FROM_LIST,"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,503,"getNodeFactory().doJoinOrderOptimization(),"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,504,getContextManager());
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,507,leftResultSet  = logicalRightResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,508,rightResultSet = RChild;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,511,((HalfOuterJoinNode)leftResultSet).resultColumns = null;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,512,((JoinNode)leftResultSet).bindResultColumns(localFromList); // localFromList is empty
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,515,boolean localChange = ((HalfOuterJoinNode)leftResultSet).LOJ_reorderable(numTables);
java/engine/org/apache/derby/impl/load/ColumnInfo.java,329,"sb.append(""\"""");"
java/engine/org/apache/derby/impl/load/ColumnInfo.java,330,sb.append(insertColumnNames.get(index));
java/engine/org/apache/derby/impl/load/ColumnInfo.java,331,"sb.append(""\"""");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,70,"assertEquals(0, countLocks());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,88,"assertEquals(0, countLocks());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,114,"assertEquals(0, countLocks());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,134,"assertEquals(0, countLocks());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,145,public int countLocks() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,150,"sql = ""Select count(*) from new org.apache.derby.diag.LockTable() as LT"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,151,ResultSet lockrs = stmt.executeQuery(sql);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,152,lockrs.next();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,153,int count = lockrs.getInt(1);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,154,lockrs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,157,return count;
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,182,if (dblook.isIgnorableSchema(schemaName))
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,186,Statement stmtCols = conn.createStatement();
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,187,"String queryCols = ""SELECT COLUMNNUMBER, COLUMNNAME "" +"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,188,"""FROM SYS.SYSCOLUMNS C, SYS.SYSTABLES T, SYS.SYSSCHEMAS S "" +"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,189,"""WHERE T.TABLEID = C.REFERENCEID and S.SCHEMAID = T.SCHEMAID ""+"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,190,"""and T.TABLENAME = '""+tableName+""' AND SCHEMANAME = '""+schemaName +"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,191,"""' ORDER BY COLUMNNUMBER"";"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,193,ResultSet rsCols= stmtCols.executeQuery(queryCols);
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,194,"String fullName = dblook.addQuotes(schemaName) + ""."" + dblook.addQuotes(tableName);"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,267,"grantStmt.append("")"");"
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,307,sb.append(parameterNames[i]);
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,123,this.parameterNames = parameterNames;
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,124,this.parameterTypes = parameterTypes;
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,125,this.parameterModes = parameterModes;
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,172,public TypeDescriptor[] getParameterTypes() {
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,173,return parameterTypes;
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,176,public int[] getParameterModes() {
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,177,return parameterModes;
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,185,public String[] getParameterNames() {
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,186,return parameterNames;
java/engine/org/apache/derby/impl/sql/execute/DropSchemaConstantAction.java,97,"SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, null, true);"
java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java,863,"totaljvmflags = subjvmflags + ""^"" + totaljvmflags;"
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,393,if (jvmflags != null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,395,if (jflags != null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,402,if (jflags != null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,408,if (testJavaFlags == null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,417,if (testSpecialProps == null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java,1594,if (jvmflags != null)
java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java,184,"File classFile = FileUtil.newFile(dir,filename);"
java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java,190,FileOutputStream fis = new FileOutputStream(classFile);
java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java,200,"SanityManager.THROWASSERT(""Unable to write .class file"");"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,83,"""  java org.apache.derbyBuild.ReleaseNotesGenerator SUMMARY BUG_LIST NOTES_LIST OUTPUT_PAMPHLET\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,87,"""                  BUG_LIST                     An xml JIRA report of issues addressed by this release.\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,88,"""                  NOTES_LIST                An xml JIRA report listing issues which have detailed releaseNotes.html attachments.\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,96,"""The ReleaseNoteGenerator assumes that the two JIRA reports contain\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,97,"""key, title, and attachments elements for each Derby issue. For each\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,98,"""issue in NOTES_LIST, the ReleaseNotesGenerator looks through the\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,99,"""attachments block in that report and grabs the latest reported\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,100,"""releaseNote.html.\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,103,"""and NOTES_LIST just before you run this tool.\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,563,"Class			iface = exclusions.getInterface();"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,389,"int		actualErrorCount ="
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,390,vanishedMethodList.size() +
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,391,unsupportedList.size() +
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,392,notUnderstoodList.size();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,394,assertEquals
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,395,"( ""Unexpected discrepancies."","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,396,"0, actualErrorCount );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,372,"Class derbyImplementation, Method ifaceMethod)"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,286,pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,369,if (sz == -1)
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,381,pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,448,return control.getInputStream(0);
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,456,pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,461,"return new UpdatableBlobStream (this,"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,462,"new AutoPositioningStream (this, myStream, this));"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,511,pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,523,if (c == -1)  // run out of stream
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,530,else
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,606,pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,621,if (b == null || b.length < 1)  // the 'empty' blob
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,629,if (c == -1)  // run out of stream
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,636,else
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,143,} catch (Throwable t) {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,144,throw handleException(t);
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1289,} catch (Throwable t) {
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1403,void clearResultSets() throws SQLException {
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,136,Hashtable classSizes = new Hashtable();
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,228,private Class[] interfaceList; // Search for classes that implement these interfaces
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,230,private Hashtable classSizes;
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,235,Hashtable classSizes)
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,273,Class targetClass = null;
java/build/org/apache/derbyBuild/MessageBuilder.java,141,private         ArrayList    _tagStack;
java/build/org/apache/derbyBuild/MessageBuilder.java,166,_tagStack = new ArrayList();
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,117,private HashMap changeMap;
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,185,changeMap = new HashMap();
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,369,ArrayList colDefs = new ArrayList();
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,748,ArrayList colDefList)
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1002,ArrayList selectColDefs)
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1229,Byte changeByte = (Byte)changeMap.get(queryName);
java/build/org/apache/derbyBuild/classlister.java,70,protected Hashtable foundClasses;
java/build/org/apache/derbyBuild/classlister.java,87,protected Hashtable masterClassList = new Hashtable();
java/build/org/apache/derbyBuild/classlister.java,90,protected Hashtable classpathHash;
java/build/org/apache/derbyBuild/classlister.java,157,"foundClasses = new Hashtable(3000, 0.8f);"
java/build/org/apache/derbyBuild/classlister.java,262,classpathHash = new Hashtable();
java/build/org/apache/derbyBuild/classlister.java,533,Hashtable localHashtable = null;
java/build/org/apache/derbyBuild/classlister.java,536,localHashtable = (Hashtable) masterClassList.get(className);
java/build/org/apache/derbyBuild/classlister.java,539,localHashtable = new Hashtable();
java/build/org/apache/derbyBuild/classlister.java,670,Hashtable scoreboard = new Hashtable();
java/build/org/apache/derbyBuild/classlister.java,671,Hashtable grandkids = (Hashtable) masterClassList.get(kid);
java/build/org/apache/derbyBuild/classlister.java,700,"protected void unrollHashtable( String parent, Hashtable current, Hashtable scoreboard, int indentLevel)"
java/build/org/apache/derbyBuild/classlister.java,703,Enumeration e = current.keys();
java/build/org/apache/derbyBuild/classlister.java,708,key = (String) e.nextElement();
java/build/org/apache/derbyBuild/classlister.java,715,Integer value = (Integer) scoreboard.get(key);
java/build/org/apache/derbyBuild/classlister.java,731,Hashtable currentsChildren = (Hashtable) masterClassList.get(key);
java/build/org/apache/derbyBuild/javadoc/DiskLayoutTaglet.java,99,public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/DiskLayoutTaglet.java,29,"private String NAME = ""disk_layout"";"
java/build/org/apache/derbyBuild/javadoc/EndFormatTaglet.java,101,public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/EndFormatTaglet.java,30,"private String NAME = ""end_format"";"
java/build/org/apache/derbyBuild/javadoc/FormatIdTaglet.java,101,public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/FormatIdTaglet.java,29,"private String NAME = ""format_id"";"
java/build/org/apache/derbyBuild/javadoc/PurposeTaglet.java,102,public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/PurposeTaglet.java,31,"private String NAME = ""purpose"";"
java/build/org/apache/derbyBuild/javadoc/UpgradeTaglet.java,100,public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/UpgradeTaglet.java,29,"private String NAME = ""upgrade"";"
java/build/org/apache/derbyBuild/splitmessages.java,46,private static TreeSet clientMessageIds = new TreeSet();
java/testing/org/apache/derbyTesting/junit/Decorator.java,23,import java.sql.SQLException;
java/testing/org/apache/derbyTesting/junit/Decorator.java,64,test = new BaseTestSetup(test) {
java/testing/org/apache/derbyTesting/junit/Decorator.java,70,protected void setUp() throws SQLException
java/testing/org/apache/derbyTesting/junit/Decorator.java,72,String bootPhrase = getBootPhrase(16);
java/testing/org/apache/derbyTesting/junit/Decorator.java,74,DataSource ds = JDBCDataSource.getDataSource();
java/testing/org/apache/derbyTesting/junit/Decorator.java,76,"JDBCDataSource.setBeanProperty(ds,"
java/testing/org/apache/derbyTesting/junit/Decorator.java,77,"""createDatabase"", ""create"");"
java/testing/org/apache/derbyTesting/junit/Decorator.java,78,"JDBCDataSource.setBeanProperty(ds,"
java/testing/org/apache/derbyTesting/junit/Decorator.java,79,"""connectionAttributes"","
java/testing/org/apache/derbyTesting/junit/Decorator.java,80,"""dataEncryption=true;bootPassword="" + bootPhrase);"
java/testing/org/apache/derbyTesting/junit/Decorator.java,82,ds.getConnection().close();
java/testing/org/apache/derbyTesting/junit/Decorator.java,86,return TestConfiguration.singleUseDatabaseDecorator(test);
java/testing/org/apache/derbyTesting/junit/Decorator.java,111,String bootPhrase = getBootPhrase(64);
java/testing/org/apache/derbyTesting/junit/Decorator.java,113,String attributes =
java/testing/org/apache/derbyTesting/junit/Decorator.java,114,"""dataEncryption=true;bootPassword="" + bootPhrase +"
java/testing/org/apache/derbyTesting/junit/Decorator.java,115,""";encryptionAlgorithm="" + algorithm;"
java/testing/org/apache/derbyTesting/junit/Decorator.java,164,"private static Test attributesDatabase(final String attributes, Test test)"
java/testing/org/apache/derbyTesting/junit/Decorator.java,166,test = new BaseTestSetup(test) {
java/testing/org/apache/derbyTesting/junit/Decorator.java,172,protected void setUp() throws SQLException
java/testing/org/apache/derbyTesting/junit/Decorator.java,174,DataSource ds = JDBCDataSource.getDataSource();
java/testing/org/apache/derbyTesting/junit/Decorator.java,176,"JDBCDataSource.setBeanProperty(ds,"
java/testing/org/apache/derbyTesting/junit/Decorator.java,177,"""createDatabase"", ""create"");"
java/testing/org/apache/derbyTesting/junit/Decorator.java,178,"JDBCDataSource.setBeanProperty(ds,"
java/testing/org/apache/derbyTesting/junit/Decorator.java,179,"""connectionAttributes"", attributes);"
java/testing/org/apache/derbyTesting/junit/Decorator.java,181,ds.getConnection().close();
java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java,76,"return DriverManager.getConnection(url, user, password);"
java/testing/org/apache/derbyTesting/junit/Utilities.java,34,public Utilities() {
java/testing/org/apache/derbyTesting/junit/Utilities.java,45,public static String stringToHexLiteral(String s)
java/testing/org/apache/derbyTesting/junit/Utilities.java,47,byte[] bytes;
java/testing/org/apache/derbyTesting/junit/Utilities.java,48,String hexLiteral = null;
java/testing/org/apache/derbyTesting/junit/Utilities.java,49,try {
java/testing/org/apache/derbyTesting/junit/Utilities.java,50,"bytes = s.getBytes(""UTF-16BE"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,51,hexLiteral = convertToHexString(bytes);
java/testing/org/apache/derbyTesting/junit/Utilities.java,53,catch (UnsupportedEncodingException ue)
java/testing/org/apache/derbyTesting/junit/Utilities.java,55,"System.out.println(""This shouldn't happen as UTF-16BE should be supported"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,56,ue.printStackTrace();
java/testing/org/apache/derbyTesting/junit/Utilities.java,59,return hexLiteral;
java/testing/org/apache/derbyTesting/junit/Utilities.java,67,private static String convertToHexString(byte [] buf)
java/testing/org/apache/derbyTesting/junit/Utilities.java,69,StringBuffer str = new StringBuffer();
java/testing/org/apache/derbyTesting/junit/Utilities.java,70,"str.append(""X'"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,71,String val;
java/testing/org/apache/derbyTesting/junit/Utilities.java,72,int byteVal;
java/testing/org/apache/derbyTesting/junit/Utilities.java,73,for (int i = 0; i < buf.length; i++)
java/testing/org/apache/derbyTesting/junit/Utilities.java,75,byteVal = buf[i] & 0xff;
java/testing/org/apache/derbyTesting/junit/Utilities.java,76,val = Integer.toHexString(byteVal);
java/testing/org/apache/derbyTesting/junit/Utilities.java,77,if (val.length() < 2)
java/testing/org/apache/derbyTesting/junit/Utilities.java,78,"str.append(""0"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,79,str.append(val);
java/testing/org/apache/derbyTesting/junit/Utilities.java,81,"return str.toString() +""'"";"
java/testing/org/apache/derbyTesting/junit/Utilities.java,92,"public static String repeatChar(String c, int repeatCount)"
java/testing/org/apache/derbyTesting/junit/Utilities.java,94,char ch = c.charAt(0);
java/testing/org/apache/derbyTesting/junit/Utilities.java,96,char[] chArray = new char[repeatCount];
java/testing/org/apache/derbyTesting/junit/Utilities.java,97,for (int i = 0; i < repeatCount; i++)
java/testing/org/apache/derbyTesting/junit/Utilities.java,99,chArray[i] = ch;
java/testing/org/apache/derbyTesting/junit/Utilities.java,102,return new String(chArray);
java/testing/org/apache/derbyTesting/junit/Utilities.java,114,public static void showResultSet(ResultSet rs) throws SQLException {
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,299,int errorSeverity = error instanceof StandardException ?
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,300,((StandardException) error).getSeverity() :
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,301,ExceptionSeverity.NO_APPLICABLE_SEVERITY;
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,237,public boolean cleanupOnError(Throwable error)
java/engine/org/apache/derby/impl/jdbc/LOBInputStream.java,31,import org.apache.derby.shared.common.error.ExceptionUtil;
java/engine/org/apache/derby/impl/jdbc/LOBOutputStream.java,32,import org.apache.derby.shared.common.error.ExceptionUtil;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,57,return new CleanDatabaseTestSetup(suite) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,58,protected void decorateSQL(Statement s) throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,64,"s.executeUpdate(""create table flusher (c1 varchar(3000))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,65,PreparedStatement ps = getConnection().prepareStatement(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,66,"""insert into flusher values ?"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,67,"ps.setString(1, Formatters.padString(""a"", 3000));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,68,for (int i = 0; i < 64; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,69,ps.executeUpdate();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,71,ps.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,104,JDBC.assertFullResultSet(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,105,"stmt.executeQuery(""select count(c1) from flusher""),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,106,"new String[][] { { ""64"" } });"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,238,for (int i = 1025; i <= 1034; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,257,"JDBC.assertFullResultSet(ps.executeQuery(),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,258,"new String[][] { { ""1034"" } });"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,275,"JDBC.assertFullResultSet(ps.executeQuery(),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,276,"new String[][] { { ""2068"" } });"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,53,"props.setProperty(""derby.language.stalePlanCheckInterval"", ""10"");"
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,43,import org.apache.derby.impl.sql.execute.DropTriggerConstantAction;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,313,if (actionSPS == null)
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,321,actionSPS = getDataDictionary().getSPSDescriptor(actionSPSId);
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,324,return actionSPS;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,344,public SPSDescriptor getWhenClauseSPS()
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,372,StringBuffer newText = new StringBuffer();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,373,boolean regenNode = false;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,375,if (isRow)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,468,continue;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,496,if (regenNode)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,498,if (start < originalActionText.length())
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,500,newText.append(originalActionText.substring(start));
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,502,actionText = newText.toString();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,515,QueryTreeNode[] sorted = new QueryTreeNode[size];
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,798,newReferencingName
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,43,extends BaseJDBCTestCase {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,42,public class ResultSetTest
java/client/org/apache/derby/client/am/CallableStatement.java,1247,private SQLException jdbcMethodNotImplemented() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,38,public class CallableStatementTest
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,39,extends BaseJDBCTestCase {
java/engine/org/apache/derby/impl/services/locks/ActiveLock.java,122,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/services/locks/ConcurrentLockSet.java,591,if (deadlockTrace)
java/engine/org/apache/derby/impl/services/locks/LockSet.java,402,if (deadlockTrace)
java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java,1075,StatementContext localStatementContext = getLanguageConnectionContext().getStatementContext();
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,337,boolean isShutdown = cleanupOnError(thrownException);
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,350,if (cm!=null) { // something to let us cleanup?
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,351,cm.cleanupOnError(t);
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,414,boolean cleanupOnError(Throwable e)
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,419,return cm.cleanupOnError(e);
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,359,cm.cleanupOnError(e);
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,402,contextMgr.cleanupOnError(StandardException.normalClose());
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,102,"EmbedPooledConnection(ReferenceableDataSource ds, String u, String p, boolean requestPassword) throws SQLException"
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,180,final Connection getNewCurrentConnectionHandle() {
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,87,final ReferenceableDataSource dataSource;
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,103,inDoubtCM.cleanupOnError(StandardException.closeException());
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,109,inDoubtCM.cleanupOnError(se);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,400,inDoubtCM.cleanupOnError(StandardException.closeException());
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,406,inDoubtCM.cleanupOnError(se);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,450,inDoubtCM.cleanupOnError(StandardException.closeException());
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,456,inDoubtCM.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_FileSystemData.java,186,cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_FileSystemData.java,212,cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_StreamFile.java,219,cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_StreamFile.java,244,cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,210,cm1.cleanupOnError(e);
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,222,cm1.cleanupOnError(t);
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,858,cm.cleanupOnError(e);
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,3268,cm.cleanupOnError(e);
java/client/org/apache/derby/client/am/Connection.java,31,"public abstract class Connection implements java.sql.Connection,"
java/client/org/apache/derby/client/am/Connection.java,32,ConnectionCallbackInterface {
java/client/org/apache/derby/client/am/Connection.java,676,checkForClosedConnection();
java/client/org/apache/derby/client/am/Connection.java,756,if (!open_) {
java/client/org/apache/derby/client/am/Connection.java,24,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/am/Connection.java,25,import org.apache.derby.jdbc.ClientDataSource;
java/client/org/apache/derby/client/am/Connection.java,139,public org.apache.derby.jdbc.ClientBaseDataSource dataSource_;
java/client/org/apache/derby/client/am/Connection.java,142,public int clientSSLMode_ = ClientBaseDataSource.SSL_OFF;
java/client/org/apache/derby/client/am/Connection.java,154,"protected Connection(org.apache.derby.client.am.LogWriter logWriter,"
java/client/org/apache/derby/client/am/Connection.java,155,"String user,"
java/client/org/apache/derby/client/am/Connection.java,156,"String password,"
java/client/org/apache/derby/client/am/Connection.java,157,org.apache.derby.jdbc.ClientBaseDataSource dataSource)
java/client/org/apache/derby/client/am/Connection.java,158,throws SqlException {
java/client/org/apache/derby/client/am/Connection.java,162,"protected Connection(org.apache.derby.client.am.LogWriter logWriter,"
java/client/org/apache/derby/client/am/Connection.java,163,"String user,"
java/client/org/apache/derby/client/am/Connection.java,164,"String password,"
java/client/org/apache/derby/client/am/Connection.java,165,"boolean isXAConn,"
java/client/org/apache/derby/client/am/Connection.java,166,org.apache.derby.jdbc.ClientBaseDataSource dataSource)
java/client/org/apache/derby/client/am/Connection.java,167,throws SqlException {
java/client/org/apache/derby/client/am/Connection.java,216,ClientBaseDataSource.getSSLModeFromString(dataSource.getSsl());
java/client/org/apache/derby/client/am/Connection.java,226,"protected Connection(org.apache.derby.client.am.LogWriter logWriter,"
java/client/org/apache/derby/client/am/Connection.java,227,"boolean isXAConn,"
java/client/org/apache/derby/client/am/Connection.java,228,org.apache.derby.jdbc.ClientBaseDataSource dataSource)
java/client/org/apache/derby/client/am/Connection.java,229,throws SqlException {
java/client/org/apache/derby/client/am/Connection.java,235,user_ = ClientDataSource.propertyDefault_user;
java/client/org/apache/derby/client/am/Connection.java,248,ClientBaseDataSource.getSSLModeFromString(dataSource.getSsl());
java/client/org/apache/derby/client/am/Connection.java,341,user_ = ClientDataSource.getUser(properties);
java/client/org/apache/derby/client/am/Connection.java,342,retrieveMessageText_ = ClientDataSource.getRetrieveMessageText(properties);
java/client/org/apache/derby/client/am/Connection.java,347,clientSSLMode_ = ClientDataSource.getClientSSLMode(properties);
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,514,public final String getText()
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,380,if (!((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) dd).readOnlyUpgrade) {
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,684,if (!((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) (lcc.getDataDictionary())).readOnlyUpgrade) {
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1090,if (((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) dd).readOnlyUpgrade)
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,56,private boolean isClosed;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,379,throw Util.noCurrentConnection();
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1246,final String getPassword(String user)
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1004,Connection openDefaultConnection()
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,289,"TestSuite suite = new TestSuite(testClass,"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,290,"suiteName(testClass)+"":client"");"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,291,return clientServerDecorator(suite);
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,320,if (!(Derby.hasClient() && Derby.hasServer())
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,321,|| JDBC.vmSupportsJSR169())
java/engine/org/apache/derby/impl/sql/GenericStatement.java,197,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/sql/GenericStatement.java,280,"StatementNode qt = p.parseStatement(statementText, paramDefaults);"
java/engine/org/apache/derby/impl/sql/GenericStatement.java,190,if (!preparedStmt.compilingStatement) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,201,preparedStmt.compilingStatement = true;
java/engine/org/apache/derby/impl/sql/GenericStatement.java,202,preparedStmt.setActivationClass(null);
java/engine/org/apache/derby/impl/sql/GenericStatement.java,521,synchronized (preparedStmt) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,522,preparedStmt.compilingStatement = false;
java/engine/org/apache/derby/impl/sql/GenericStatement.java,523,preparedStmt.notifyAll();
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1578,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1383,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1837,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3671,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3729,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,4662,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1044,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1116,inBackup = false;
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1117,backupSemaphore.notifyAll();
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1118,throw StandardException.interrupt(ie);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetQueryTimeoutTest.java,279,private static class StatementExecutor
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,69,DriverManager.registerDriver( new AutoloadedDriver() );
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,181,if ( _engineForcedDown )
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,184,throw new SQLException
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,185,(MessageService.getTextMessage(MessageId.CORE_JDBC_DRIVER_UNREGISTERED));
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,506,"AutoloadedDriver	autoloadedDriver ="
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,507,(AutoloadedDriver) DriverManager.getDriver(url);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,508,driver = (InternalDriver) autoloadedDriver.getDriverModule();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,193,public class EmbeddedDataSource extends ReferenceableDataSource implements
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,194,javax.sql.DataSource
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,519,StringBuffer sb = new StringBuffer(64);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,521,sb.append(Attribute.PROTOCOL);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,525,String dbName = getDatabaseName();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,527,if (dbName != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,528,dbName = dbName.trim();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,531,if (dbName == null || dbName.length() == 0) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,539,"dbName = "" "";"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,542,sb.append(dbName);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,545,String connAttrs = getConnectionAttributes();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,546,if (connAttrs != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,547,connAttrs = connAttrs.trim();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,548,if (connAttrs.length() != 0) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,549,sb.append(';');
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,550,sb.append(connectionAttributes);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,554,jdbcurl = sb.toString();
java/client/org/apache/derby/jdbc/ClientDriver.java,50,static {
java/client/org/apache/derby/jdbc/ClientDriver.java,60,registeredDriver__ = new ClientDriver();
java/client/org/apache/derby/jdbc/ClientDriver.java,108,port = ClientDataSource.propertyDefault_portNumber;
java/client/org/apache/derby/jdbc/ClientDriver.java,119,traceLevel = ClientDataSource.getTraceLevel(augmentedProperties);
java/client/org/apache/derby/jdbc/ClientDriver.java,131,"ClientDataSource.computeDncLogWriterForNewConnection(java.sql.DriverManager.getLogWriter(),"
java/client/org/apache/derby/jdbc/ClientDriver.java,132,"ClientDataSource.getTraceDirectory(augmentedProperties),"
java/client/org/apache/derby/jdbc/ClientDriver.java,133,"ClientDataSource.getTraceFile(augmentedProperties),"
java/client/org/apache/derby/jdbc/ClientDriver.java,134,"ClientDataSource.getTraceFileAppend(augmentedProperties),"
java/client/org/apache/derby/jdbc/ClientDriver.java,135,"traceLevel,"
java/client/org/apache/derby/jdbc/ClientDriver.java,136,"""_driver"","
java/client/org/apache/derby/jdbc/ClientDriver.java,137,traceFileSuffixIndex_++);
java/client/org/apache/derby/jdbc/ClientDriver.java,209,"new java.sql.DriverPropertyInfo(Attribute.USERNAME_ATTR,"
java/client/org/apache/derby/jdbc/ClientDriver.java,210,"properties.getProperty(Attribute.USERNAME_ATTR, ClientDataSource.propertyDefault_user));"
java/client/org/apache/derby/jdbc/ClientDriver.java,356,"return ClientDataSource.tokenizeAttributes(attributeString, properties);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,99,"assertFalse(""No exception was thrown"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,100,decorator_.expectsException(method_));
java/engine/org/apache/derby/impl/services/monitor/TopService.java,193,return false;
java/engine/org/apache/derby/impl/jdbc/Util.java,274,"return newEmbedSQLException(SQLState.SET_STREAM_FAILURE,"
java/engine/org/apache/derby/impl/jdbc/Util.java,275,"new Object[] {msg},"
java/engine/org/apache/derby/impl/jdbc/Util.java,276,StandardException.getSeverityFromIdentifier(SQLState.SET_STREAM_FAILURE));
java/engine/org/apache/derby/jdbc/EmbeddedSimpleDataSource.java,434,throw new SQLException(MessageService.getTextMessage(MessageId.CORE_JDBC_DRIVER_UNREGISTERED));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,607,public void testIsPoolable() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1335,"ResultSet rs = dm.getTablePrivileges(null, schema.toUpperCase(), table.toUpperCase());"
java/engine/org/apache/derby/impl/sql/execute/rts/ResultSetStatistics.java,22,package org.apache.derby.impl.sql.execute.rts;
java/engine/org/apache/derby/impl/sql/execute/RealResultSetStatisticsFactory.java,107,import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
java/testing/org/apache/derbyTesting/unitTests/lang/EmptyResultSetStatisticsFactory.java,39,import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,59,"public StatementNode	parseStatement(String statementSQLText,"
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,64,public StatementNode parseStatement(String statementSQLText)
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,239,StatementNode qt = p.parseStatement(values);
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,76,public StatementNode parseStatement(String statementSQLText)
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,129,"public StatementNode parseStatement(String statementSQLText, Object[] paramDefaults)"
java/engine/org/apache/derby/iapi/sql/dictionary/ColPermsDescriptor.java,169,"return	new DDdependableFinder(StoredFormatIds.COLUMNS_PERMISSION_FINDER_V01_ID);"
java/engine/org/apache/derby/iapi/sql/dictionary/RoutinePermsDescriptor.java,166,"return	new DDdependableFinder(StoredFormatIds.ROUTINE_PERMISSION_FINDER_V01_ID);"
java/engine/org/apache/derby/iapi/sql/dictionary/TablePermsDescriptor.java,186,"return	new DDdependableFinder(StoredFormatIds.TABLE_PERMISSION_FINDER_V01_ID);"
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,101,public DependableFinder getDependableFinder(int formatId)
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,103,"return	new DDdependableFinder(formatId);"
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,109,"return new DDColumnDependableFinder(formatId, columnBitMap);"
java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java,83,addParms((Vector) params);
java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java,130,addParms((Vector) params);
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,73,"public abstract QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,87,"public final QueryTreeNode getNode(int nodeType, Object arg1, ContextManager cm)"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,90,"QueryTreeNode retval = getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,109,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,115,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,135,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,142,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,163,"public QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,171,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,194,"public QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,203,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,226,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,236,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,260,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,271,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,295,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,307,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,332,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,345,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,371,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,385,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,413,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,428,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,457,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,473,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,503,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,520,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,551,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,569,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java,210,QueryTreeNode trueNode = nodeFactory.getNode(
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,716,getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,944,QueryTreeNode maxWidthNode = getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,141,"public QueryTreeNode getNode(int nodeType, ContextManager cm)"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,540,QueryTreeNode trueNode = nodeFactory.getNode(
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,465,bootingDictionary.readOnlyUpgrade = true;
java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java,313,if (((DataDictionaryImpl) dd).readOnlyUpgrade) {
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,569,protected boolean isClosed() throws SQLException {
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,575,throw Util.notImplemented();
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,589,"throw Util.generateCsSQLException(SQLState.ALREADY_CLOSED,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,590,"""Statement"");"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,35,public class BrokeredCallableStatement40 extends  BrokeredCallableStatement30{
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,311,"throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,312,interfaces);
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,36,public class EmbedCallableStatement40 extends EmbedCallableStatement30 {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,125,"assertEquals(2, rsmd.getColumnCount());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,133,"s.executeUpdate(""alter table bug4579 add column c13 int"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,134,ResultSet rs = ps.executeQuery();
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,111,"throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,112,interfaces);
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,71,"throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,72,interfaces);
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,37,public class SQLExceptionFactory {
java/engine/org/apache/derby/jdbc/Driver20.java,137,public abstract BrokeredConnection newBrokeredConnection(BrokeredConnectionControl control);
java/engine/org/apache/derby/jdbc/Driver30.java,128,public BrokeredConnection newBrokeredConnection(BrokeredConnectionControl control) {
java/engine/org/apache/derby/jdbc/Driver30.java,138,"EmbeddedDataSource eds, String user, String password,"
java/engine/org/apache/derby/jdbc/Driver30.java,150,"EmbeddedDataSource eds, ResourceAdapter ra,"
java/engine/org/apache/derby/jdbc/Driver40.java,130,public BrokeredConnection newBrokeredConnection(BrokeredConnectionControl control) {
java/engine/org/apache/derby/jdbc/Driver40.java,173,"EmbeddedDataSource eds, String user, String password,"
java/engine/org/apache/derby/jdbc/Driver40.java,185,"EmbeddedDataSource eds, ResourceAdapter ra,"
java/engine/org/apache/derby/jdbc/XAStatementControl.java,29,import org.apache.derby.iapi.jdbc.EngineStatement;
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,149,try
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,151,Thread.sleep(20);
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,153,catch (Exception ex)
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,275,"del_stmt.setInt(1, iter - work_size - 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,334,for (int iter = work_size + total_work; iter < (total_work * 2); iter++)
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,343,"del_stmt.setInt(1, iter - work_size - 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,369,"""Test failed, expected constant memory after second run."" +"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,398,"test2(conn, 250000, 5, 500);"
java/engine/org/apache/derby/impl/sql/compile/CastNode.java,973,mb.push(!sourceCTI.variableLength() || isNumber);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,159,"""create function EMC.GETARTICLE(path VARCHAR(40)) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,76,public static Test suite()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,118,suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,119,"new DatabaseClassLoadingTest(""testDatabaseInClasspath"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,638,"public void testDatabaseInClasspath() throws SQLException, MalformedURLException"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,643,try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,644,ds.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,645,"fail(""opened database before it was on classpath"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,646,} catch (SQLException e)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,648,"assertSQLState(""XJ004"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,651,"URL jarURL = SupportFilesSetup.getReadOnlyURL(""dclt.jar"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,658,try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,663,} finally {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportProcedureTest.java,2049,"+ ""'extinout/t1.dat' , '\\a', '\\', null) "");"
java/client/org/apache/derby/client/am/SqlException.java,267,errorcode_ = sqlca.getSqlCode();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,54,suite.addTest(TestConfiguration.embeddedSuite(ErrorCodeTest.class));
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,762,"assertEquals(errorCode,se.getErrorCode());"
java/engine/org/apache/derby/diag/SpaceTable.java,152,conglomTable[i] = new ConglomInfo(
java/engine/org/apache/derby/diag/SpaceTable.java,153,"cds[i].getConglomerateNumber(),"
java/engine/org/apache/derby/diag/SpaceTable.java,155,cds[i].isIndex());
java/engine/org/apache/derby/diag/SpaceTable.java,231,String str = conglomInfo.getConglomName();
java/engine/org/apache/derby/diag/SpaceTable.java,351,"public ConglomInfo(long conglomId, String conglomName, boolean isIndex)"
java/engine/org/apache/derby/diag/SpaceTable.java,138,schemaName = lcc.getCurrentSchemaName();
java/engine/org/apache/derby/diag/SpaceTable.java,145,conglomTable = new ConglomInfo[0];   // make empty conglom table
java/engine/org/apache/derby/diag/SpaceTable.java,146,return;
java/engine/org/apache/derby/diag/SpaceTable.java,154,"cds[i].isIndex() ? cds[i].getConglomerateName() : tableName,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,142,String [] expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,144,"""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,149,"{""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,165,"{""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,185,"{""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,204,"{""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,275,"{""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,333,expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,334,"""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,335,"""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,336,"JDBC.assertColumnNames(rs, expColNames);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,340,"{""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,349,expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,350,"""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,351,"""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,352,"JDBC.assertColumnNames(rs, expColNames);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,356,"{""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,48,"String filePath = ""wisc_setup.sql"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,50,try
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,52,"inStream = new BufferedInputStream(new FileInputStream(filePath),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,53,utilMain.BUFFEREDFILESIZE);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,54,} catch (FileNotFoundException e)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,56,"System.out.println(""unable to find input file ""+filePath);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,57,throw e;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,169,assertTrue(getConnection().isValid(1));
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,40,"public static Xid getXid(int xid, int b1, int b2) {"
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,41,"return new utilXid(xid, b1, b2);"
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,138,"utilXid(int xid, int b1, int b2) {"
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,139,format_id = xid;
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,140,global_id = new byte[Xid.MAXGTRIDSIZE];
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,141,branch_id = new byte[Xid.MAXBQUALSIZE];
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,143,for (int i = 0; i < global_id.length; i++) {
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,144,global_id[i] = (byte) (b1 + i);
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,147,for (int i = 0; i < branch_id.length; i++) {
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,148,branch_id[i] = (byte) (b2 + i);
java/engine/org/apache/derby/iapi/types/CollatorSQLClob.java,118,"CollatorSQLClob result = new CollatorSQLClob(null,"
java/engine/org/apache/derby/jdbc/EmbedPooledConnection40.java,50,"EmbedPooledConnection40 (ReferenceableDataSource ds, String user,"
java/engine/org/apache/derby/jdbc/EmbedXAConnection.java,50,"EmbedXAConnection(EmbeddedDataSource ds, ResourceAdapter ra, String u, String p, boolean requestPassword) throws SQLException"
java/engine/org/apache/derby/jdbc/EmbedXAConnection40.java,50,"EmbedXAConnection40 (EmbeddedDataSource ds, ResourceAdapter ra,"
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,51,"implements	javax.sql.ConnectionPoolDataSource"
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,99,"protected PooledConnection createPooledConnection (String user,"
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,54,extends EmbeddedConnectionPoolDataSource
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,55,implements ConnectionPoolDataSource {
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,69,public class EmbeddedXADataSource extends EmbeddedDataSource implements
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,70,javax.sql.XADataSource
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,101,"setupResourceAdapter(null, null, false);"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,119,"setupResourceAdapter(user, password, true);"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,120,"return createXAConnection (ra, user, password, true);"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,127,void update() {
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,200,"protected XAConnection createXAConnection (ResourceAdapter ra,"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,59,public class EmbeddedXADataSource40 extends EmbeddedXADataSource {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,27,import java.io.Serializable;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,28,import java.io.PrintWriter;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,29,import java.util.Properties;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,32,import javax.naming.NamingException;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,33,import javax.naming.Referenceable;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,248,public void setLogWriter(PrintWriter out) throws SQLException
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,250,printer = out;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,262,Re-Create Derby datasource given a reference.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,265,information that can be used in creating an object.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,267,name is specified.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,269,"specified, or null if name is relative to the default initial context."
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,271,creating the object.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,274,object cannot be created.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,277,"while attempting to create an object, and no other object factories are"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,278,to be tried.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,280,"public Object getObjectInstance(Object obj,"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,281,"Name name,"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,282,"Context nameCtx,"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,283,Hashtable environment)
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,284,throws Exception
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,286,Reference ref = (Reference)obj;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,287,String classname = ref.getClassName();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,289,Object ds = Class.forName(classname).newInstance();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,291,for (Enumeration e = ref.getAll(); e.hasMoreElements(); ) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,293,RefAddr attribute = (RefAddr) e.nextElement();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,295,String propertyName = attribute.getType();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,297,String value = (String) attribute.getContent();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,299,"String methodName = ""set"" + propertyName.substring(0,1).toUpperCase(java.util.Locale.ENGLISH) + propertyName.substring(1);"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,301,Method m;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,303,Object argValue;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,304,try {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,305,"m = ds.getClass().getMethod(methodName, STRING_ARG);"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,306,argValue = value;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,307,} catch (NoSuchMethodException nsme) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,308,try {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,309,"m = ds.getClass().getMethod(methodName, INT_ARG);"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,310,argValue = Integer.valueOf(value);
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,311,} catch (NoSuchMethodException nsme2) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,312,"m = ds.getClass().getMethod(methodName, BOOLEAN_ARG);"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,313,argValue = Boolean.valueOf(value);
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,316,"m.invoke(ds, new Object[] { argValue });"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,319,return ds;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,323,Referenceable method.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,327,public final Reference getReference() throws NamingException
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,331,"Reference ref = new Reference(this.getClass().getName(),"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,332,"""org.apache.derby.jdbc.ReferenceableDataSource"","
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,333,null);
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,337,Method[] methods = this.getClass().getMethods();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,339,for (int i = 0; i < methods.length; i++) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,341,Method m = methods[i];
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,344,if (m.getParameterTypes().length != 0)
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,345,continue;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,348,if (Modifier.isStatic(m.getModifiers()))
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,349,continue;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,352,String methodName = m.getName();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,353,"if ((methodName.length() < 5) || !methodName.startsWith(""get""))"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,354,continue;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,358,Class returnType = m.getReturnType();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,360,if (Integer.TYPE.equals(returnType) || STRING_ARG[0].equals(returnType) || Boolean.TYPE.equals(returnType)) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,365,"String propertyName = methodName.substring(3,4).toLowerCase(java.util.Locale.ENGLISH).concat(methodName.substring(4));"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,367,try {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,368,"Object ov = m.invoke(this, null);"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,372,if (ov != null) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,373,"ref.add(new StringRefAddr(propertyName, ov.toString()));"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,375,} catch (IllegalAccessException iae) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,376,} catch (InvocationTargetException ite) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,383,return ref;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,387,void update() {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,391,Return a connection for the Derby family of data source implementations.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,393,"java.sql.Connection getConnection(String username, String password, boolean requestPassword) throws SQLException {"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,394,return null;
java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java,201,Assert.fail(e.toString());
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,181,public class EmbeddedDataSource40 extends EmbeddedDataSource {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1551,if (usingEmbedded()) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1543,op.clearParameters();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1554,"op.setString(2, ""2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1544,try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1546,op.execute();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1558,"fail(""FAIL - a  not set"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1548,} catch (SQLException sqle) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1549,"assertSQLState(""07000"", sqle);"
java/client/org/apache/derby/client/ClientPooledConnection.java,26,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/ClientPooledConnection.java,56,"public ClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientPooledConnection.java,96,"public ClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientPooledConnection.java,326,"protected NetXAConnection getNetXAConnection (ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientPooledConnection40.java,33,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/ClientPooledConnection40.java,51,"public ClientPooledConnection40(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientPooledConnection40.java,60,"public ClientPooledConnection40(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientXAConnection.java,31,import org.apache.derby.jdbc.ClientXADataSource;
java/client/org/apache/derby/client/ClientXAConnection.java,44,"public ClientXAConnection(ClientXADataSource ds,"
java/client/org/apache/derby/client/ClientXAConnection.java,102,return derbyds_;
java/client/org/apache/derby/client/ClientXAConnection.java,105,"public NetXAConnection createControlConnection(NetLogWriter logWriter,"
java/client/org/apache/derby/client/ClientXAConnection.java,106,"String user,"
java/client/org/apache/derby/client/ClientXAConnection.java,107,"String password,"
java/client/org/apache/derby/client/ClientXAConnection.java,108,"org.apache.derby.jdbc.ClientDataSource dataSource,"
java/client/org/apache/derby/client/ClientXAConnection.java,109,"int rmId,"
java/client/org/apache/derby/client/ClientXAConnection.java,110,boolean isXAConn) throws SQLException {
java/client/org/apache/derby/client/ClientXAConnection.java,111,try
java/client/org/apache/derby/client/ClientXAConnection40.java,34,import org.apache.derby.jdbc.ClientXADataSource;
java/client/org/apache/derby/client/ClientXAConnection40.java,53,"public ClientXAConnection40 (ClientXADataSource ds,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,28,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,45,"ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,46,"LogWriter logWriter,String user,String password)"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,47,throws SQLException;
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,54,"ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,55,"LogWriter logWriter,String user,String password,int rmId)"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,56,throws SQLException;
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,63,"ClientXAConnection newClientXAConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,180,"org.apache.derby.jdbc.ClientBaseDataSource clientDataSource,String user,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,201,"String user,String password,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,202,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,int rmId,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,212,"LogWriter netLogWriter,String ipaddr,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,213,"int portNumber,org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,240,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,int rmId,"
java/client/org/apache/derby/client/am/Configuration.java,39,public static int traceLevel__ = org.apache.derby.jdbc.ClientBaseDataSource.TRACE_ALL;
java/client/org/apache/derby/client/am/LogWriter.java,29,import javax.naming.NamingException;
java/client/org/apache/derby/client/am/LogWriter.java,30,import javax.naming.RefAddr;
java/client/org/apache/derby/client/am/LogWriter.java,31,import javax.naming.Reference;
java/client/org/apache/derby/client/am/LogWriter.java,33,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/am/LogWriter.java,35,import org.apache.derby.jdbc.ClientDataSource;
java/client/org/apache/derby/client/am/LogWriter.java,215,} else if (instance instanceof Connection && loggingEnabled(ClientDataSource.TRACE_CONNECTION_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,217,} else if (instance instanceof ResultSet && loggingEnabled(ClientDataSource.TRACE_RESULT_SET_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,219,} else if (instance instanceof CallableStatement && loggingEnabled(ClientDataSource.TRACE_STATEMENT_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,221,} else if (instance instanceof PreparedStatement && loggingEnabled(ClientDataSource.TRACE_STATEMENT_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,223,} else if (instance instanceof Statement && loggingEnabled(ClientDataSource.TRACE_STATEMENT_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,227,else if (instance instanceof Blob && loggingEnabled(ClientDataSource.TRACE_ALL)) // add a trace level for lobs !!
java/client/org/apache/derby/client/am/LogWriter.java,232,else if (instance instanceof Clob && loggingEnabled(ClientDataSource.TRACE_ALL)) // add a trace level for bobs !!
java/client/org/apache/derby/client/am/LogWriter.java,237,else if (instance instanceof DatabaseMetaData && loggingEnabled(ClientDataSource.TRACE_ALL)) // add a trace level for dbmd ??
java/client/org/apache/derby/client/am/LogWriter.java,242,else if (loggingEnabled(ClientDataSource.TRACE_XA_CALLS) &&
java/client/org/apache/derby/client/am/LogWriter.java,245,} else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,248,} else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,251,} else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,254,} else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,257,} else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,848,if (!loggingEnabled(ClientDataSource.TRACE_DIAGNOSTICS)) {
java/client/org/apache/derby/client/am/LogWriter.java,861,if (!loggingEnabled(ClientDataSource.TRACE_DIAGNOSTICS)) {
java/client/org/apache/derby/client/am/LogWriter.java,875,if (!loggingEnabled(ClientDataSource.TRACE_DIAGNOSTICS)) {
java/client/org/apache/derby/client/am/LogWriter.java,890,if (!loggingEnabled(ClientDataSource.TRACE_PARAMETER_META_DATA) || columnMetaData == null) {
java/client/org/apache/derby/client/am/LogWriter.java,912,if (!loggingEnabled(ClientDataSource.TRACE_RESULT_SET_META_DATA) || columnMetaData == null) {
java/client/org/apache/derby/client/am/LogWriter.java,993,public void traceConnectEntry(ClientBaseDataSource dataSource) {
java/client/org/apache/derby/client/am/LogWriter.java,997,if (loggingEnabled(ClientDataSource.TRACE_DRIVER_CONFIGURATION)) {
java/client/org/apache/derby/client/am/LogWriter.java,1000,if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1013,if (loggingEnabled(ClientDataSource.TRACE_DRIVER_CONFIGURATION)) {
java/client/org/apache/derby/client/am/LogWriter.java,1016,if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1021,"public void traceConnectResetEntry(Object instance, LogWriter logWriter,"
java/client/org/apache/derby/client/am/LogWriter.java,1022,"String user, ClientBaseDataSource ds) {"
java/client/org/apache/derby/client/am/LogWriter.java,1027,if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1036,if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1045,if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1053,private void traceConnectsResetEntry(ClientBaseDataSource dataSource) {
java/client/org/apache/derby/client/am/LogWriter.java,1067,private void traceConnectsEntry(ClientBaseDataSource dataSource) {
java/client/org/apache/derby/client/am/LogWriter.java,1250,private Properties getProperties(ClientBaseDataSource cds)
java/client/org/apache/derby/client/am/LogWriter.java,1253,Properties properties = new Properties();
java/client/org/apache/derby/client/am/LogWriter.java,1255,try {
java/client/org/apache/derby/client/am/LogWriter.java,1256,Reference ref = cds.getReference();
java/client/org/apache/derby/client/am/LogWriter.java,1258,for (Enumeration e = ref.getAll(); e.hasMoreElements();) {
java/client/org/apache/derby/client/am/LogWriter.java,1260,RefAddr attribute = (RefAddr) e.nextElement();
java/client/org/apache/derby/client/am/LogWriter.java,1262,String propertyKey = attribute.getType();
java/client/org/apache/derby/client/am/LogWriter.java,1263,String value = (String) attribute.getContent();
java/client/org/apache/derby/client/am/LogWriter.java,1266,if (Attribute.PASSWORD_ATTR.equals(propertyKey)) {
java/client/org/apache/derby/client/am/LogWriter.java,1267,"value = ""********"";"
java/client/org/apache/derby/client/am/LogWriter.java,1270,if(value != null)
java/client/org/apache/derby/client/am/LogWriter.java,1271,"properties.setProperty(propertyKey, value);"
java/client/org/apache/derby/client/am/LogWriter.java,1273,} catch (NamingException e) {
java/client/org/apache/derby/client/am/LogWriter.java,1274,"throw new SqlException(this,"
java/client/org/apache/derby/client/am/LogWriter.java,1275,"new ClientMessageId(SQLState.JAVA_EXCEPTION),"
java/client/org/apache/derby/client/am/LogWriter.java,1276,"e.getClass().getName(), e.getMessage(), e);"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,41,import org.apache.derby.client.net.NetLogWriter;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,42,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,43,import org.apache.derby.jdbc.ClientXADataSource;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,57,"public ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,58,"LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,65,"public ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,66,"LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,67,"String password,int rmId) throws SQLException {"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,73,"public ClientXAConnection newClientXAConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,76,"return new ClientXAConnection((ClientXADataSource)ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,199,"org.apache.derby.jdbc.ClientBaseDataSource clientDataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,223,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,235,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,261,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,49,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,50,import org.apache.derby.jdbc.ClientXADataSource;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,71,"ClientBaseDataSource ds, LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,79,"ClientBaseDataSource ds, LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,87,"ClientBaseDataSource ds, LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,90,"return new ClientXAConnection40((ClientXADataSource)ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,196,"org.apache.derby.jdbc.ClientBaseDataSource clientDataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,220,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,232,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,257,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetXAConnection.java,66,"public NetXAConnection(NetLogWriter netLogWriter,"
java/client/org/apache/derby/client/net/NetXAConnection.java,67,"String user,"
java/client/org/apache/derby/client/net/NetXAConnection.java,68,"String password,"
java/client/org/apache/derby/client/net/NetXAConnection.java,69,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetXAConnection.java,70,"int rmId,"
java/client/org/apache/derby/client/net/NetXAConnection.java,71,"boolean isXAConn,"
java/client/org/apache/derby/client/net/NetXAConnection.java,72,ClientPooledConnection cpc) throws SqlException {
java/client/org/apache/derby/client/net/NetXAConnection.java,262,"protected NetConnection createNetConnection (NetLogWriter netLogWriter,"
java/client/org/apache/derby/client/net/NetXAConnection.java,263,"String user,"
java/client/org/apache/derby/client/net/NetXAConnection.java,264,"String password,"
java/client/org/apache/derby/client/net/NetXAConnection.java,265,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetXAConnection.java,266,"int rmId,"
java/client/org/apache/derby/client/net/NetXAConnection.java,267,"boolean isXAConn,"
java/client/org/apache/derby/client/net/NetXAConnection.java,268,ClientPooledConnection cpc) throws SqlException {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,445,public static String getPassword(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,446,"return properties.getProperty(""password"");"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,449,private String password;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,451,synchronized public final void setPassword(String password) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,452,this.password = password;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,455,public final String getPassword() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,456,return password;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,719,"private static void checkEnumeration(Properties set, String attribute, String[] choices) throws SqlException {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,720,String value = set.getProperty(attribute);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,721,if (value == null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,722,return;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,725,for (int i = 0; i < choices.length; i++) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,726,if (value.toUpperCase(java.util.Locale.ENGLISH).equals(choices[i].toUpperCase(java.util.Locale.ENGLISH))) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,727,return;
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,45,implements ConnectionPoolDataSource {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,46,extends ClientConnectionPoolDataSource {
java/client/org/apache/derby/jdbc/ClientDataSource.java,104,public class ClientDataSource extends ClientBaseDataSource implements DataSource {
java/client/org/apache/derby/jdbc/ClientDataSource40.java,103,public class ClientDataSource40 extends ClientDataSource {
java/client/org/apache/derby/jdbc/ClientXADataSource.java,54,public class ClientXADataSource extends ClientDataSource implements XADataSource {
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,53,public class ClientXADataSource40 extends ClientXADataSource {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,96,getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,278,getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,343,getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,407,getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1092,suite.addTest(new CollationTest(baseFixture));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/JDBC4FromJDBC3DataSourceTest.java,65,if (JDBC.vmSupportsJDBC4())
java/testing/org/apache/derbyTesting/junit/Derby.java,97,"""org.apache.derby.jdbc.ClientDataSource"");"
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,48,"""org.apache.derby.jdbc.EmbeddedDataSource40"","
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,49,"""org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40"","
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,50,"""org.apache.derby.jdbc.EmbeddedXADataSource40"","
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,88,"""org.apache.derby.jdbc.ClientDataSource"","
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,296,"URL client = getURL(""org.apache.derby.jdbc.ClientDataSource"");"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,592,try {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,532,"""org.apache.derby.jdbc."" +"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,515,"""ClientXADataSource40"").newInstance());"
java/engine/org/apache/derby/iapi/types/SQLDouble.java,462,setValue(bigDecimal.doubleValue());
java/engine/org/apache/derby/iapi/types/SQLReal.java,418,setValue(bigDecimal.floatValue());
java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java,85,this.baseColumnPositions = baseColumnPositions;
java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java,86,this.isAscending = isAscending;
java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java,104,return baseColumnPositions;
java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java,165,return isAscending;
java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java,171,this.baseColumnPositions = baseColumnPositions;
java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java,177,this.isAscending = isAscending;
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,60,this.referencedColumns = referencedColumns;
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,72,return referencedColumns;
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,100,whenClause = triggerd.getWhenClauseSPS();
java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java,41,import org.apache.derby.iapi.sql.execute.ExecutionFactory;
java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java,133,"String				newReferencingName"
java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java,865,"String				newReferencingName"
java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java,872,"referencingOld, referencingNew, oldReferencingName, newReferencingName);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,62,"s.execute(""drop procedure proc_no_sql"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,63,"assertStatementError(""42Y03"",s,""insert into t2 values (1,2), (2,4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,65,"s.execute(""create procedure proc_no_sql() parameter style java language java NO SQL external name 'org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.zeroArg'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,86,"s.execute(""drop procedure proc_no_sql"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,88,"assertStatementError(""42Y03"",s,""insert into t2 values (1,2), (2,4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,90,"s.execute(""create procedure proc_no_sql() parameter style java language java NO SQL external name 'org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.zeroArg'"");"
java/client/org/apache/derby/client/net/NetPackageRequest.java,63,"maxIdentifierLength,"
java/drda/org/apache/derby/impl/drda/CodePoint.java,741,"static final int RDBNAM_LEN = 18; //dbname fixed length for SQLAM level 6, for level 7,"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,148,boolean compilingStatement;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,723,compilingStatement = true;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,758,synchronized (this) {
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,759,compilingStatement = false;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,760,notifyAll();
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,221,if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,223,"SanityManager.ASSERT(dummySubqueryList.size() == 0,"
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,224,"""dummySubqueryList.size() is expected to be 0"");"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,901,"String LANG_AGGREGATE_IN_GROUPBY_LIST                              = ""42Y26"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,866,"String LANG_ALL_RESULT_EXPRESSIONS_PARAMS                          = ""42X87"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java,52,public static Test suite() {
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,258,lcc.popTriggerExecutionContext(this);