File,Line_number,SRC
java/engine/org/apache/derby/impl/sql/conn/GenericAuthorizer.java,156,for( Iterator iter = requiredPermissionsList.iterator();
java/engine/org/apache/derby/impl/sql/conn/GenericAuthorizer.java,157,iter.hasNext();)
java/engine/org/apache/derby/impl/sql/conn/GenericAuthorizer.java,159,"((StatementPermission) iter.next()).check( lcc, authorizationId, false);"
java/testing/org/apache/derbyTesting/functionTests/harness/j9_foundation.java,131,protected void setSecurityProps()
java/testing/org/apache/derbyTesting/functionTests/harness/j9_foundation.java,133,"System.out.println(""Note: J9 (foundation) tests do not run with security manager"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/_Suite.java,59,suite.addTest(DataSourcePropertiesTest.suite());
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,159,"bcon.getLeftOperand().getTypeServices(),"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,156,QueryTreeNode cast = getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,445,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,446,MethodBuilder mb)
java/engine/org/apache/derby/impl/store/raw/RawStore.java,268,if(restoreFromBackup !=null)
java/engine/org/apache/derby/impl/store/raw/RawStore.java,980,private void restoreRemainingFromBackup(String backupPath) throws StandardException
java/engine/org/apache/derby/impl/store/raw/RawStore.java,989,File backuploc = new File(backupPath);
java/engine/org/apache/derby/impl/store/raw/RawStore.java,990,String[] fromList = privList(backuploc);
java/engine/org/apache/derby/impl/store/raw/RawStore.java,991,for(int i =0 ; i < fromList.length ; i++)
java/engine/org/apache/derby/impl/store/raw/RawStore.java,993,StorageFile toFile = storageFactory.newStorageFile( fromList[i]);
java/engine/org/apache/derby/impl/store/raw/RawStore.java,994,if(privExists(toFile) ||
java/engine/org/apache/derby/impl/store/raw/RawStore.java,995,fromList[i].equals(PersistentService.PROPERTIES_NAME)){
java/engine/org/apache/derby/impl/store/raw/RawStore.java,996,continue;
java/engine/org/apache/derby/impl/store/raw/RawStore.java,999,"File fromFile = new File(backuploc, fromList[i]);"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1000,if(privIsDirectory(fromFile))
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1002,"if (!privCopyDirectory(fromFile, toFile)){"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1003,throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1005,"fromFile, toFile);"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1007,}else{
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1008,"if (!privCopyFile(fromFile, toFile)){"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1009,throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1010,"SQLState.UNABLE_TO_COPY_FILE_FROM_BACKUP,"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1011,"fromFile, toFile);"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,313,"logFactory.recover(this, dataFactory, xactFactory);"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2263,catch( PrivilegedActionException pae) { return false;} // does not throw an exception
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2328,catch( PrivilegedActionException pae) { return false;} // does not throw an exception
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2440,public final Object run() throws IOException
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2462,return ReuseFactory.getBoolean(actionRegularFile.mkdirs());
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1412,(reEncrypt ? SQLState.DATABASE_REENCRYPTION_FAILED :
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1413,"SQLState.DATABASE_ENCRYPTION_FAILED),"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,414,xactFactory.startNestedReadOnlyUserTransaction(
java/engine/org/apache/derby/impl/store/raw/RawStore.java,415,"this, compatibilitySpace, contextMgr, transName));"
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,927,&& other.rightOperand.isEquivalent(rightOperand));
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,294,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,295,MethodBuilder mb)
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java,74,"SQLException ex = new SQLException(message, sqlState, severity, t);"
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java,85,} else if (sqlState.startsWith(SQLState.AUTHORIZATION_PREFIX)) {
java/engine/org/apache/derby/impl/sql/compile/ConstantNode.java,285,return other.getValue().compare(getValue()) == 0;
java/engine/org/apache/derby/impl/sql/compile/ConstantNode.java,222,public void generateExpression
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,48,""" lbv long varchar for bit data, dc decimal(5,2))""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,250,"""42Y30"", ""select c1+1, count(*) from test group by c1+2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,254,"""42Y30"", ""select (cast (c as char(2))), count(*) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,259,"""42Y30"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,264,"""42Y30"","
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,48,public class UpdateLoader {
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,64,"public UpdateLoader(String classpath, DatabaseClasses parent, boolean verbose, boolean normalizeToUpper)"
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,84,"String[][] elements = IdUtil.parseDbClassPath(classpath, normalizeToUpper);"
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,86,int jarCount = elements.length;
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,89,for (int i = 0; i < jarCount; i++) {
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,90,"jarList[i] = new JarLoader(this, elements[i], vs);"
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,106,"public Class loadClass(String className, boolean resolve)"
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,157,public InputStream getResourceAsStream(String name) {
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,204,public synchronized void modifyClasspath(String classpath)
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,217,public synchronized void modifyJar(boolean reload) throws StandardException {
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,281,public void close() {
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,300,public int getClassLoaderVersion() {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/setTransactionIsolation.java,81,"String[] tabsToDrop = {""tab1"", ""t1"", ""t1copy"", ""t2""};"
java/engine/org/apache/derby/catalog/SystemProcedures.java,930,"(purgeRows == 1),"
java/engine/org/apache/derby/catalog/SystemProcedures.java,931,"(defragementRows == 1),"
java/engine/org/apache/derby/catalog/SystemProcedures.java,932,(truncateEnd == 1));
java/engine/org/apache/derby/catalog/SystemProcedures.java,114,"if (sqlerrmc.indexOf(SQLERRMC_MESSAGE_DELIMITER, index) == -1)"
java/engine/org/apache/derby/catalog/SystemProcedures.java,116,"index = sqlerrmc.indexOf(SQLERRMC_MESSAGE_DELIMITER, index) +"
java/engine/org/apache/derby/catalog/SystemProcedures.java,117,SQLERRMC_MESSAGE_DELIMITER.length();
java/engine/org/apache/derby/catalog/SystemProcedures.java,123,"MessageService.getLocalizedMessage(sqlcode, errmcLen, sqlerrmc, sqlerrp, errd0, errd1,"
java/engine/org/apache/derby/catalog/SystemProcedures.java,133,"endIdx = sqlerrmc.indexOf(SQLERRMC_MESSAGE_DELIMITER, startIdx);"
java/engine/org/apache/derby/catalog/SystemProcedures.java,146,"MessageService.getLocalizedMessage(sqlcode, (short)sqlError.length(), sqlError,"
java/engine/org/apache/derby/catalog/SystemProcedures.java,156,startIdx = endIdx + SQLERRMC_MESSAGE_DELIMITER.length();
java/engine/org/apache/derby/impl/sql/GenericParameter.java,334,return value.getString();
java/engine/org/apache/derby/impl/sql/GenericParameter.java,338,"return ""unexpected exception from getString() - "" + se;"
java/engine/org/apache/derby/impl/sql/GenericParameter.java,45,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,47,import org.apache.derby.iapi.types.*;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,48,import org.apache.derby.iapi.types.*;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,149,"gpClone.initialize(this.getValue().getClone(), jdbcTypeId, declaredClassName);"
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,810,initSlotTable();
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,2183,private void initSlotTable()
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,2227,"SQLState.DATA_CORRUPT_PAGE, getPageId()));"
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,2291,"SQLState.DATA_CORRUPT_PAGE, ioe, getPageId()));"
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,6951,SanityManager.ASSERT(isLatched());
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,3046,"SanityManager.ASSERT(recordHeader.getFirstField() == 0,"
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,2559,"""Head row piece should start at field 0 but is not"");"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2871,rc.setExpression(rc.getExpression().remapColumnReferencesToExpressions());
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,474,if (columnName.equals( resultColumn.getName()) )
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,535,if (columnName.equals( resultColumn.getName()) )
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3848,if (defaultInfo != null)
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3442,int[] mapSourceColumns()
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3444,"int[]			mapArray = new int[size()];"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3464,mapArray[index] = vcn.getSourceColumn().getVirtualColumnId();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3479,mapArray[index] = cr.getSource().getVirtualColumnId();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3488,return mapArray;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2230,if (
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2231,"!thisExpr.getTypeCompiler().storable(otherTypeId, cf) &&"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2232,"!otherExpr.getTypeCompiler().storable(thisTypeId, cf))"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1344,cc = getLanguageConnectionContext().
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1345,getTransactionCompile().openConglomerate(
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1346,"conglomerateId,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1347,"false,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1348,"0,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1349,"TransactionController.MODE_RECORD,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1350,TransactionController.ISOLATION_READ_COMMITTED);
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2124,"public void checkColumnUpdateability(String[] ucl, String cursorName)"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2134,! resultColumn.foundInList(ucl))
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,970,"public void generate(ActivationClassBuilder acb, MethodBuilder mb)"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,704,"public FormatableBitSet bindResultColumnsByName(TableDescriptor targetTableDescriptor,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,755,"public void bindResultColumnsByName(ResultColumnList fullRCL,"
java/client/org/apache/derby/client/am/SectionManager.java,55,public static byte[] holdPKGNAMCBytes = null;
java/client/org/apache/derby/client/am/SectionManager.java,56,public static byte[] noHoldPKGNAMCBytes = null;
java/client/org/apache/derby/client/am/SectionManager.java,187,"positionedUpdateCursorNameToResultSet_.put(cursorName, resultSet);"
java/client/org/apache/derby/client/am/SectionManager.java,191,ResultSet rs = (ResultSet) positionedUpdateCursorNameToResultSet_.get(cursorName);
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,310,protected String serializeToString(String xmlAsText)
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,313,ArrayList aList = new ArrayList();
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,314,aList.add(dBuilder.parse(
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,315,new InputSource(new StringReader(xmlAsText))));
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,324,"return serializeToString(aList, null);"
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,358,java.io.StringWriter sWriter = new java.io.StringWriter();
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,387,if (obj instanceof String)
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,394,if (lastItemWasString)
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,400,"sWriter.write("" "");"
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,409,sWriter.write((String)obj);
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,410,lastItemWasString = true;
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,412,else if (obj instanceof Attr)
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,441,if (xmlVal != null)
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,442,xmlVal.markAsHavingTopLevelAttr();
java/engine/org/apache/derby/iapi/types/Like.java,681,if (pattern == null || (pattern.length() == 0))
java/engine/org/apache/derby/impl/db/BasicDatabase.java,804,"Object f = fr.getAsFile(externalName, generationId);"
java/engine/org/apache/derby/impl/db/BasicDatabase.java,809,"return fr.getAsStream(externalName, generationId);"
java/engine/org/apache/derby/impl/db/BasicDatabase.java,786,"public Object readJarFile(String schemaName, String sqlName)"
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,24,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,26,import org.apache.derby.iapi.services.context.ContextService;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,34,import org.apache.derby.iapi.store.access.DatabaseInstant;
java/engine/org/apache/derby/iapi/services/loader/JarReader.java,38,"Object readJarFile(String schemaName, String sqlName)"
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,69,Object zipData = load();
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,87,if (vs != null)
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,88,"vs.println(MessageService.getTextMessage(MessageId.CM_LOAD_JAR_EXCEPTION, getJarName(), ioe));"
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,147,"return loadClassData((InputStream) load(),"
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,171,"return getRawStream((InputStream) load(), name);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1064,"public ResultSetNode enhanceRCLForInsert(int numTargetColumns, int[] colMap,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1157,String defaultText = defaultInfo.getDefaultText();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1158,ValueNode defaultTree = parseDefault(defaultText);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1159,defaultTree = defaultTree.bindExpression(
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1160,"getFromList(),"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1161,"(SubqueryList) null,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1162,(Vector) null);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1163,newResultColumn = (ResultColumn) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1164,"C_NodeTypes.RESULT_COLUMN,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1165,"defaultTree.getTypeServices(),"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1166,"defaultTree,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1167,getContextManager());
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1093,"newResultColumn = genNewRCForInsert(targetTD, targetVTI, index + 1, dataDictionary);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1100,resultColumns = newResultCols;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,656,"public void bindResultColumns(TableDescriptor targetTableDescriptor,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,657,"FromVTI targetVTI,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,658,"ResultColumnList targetColumnList,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,659,"DMLStatementNode statement,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,660,FromList fromListParam)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1492,public void generateNormalizationResultSet(
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1719,"protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1768,"public void generateResultSet(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1769,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1774,SanityManager.NOTREACHED();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1775,return;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1602,RequiredRowOrdering requiredRowOrdering)
java/engine/org/apache/derby/impl/sql/compile/FromTable.java,849,double baseIndexUsage = 1.0;
java/engine/org/apache/derby/impl/sql/compile/FromTable.java,850,perRowUsage += ( baseIndexUsage + 11 );
java/engine/org/apache/derby/impl/sql/compile/FromTable.java,1336,"protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/FromTable.java,1383,"public FromTable transformOuterJoins(ValueNode predicateTree, int numTables)"
java/tools/org/apache/derby/impl/tools/ij/util.java,57,private static boolean HAVE_BIG_DECIMAL;
java/tools/org/apache/derby/impl/tools/ij/util.java,60,boolean haveBigDecimal;
java/tools/org/apache/derby/impl/tools/ij/util.java,62,"Class.forName(""java.math.BigDecimal"");"
java/tools/org/apache/derby/impl/tools/ij/util.java,63,haveBigDecimal = true;
java/tools/org/apache/derby/impl/tools/ij/util.java,65,haveBigDecimal = false;
java/tools/org/apache/derby/impl/tools/ij/util.java,67,HAVE_BIG_DECIMAL = haveBigDecimal;
java/tools/org/apache/derby/impl/tools/ij/util.java,650,if (util.HAVE_BIG_DECIMAL)
java/tools/org/apache/derby/impl/tools/ij/util.java,664,switch (ps.getMetaData().getColumnType(c))
java/tools/org/apache/derby/impl/tools/ij/util.java,666,case Types.BIGINT:
java/tools/org/apache/derby/impl/tools/ij/util.java,667,"ps.setLong(c, rs.getLong(c));"
java/tools/org/apache/derby/impl/tools/ij/util.java,668,break;
java/tools/org/apache/derby/impl/tools/ij/util.java,669,case Types.INTEGER:
java/tools/org/apache/derby/impl/tools/ij/util.java,670,case Types.SMALLINT:
java/tools/org/apache/derby/impl/tools/ij/util.java,671,case Types.TINYINT:
java/tools/org/apache/derby/impl/tools/ij/util.java,672,"ps.setInt(c, rs.getInt(c));"
java/tools/org/apache/derby/impl/tools/ij/util.java,673,break;
java/tools/org/apache/derby/impl/tools/ij/util.java,674,default:
java/tools/org/apache/derby/impl/tools/ij/util.java,675,"ps.setString(c,rs.getString(c));"
java/tools/org/apache/derby/impl/tools/ij/util.java,676,break;
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,614,return false;
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,732,return false;
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,448,"GETCURRENTCONNECTION,INDEX,INSTANCEOF,METHOD,NEW,OFF,PROPERTIES,PUBLICATION,RECOMPILE,"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,449,"+  ""REFRESH,RENAME,RUNTIMESTATISTICS,STATEMENT,STATISTICS,TIMING,WAIT"";"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1957,"s.setString(3, swapNull(table));"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2044,"String tablePattern,"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2049,"return doGetBestRowId(catalogPattern, schemaPattern, tablePattern,"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2060,"String schemaPattern, String tablePattern, int scope,"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2063,"return doGetBestRowId(catalogPattern, schemaPattern, tablePattern,"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2077,"String schemaPattern, String tablePattern, int scope,"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2110,"ps.setString(3,tablePattern);"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2139,"ps.setString(3,tablePattern);"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2169,"ps.setString(3,tablePattern);"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2197,"ps.setString(3,tablePattern);"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2263,"s.setString(3, swapNull(table));"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2324,"s.setString(3, swapNull(table));"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2401,"s.setString(3, swapNull(table));"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2479,"s.setString(3, swapNull(table));"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2724,"s.setString(3, swapNull(table));"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,567,return true;
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2288,getLanguageConnectionContext().getDataDictionary().checkVersion(
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,3486,s = getEmbedConnection().prepareMetaDataStatement(queryText);
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,3630,return getEmbedConnection().getLanguageConnection();
java/client/org/apache/derby/client/am/PreparedStatement.java,2043,parameterMetaData_.clientParamtertype_ = (int[]) parameterTypeList.get(i);
java/client/org/apache/derby/client/am/PreparedStatement.java,2044,parameters_ = (Object[]) batch_.get(i);
java/client/org/apache/derby/client/am/PreparedStatement.java,937,"setInput(parameterIndex, new Clob(agent_, x, ""US-ASCII"", (int)length));"
java/client/org/apache/derby/client/am/PreparedStatement.java,2363,"setInput(parameterIndex, new Clob(agent_, x, ""US-ASCII""));"
java/client/org/apache/derby/client/am/PreparedStatement.java,1181,if (x instanceof String) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,552,"fileName = traceDirectory + ""/"" + logWriterInUseSuffix + ""_"" + traceFileSuffixIndex;"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,554,"fileName = traceDirectory + ""/"" + traceFile + logWriterInUseSuffix + ""_"" + traceFileSuffixIndex;"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,505,if (printWriter != logWriter && traceDirectory != null)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,530,if (printWriter != logWriter && traceDirectory != null)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,364,public static String getPassword(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,365,"return properties.getProperty(""password"");"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,368,private String password;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,370,synchronized public final void setPassword(String password) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,371,this.password = password;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,374,public final String getPassword() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,375,return password;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,638,"private static void checkEnumeration(Properties set, String attribute, String[] choices) throws SqlException {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,639,String value = set.getProperty(attribute);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,640,if (value == null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,641,return;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,644,for (int i = 0; i < choices.length; i++) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,645,if (value.toUpperCase(java.util.Locale.ENGLISH).equals(choices[i].toUpperCase(java.util.Locale.ENGLISH))) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,646,return;
java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java,236,else
java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java,214,throw StandardException.newException(
java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java,206,"SQLState.LANG_MODIFY_COLUMN_EXISTING_CONSTRAINT, name);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,402,columnInfo[ix].action == ColumnInfo.MODIFY_COLUMN_DEFAULT_INCREMENT)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2268,if (errorMsg.equals(SQLState.LANG_NULL_DATA_IN_PRIMARY_KEY))
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2271,"SQLState.LANG_NULL_DATA_IN_PRIMARY_KEY,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2057,"ResultSet rs = ps.execute(lcc, true, 0L);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2079,"ResultSet rs = ps.execute(lcc, false, 0L);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,444,"dropColumnFromTable(activation, ix);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,660,"private void dropColumnFromTable(Activation activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,661,int ix)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,670,ColumnDescriptor columnDescriptor =
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,671,td.getColumnDescriptor(columnInfo[ix].name);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,674,if (columnDescriptor == null)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,676,throw
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,677,StandardException.newException(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,678,"SQLState.LANG_COLUMN_NOT_FOUND_IN_TABLE,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1027,"columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2272,td.getQualifiedName());
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,684,ColumnDescriptorList tab_cdl = td.getColumnDescriptorList();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,685,int size = tab_cdl.size();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,688,if (size == 1)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,692,"""THE *LAST* COLUMN "" + columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,742,"columnInfo[ix].name, ""TRIGGER"","
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,809,"columnInfo[ix].name, ""CONSTRAINT"","
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,862,"dd.dropColumnDescriptor(td.getUUID(), columnInfo[ix].name, tc);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1923,"(RowLocation) rl.cloneObject(),"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,404,"modifyColumnDefault(activation, ix);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,409,"modifyColumnType(activation, ix);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,547,compressTable(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,553,truncateTable(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,638,"updateNewAutoincrementColumn(activation, columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,859,compressTable(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,905,"private void modifyColumnType(Activation activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,567,int ix)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1065,throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2150,LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,991,DataDictionary dd = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,993,TransactionController tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,986,"private void modifyColumnDefault(Activation activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,987,int ix)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1048,"long maxValue = getColumnMax(activation, td, columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1049,"columnInfo[ix].autoincInc,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1050,columnInfo[ix].autoincStart);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1120,getAffectedIndexes(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1234,private void truncateTable(Activation activation)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1325,getAffectedIndexes(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1560,private void getAffectedIndexes(Activation activation)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2065,"private long getColumnMax(Activation activation, TableDescriptor td, String columnName,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2066,"long increment, long initial)"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2148,throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2146,"private void updateNewAutoincrementColumn(Activation activation, String columnName, long initial,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,720,if (referencedCols == null)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,722,"int refColLen = referencedCols.length, j;"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,723,boolean changed = false;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,724,for (j = 0; j < refColLen; j++)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,838,if (cascade)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2318,break;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,636,if (columnDescriptor.isAutoincrement())
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,209,if (!upToDate())
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,210,makeValid(lcc);
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,234,"public ResultSet execute(LanguageConnectionContext lcc,"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,235,"boolean rollbackParentContext,"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,236,long timeoutMillis)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,241,"return execute(a, rollbackParentContext, timeoutMillis);"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,257,"public ResultSet execute(Activation activation,"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,258,"boolean rollbackParentContext,"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,259,long timeoutMillis)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,207,public void rePrepare(LanguageConnectionContext lcc)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1155,if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,782,"SanityManager.ASSERT(ps == this, ""ps != this"");"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,223,rePrepare(lcc);
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,936,return;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,127,"protected ResultColumnDescriptor[]	targetColumns;"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,128,"protected String[] 					updateColumns;"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,925,CursorInfo cursorInfo = (CursorInfo)qt.getCursorInfo();
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,926,if (cursorInfo != null)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,928,targetTable = cursorInfo.targetTable;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,929,targetColumns = cursorInfo.targetColumns;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,930,updateColumns = cursorInfo.updateColumns;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,931,updateMode = cursorInfo.updateMode;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,982,"public ResultColumnDescriptor[]	getTargetColumns() {"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,983,return targetColumns;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,991,"public String[]	getUpdateColumns()"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,993,return updateColumns;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,619,"public	final Object[]	getSavedObjects()"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,621,"return	savedObjects;"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,398,return paramTypeDescriptors;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,481,return beginCompileTimestamp;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,491,return endCompileTimestamp;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,149,boolean compilingStatement;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,713,compilingStatement = true;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,753,synchronized (this) {
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,754,compilingStatement = false;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,755,notifyAll();
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,172,if ((preStmt!=null) && (! preStmt.upToDate())) {
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,173,preStmt.makeValid(getLanguageConnectionContext()); // need to have the query tree
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,174,"if (! preStmt.isValid()) // can't make it valid, say not found"
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,175,preStmt = null;
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,365,!foundString(
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,366,"preStmt.getUpdateColumns(),"
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,367,columnReference.getColumnName()));
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,458,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,459,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,435,(RequiredRowOrdering) null);
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,306,if(columnsTableName != null)
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,307,if(columnsTableName.getSchemaName() == null && correlationName == null)
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,308,columnsTableName.bind(this.getDataDictionary());
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,329,if(baseTableName != null)
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,330,if(baseTableName.getSchemaName() == null && correlationName == null)
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,331,baseTableName.bind(this.getDataDictionary());
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,42,"extends Dependent, Provider"
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,77,void rePrepare(LanguageConnectionContext lcc)
java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java,329,"throw StandardException.newException(SQLState.LANG_CURSOR_CLOSED, cursorName);"
java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java,336,public void updateRow (ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java,337,((NoPutResultSet)cursor).updateRow(row);
java/engine/org/apache/derby/impl/sql/depend/BasicDependency.java,81,"protected Provider	provider;"
java/engine/org/apache/derby/impl/sql/depend/BasicDependency.java,82,"protected Dependent	dependent;"
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,24,"import	org.apache.derby.catalog.Dependable;"
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,25,"import	org.apache.derby.catalog.DependableFinder;"
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,28,import org.apache.derby.iapi.services.context.ContextService;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,30,import org.apache.derby.iapi.services.monitor.Monitor;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,60,import org.apache.derby.catalog.UUID;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,61,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,62,import org.apache.derby.iapi.services.io.FormatableBitSet;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,64,import org.apache.derby.iapi.reference.MessageId;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,66,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,68,import java.util.Hashtable;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,69,import java.util.Enumeration;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,70,import java.util.ListIterator;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,71,import java.util.List;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,322,for (int i = 0; i < providerInfos.length; i++)
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,330,providerInfos[i].getObjectId());
java/engine/org/apache/derby/iapi/types/DataType.java,940,"retval = equals(left, inList[mid]);"
java/engine/org/apache/derby/iapi/types/DataType.java,945,"BooleanDataValue goLeft = greaterThan(inList[mid], left);"
java/engine/org/apache/derby/iapi/types/DataType.java,965,"retval = equals(left, inList[index]);"
java/engine/org/apache/derby/iapi/types/DataType.java,974,"BooleanDataValue stop = greaterThan(inList[index], left);"
java/engine/org/apache/derby/iapi/types/DataType.java,577,public Object cloneObject()
java/engine/org/apache/derby/iapi/types/DataType.java,579,return getClone();
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,139,TypeId judgeTypeId = leftOperand.getTypeServices().getTypeId();
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,140,"DataValueDescriptor judgeODV = null;  //no judge, no argument"
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,142,judgeODV = (DataValueDescriptor) judgeTypeId.getNull();
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,360,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,361,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,512,"public void generateStartStopKey(boolean isAsc, boolean isStartKey,"
java/engine/org/apache/derby/impl/load/ImportReadData.java,811,if (totalCharsSoFar != -1) {
java/engine/org/apache/derby/impl/load/Import.java,43,private String inputFileName;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,989,if (isClosed())
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,990,return;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,993,if (rootConnection == this)
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,996,if (!autoCommit && !transactionIsIdle()) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,997,throw newSQLException(SQLState.LANG_INVALID_TRANSACTION_STATE);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1000,close(exceptionClose);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1002,else
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1003,setInactive(); // nested connection
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1022,setupContextStack();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1023,try {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1024,tr.rollback();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1454,if (rootConnection == this)
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1138,getLanguageConnection().setReadOnly(readOnly);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1230,getLanguageConnection().setIsolationLevel(iLevel);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1801,getLanguageConnection().resetFromPool();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1833,(XATransactionController) getLanguageConnection().getTransactionExecute();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1848,getLanguageConnection().internalCommit(false /* don't commitStore again */);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1870,getLanguageConnection().xaCommit(onePhase);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1888,getLanguageConnection().xaRollback();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1032,tr.cleanupOnError(e);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1021,if (active) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1353,"SanityManager.ASSERT(!isClosed(), ""connection is closed"");"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1543,checkIfClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,97,private static final StandardException exceptionClose = StandardException.closeException();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1012,private void close(StandardException e) throws SQLException {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1208,iLevel = ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1212,iLevel = ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1216,iLevel = ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1220,iLevel = ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1248,return ExecutionContext.CS_TO_JDBC_ISOLATION_LEVEL_MAP[getLanguageConnection().getCurrentIsolationLevel()];
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1941,case ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1942,case ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1943,case ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1944,case ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1945,case ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,107,"Util.generateCsSQLException(SQLState.LOGIN_FAILED, ""java.lang.OutOfMemoryError"");"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1309,"throw Util.generateCsSQLException(SQLState.INVALID_API_PARAMETER,map,""map"","
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1310,"""java.sql.Connection.setTypeMap"");"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1949,"SQLState.UNIMPLEMENTED_ISOLATION_LEVEL, new Integer(level));"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1948,throw Util.generateCsSQLException(
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,280,if (usingNoneAuth && getLanguageConnection().usesSqlAuthorization())
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1156,return getLanguageConnection().isReadOnly();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1355,return getTR().getLcc();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1785,getLanguageConnection().setDrdaID(drdaID);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1954,getLanguageConnection().setPrepareIsolationLevel(level);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1963,return getLanguageConnection().getPrepareIsolationLevel();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2016,LanguageConnectionContext lcc = getLanguageConnection();
java/client/org/apache/derby/client/am/DateTime.java,481,"return new java.sql.Timestamp(0, 0, 1, hour, minute, second, 0);"
java/client/org/apache/derby/client/am/DateTime.java,482,} else {
java/client/org/apache/derby/client/am/DateTime.java,483,recyclableTimestamp.setYear(0);
java/client/org/apache/derby/client/am/DateTime.java,484,recyclableTimestamp.setMonth(0);
java/client/org/apache/derby/client/am/DateTime.java,485,recyclableTimestamp.setDate(1);
java/client/org/apache/derby/client/am/DateTime.java,486,recyclableTimestamp.setHours(hour);
java/client/org/apache/derby/client/am/DateTime.java,487,recyclableTimestamp.setMinutes(minute);
java/client/org/apache/derby/client/am/DateTime.java,488,recyclableTimestamp.setSeconds(second);
java/client/org/apache/derby/client/am/DateTime.java,489,recyclableTimestamp.setNanos(0);
java/client/org/apache/derby/client/am/DateTime.java,490,return recyclableTimestamp;
java/client/org/apache/derby/client/am/DateTime.java,66,"java.sql.Date recyclableDate,"
java/client/org/apache/derby/client/am/DateTime.java,92,(((int) date.charAt(yearIndx + 3)) - zeroBase) -
java/client/org/apache/derby/client/am/DateTime.java,93,1900;
java/client/org/apache/derby/client/am/DateTime.java,102,if (recyclableDate == null) {
java/client/org/apache/derby/client/am/DateTime.java,103,"return new java.sql.Date(year, month, day);"
java/client/org/apache/derby/client/am/DateTime.java,104,} else {
java/client/org/apache/derby/client/am/DateTime.java,105,recyclableDate.setYear(year);
java/client/org/apache/derby/client/am/DateTime.java,106,recyclableDate.setMonth(month);
java/client/org/apache/derby/client/am/DateTime.java,107,recyclableDate.setDate(day);
java/client/org/apache/derby/client/am/DateTime.java,108,return recyclableDate;
java/client/org/apache/derby/client/am/DateTime.java,125,"java.sql.Time recyclableTime,"
java/client/org/apache/derby/client/am/DateTime.java,147,if (recyclableTime == null) {
java/client/org/apache/derby/client/am/DateTime.java,148,"return new java.sql.Time(hour, minute, second);"
java/client/org/apache/derby/client/am/DateTime.java,149,} else {
java/client/org/apache/derby/client/am/DateTime.java,150,recyclableTime.setHours(hour);
java/client/org/apache/derby/client/am/DateTime.java,151,recyclableTime.setMinutes(minute);
java/client/org/apache/derby/client/am/DateTime.java,152,recyclableTime.setSeconds(second);
java/client/org/apache/derby/client/am/DateTime.java,153,return recyclableTime;
java/client/org/apache/derby/client/am/DateTime.java,170,"java.sql.Timestamp recyclableTimestamp,"
java/client/org/apache/derby/client/am/DateTime.java,184,(((int) timestamp.charAt(3)) - zeroBase) -
java/client/org/apache/derby/client/am/DateTime.java,185,1900;
java/client/org/apache/derby/client/am/DateTime.java,210,if (recyclableTimestamp == null) {
java/client/org/apache/derby/client/am/DateTime.java,211,"return new java.sql.Timestamp(year, month, day, hour, minute, second, fraction * 1000);"
java/client/org/apache/derby/client/am/DateTime.java,212,} else {
java/client/org/apache/derby/client/am/DateTime.java,213,recyclableTimestamp.setYear(year);
java/client/org/apache/derby/client/am/DateTime.java,214,recyclableTimestamp.setMonth(month);
java/client/org/apache/derby/client/am/DateTime.java,215,recyclableTimestamp.setDate(day);
java/client/org/apache/derby/client/am/DateTime.java,216,recyclableTimestamp.setHours(hour);
java/client/org/apache/derby/client/am/DateTime.java,217,recyclableTimestamp.setMinutes(minute);
java/client/org/apache/derby/client/am/DateTime.java,218,recyclableTimestamp.setSeconds(second);
java/client/org/apache/derby/client/am/DateTime.java,219,recyclableTimestamp.setNanos(fraction * 1000);
java/client/org/apache/derby/client/am/DateTime.java,220,return recyclableTimestamp;
java/client/org/apache/derby/client/am/DateTime.java,399,"java.sql.Timestamp recyclableTimestamp,"
java/client/org/apache/derby/client/am/DateTime.java,419,(((int) date.charAt(yearIndx + 3)) - zeroBase) -
java/client/org/apache/derby/client/am/DateTime.java,420,1900;
java/client/org/apache/derby/client/am/DateTime.java,429,if (recyclableTimestamp == null) {
java/client/org/apache/derby/client/am/DateTime.java,430,"return new java.sql.Timestamp(year, month, day, 0, 0, 0, 0);"
java/client/org/apache/derby/client/am/DateTime.java,431,} else {
java/client/org/apache/derby/client/am/DateTime.java,432,recyclableTimestamp.setYear(year);
java/client/org/apache/derby/client/am/DateTime.java,433,recyclableTimestamp.setMonth(month);
java/client/org/apache/derby/client/am/DateTime.java,434,recyclableTimestamp.setDate(day);
java/client/org/apache/derby/client/am/DateTime.java,435,recyclableTimestamp.setHours(0);
java/client/org/apache/derby/client/am/DateTime.java,436,recyclableTimestamp.setMinutes(0);
java/client/org/apache/derby/client/am/DateTime.java,437,recyclableTimestamp.setSeconds(0);
java/client/org/apache/derby/client/am/DateTime.java,438,recyclableTimestamp.setNanos(0);
java/client/org/apache/derby/client/am/DateTime.java,439,return recyclableTimestamp;
java/client/org/apache/derby/client/am/DateTime.java,458,"java.sql.Timestamp recyclableTimestamp,"
java/client/org/apache/derby/client/am/DateTime.java,508,"java.sql.Date recyclableDate,"
java/client/org/apache/derby/client/am/DateTime.java,522,(((int) timestamp.charAt(3)) - zeroBase) -
java/client/org/apache/derby/client/am/DateTime.java,523,1900;
java/client/org/apache/derby/client/am/DateTime.java,532,if (recyclableDate == null) {
java/client/org/apache/derby/client/am/DateTime.java,533,"return new java.sql.Date(year, month, day);"
java/client/org/apache/derby/client/am/DateTime.java,534,} else {
java/client/org/apache/derby/client/am/DateTime.java,535,recyclableDate.setYear(year);
java/client/org/apache/derby/client/am/DateTime.java,536,recyclableDate.setMonth(month);
java/client/org/apache/derby/client/am/DateTime.java,537,recyclableDate.setDate(day);
java/client/org/apache/derby/client/am/DateTime.java,538,return recyclableDate;
java/client/org/apache/derby/client/am/DateTime.java,556,"java.sql.Time recyclableTime,"
java/client/org/apache/derby/client/am/DateTime.java,575,if (recyclableTime == null) {
java/client/org/apache/derby/client/am/DateTime.java,576,"return new java.sql.Time(hour, minute, second);"
java/client/org/apache/derby/client/am/DateTime.java,577,} else {
java/client/org/apache/derby/client/am/DateTime.java,578,recyclableTime.setYear(hour);
java/client/org/apache/derby/client/am/DateTime.java,579,recyclableTime.setMonth(minute);
java/client/org/apache/derby/client/am/DateTime.java,580,recyclableTime.setDate(second);
java/client/org/apache/derby/client/am/DateTime.java,581,return recyclableTime;
java/client/org/apache/derby/client/am/DateTime.java,180,year =
java/client/org/apache/derby/client/am/DateTime.java,186,month =
java/client/org/apache/derby/client/am/DateTime.java,188,(((int) timestamp.charAt(6)) - zeroBase) -
java/client/org/apache/derby/client/am/DateTime.java,189,1;
java/client/org/apache/derby/client/am/DateTime.java,190,day =
java/client/org/apache/derby/client/am/DateTime.java,192,(((int) timestamp.charAt(9)) - zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,193,hour =
java/client/org/apache/derby/client/am/DateTime.java,195,(((int) timestamp.charAt(12)) - zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,196,minute =
java/client/org/apache/derby/client/am/DateTime.java,198,(((int) timestamp.charAt(15)) - zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,199,second =
java/client/org/apache/derby/client/am/DateTime.java,201,(((int) timestamp.charAt(18)) - zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,202,fraction =
java/client/org/apache/derby/client/am/DateTime.java,558,throws  UnsupportedEncodingException {
java/client/org/apache/derby/client/am/DateTime.java,559,"int hour, minute, second;"
java/client/org/apache/derby/client/am/DateTime.java,516,int zeroBase = ((int) '0');
java/client/org/apache/derby/client/am/DateTime.java,565,hour =
java/client/org/apache/derby/client/am/DateTime.java,566,10 * (((int) timestamp.charAt(11)) - zeroBase) +
java/client/org/apache/derby/client/am/DateTime.java,567,(((int) timestamp.charAt(12)) - zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,568,minute =
java/client/org/apache/derby/client/am/DateTime.java,569,10 * (((int) timestamp.charAt(14)) - zeroBase) +
java/client/org/apache/derby/client/am/DateTime.java,570,(((int) timestamp.charAt(15)) - zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,571,second =
java/client/org/apache/derby/client/am/DateTime.java,572,10 * (((int) timestamp.charAt(17)) - zeroBase) +
java/client/org/apache/derby/client/am/DateTime.java,573,(((int) timestamp.charAt(18)) - zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,26,import java.io.UnsupportedEncodingException;
java/client/org/apache/derby/client/am/DateTime.java,242,"throws SqlException,UnsupportedEncodingException {"
java/client/org/apache/derby/client/am/DateTime.java,289,throws UnsupportedEncodingException {
java/client/org/apache/derby/client/am/DateTime.java,329,"throws SqlException,UnsupportedEncodingException {"
java/client/org/apache/derby/client/am/DateTime.java,400,String encoding)
java/client/org/apache/derby/client/am/DateTime.java,401,throws UnsupportedEncodingException {
java/client/org/apache/derby/client/am/SQLExceptionFactory40.java,75,} else if (sqlState.startsWith(SQLState.AUTHORIZATION_PREFIX)) {
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1354,"String AUTHORIZATION_PREFIX=""28"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1250,"String LANG_NULL_DATA_IN_PRIMARY_KEY                 	   	   	   = ""X0Y63.S"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,870,"String LANG_AGGREGATE_IN_GROUPBY_LIST                              = ""42Y26"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,836,"String LANG_ALL_RESULT_EXPRESSIONS_PARAMS                          = ""42X87"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/odbc_metadata.java,416,"""call sysibm.sqlforeignkeys (null, null, null, null, null, null, "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/odbc_metadata.java,422,"""call sysibm.sqlforeignkeys (null, null, null, null, null, null, "" +"
java/engine/org/apache/derby/iapi/store/access/DiskHashtable.java,312,"false, // do not hold"
java/engine/org/apache/derby/iapi/store/access/DiskHashtable.java,355,scan.fetch( row);
java/engine/org/apache/derby/iapi/store/access/TransactionController.java,869,"boolean		            skipNullKeyColumns)"
java/engine/org/apache/derby/impl/sql/execute/HashScanResultSet.java,368,skipNullKeyColumns);
java/engine/org/apache/derby/impl/store/access/BackingStoreHashTableFromScan.java,88,"boolean					skipNullKeyColumns)"
java/engine/org/apache/derby/impl/store/access/BackingStoreHashTableFromScan.java,102,false /* Do not keep the hash table after a commit. */);
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,1359,"boolean		            skipNullKeyColumns)"
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,1383,skipNullKeyColumns));
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,412,"conglom = accessmanager.conglomCacheFind(this, conglomId);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,177,"runJoin( conn, maxColValue, dupVals);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,178,"runDistinct( conn, maxColValue, dupVals);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,179,"runCursor( conn, maxColValue, dupVals);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,182,"private static void runJoin( Connection conn, int maxColValue, String[][][] dupVals)"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,185,"System.out.println( ""Running join"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,187,ResultSet rs = joinStmt.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,299,"private static void runDistinct( Connection conn, int maxColValue, String[][][] dupVals)"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,302,"System.out.println( ""Running distinct"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,303,ResultSet rs = distinctStmt.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,304,"checkAllCa1( rs, false, false, maxColValue, dupVals, ""DISTINCT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,394,if( holdOverCommit)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,421,"private static void runCursor( Connection conn, int maxColValue, String[][][] dupVals)"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,424,"System.out.println( ""Running scroll insensitive cursor"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,425,DatabaseMetaData dmd = conn.getMetaData();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,426,boolean holdOverCommit = dmd.supportsOpenCursorsAcrossCommit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,434,ResultSet.CONCUR_READ_ONLY);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,436,"checkAllCa1( rs, true, holdOverCommit, maxColValue, dupVals, ""scroll insensitive cursor"");"
java/testing/org/apache/derbyTesting/unitTests/store/T_QualifierTest.java,1018,"false,         // don't maintain runtime statistics"
java/testing/org/apache/derbyTesting/unitTests/store/T_QualifierTest.java,1019,"false);			// don't skip null key columns"
java/testing/org/apache/derbyTesting/unitTests/store/T_QualifierTest.java,1109,"false);			// don't skip null key columns"
java/client/org/apache/derby/client/am/Cursor.java,98,java.sql.Date recyclableDate_ = null;
java/client/org/apache/derby/client/am/Cursor.java,99,java.sql.Time recyclableTime_ = null;
java/client/org/apache/derby/client/am/Cursor.java,100,java.sql.Timestamp recyclableTimestamp_ = null;
java/client/org/apache/derby/client/am/Cursor.java,514,"recyclableDate_,"
java/client/org/apache/derby/client/am/Cursor.java,530,"recyclableTime_,"
java/client/org/apache/derby/client/am/Cursor.java,546,"recyclableTimestamp_,"
java/client/org/apache/derby/client/am/Cursor.java,560,"recyclableTimestamp_,"
java/client/org/apache/derby/client/am/Cursor.java,574,"recyclableTimestamp_,"
java/client/org/apache/derby/client/am/Cursor.java,588,"recyclableDate_,"
java/client/org/apache/derby/client/am/Cursor.java,602,"recyclableTime_,"
java/client/org/apache/derby/client/am/Cursor.java,1032,"return new java.io.ByteArrayInputStream(getCHAR(column).getBytes(""US-ASCII""));"
java/client/org/apache/derby/client/am/Cursor.java,1041,"return new java.io.ByteArrayInputStream(getVARCHAR(column).getBytes(""US-ASCII""));"
java/client/org/apache/derby/client/am/Cursor.java,107,public String[] charsetName_;
java/client/org/apache/derby/client/am/Cursor.java,136,charsetName_ = new String[numberOfColumns];
java/client/org/apache/derby/client/am/Cursor.java,450,try {
java/client/org/apache/derby/client/am/Cursor.java,451,if (ccsid_[column - 1] == 1200) {
java/client/org/apache/derby/client/am/Cursor.java,452,"return getStringWithoutConvert(columnDataPosition_[column - 1] + 2, columnDataComputedLength_[column - 1] - 2);"
java/client/org/apache/derby/client/am/Cursor.java,460,if (charsetName_[column - 1] == null) {
java/client/org/apache/derby/client/am/Cursor.java,461,"throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,462,new ClientMessageId(SQLState.CHARACTER_CONVERTER_NOT_AVAILABLE));
java/client/org/apache/derby/client/am/Cursor.java,504,"new ClientMessageId (SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,505,"""CHAR"", ""String"", e);"
java/client/org/apache/derby/client/am/Cursor.java,1274,charsetName_ = null;
java/client/org/apache/derby/client/am/Cursor.java,416,"""double"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,698,if (!usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,699,"assertTimeEqual(tv, tsv);"
java/engine/org/apache/derby/iapi/error/StandardException.java,462,if ((t instanceof SQLException) &&
java/engine/org/apache/derby/iapi/error/StandardException.java,463,!(t instanceof EmbedSQLException))
java/engine/org/apache/derby/iapi/error/StandardException.java,532,if (t instanceof EmbedSQLException) {
java/engine/org/apache/derby/iapi/error/StandardException.java,533,detailMessage = ((EmbedSQLException) t).toString();
java/engine/org/apache/derby/iapi/error/StandardException.java,307,"public static StandardException newException(String messageID, Throwable t, Object a1) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,308,Object[] oa = new Object[] {a1};
java/engine/org/apache/derby/iapi/error/StandardException.java,309,"return new StandardException(messageID, t, oa);"
java/engine/org/apache/derby/iapi/error/StandardException.java,681,public static SQLWarning newWarning(String messageId) {
java/engine/org/apache/derby/iapi/error/StandardException.java,683,"return newWarningCommon( messageId, (Object[]) null );"
java/engine/org/apache/derby/iapi/error/StandardException.java,687,"public static SQLWarning newWarning(String messageId, Object a1) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,689,Object[] oa = new Object[] {a1};
java/engine/org/apache/derby/iapi/error/StandardException.java,691,"return newWarningCommon( messageId, oa );"
java/engine/org/apache/derby/iapi/error/StandardException.java,694,"public static SQLWarning newWarning(String messageId, Object a1, Object a2) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,696,"Object[] oa = new Object[] {a1, a2};"
java/engine/org/apache/derby/iapi/error/StandardException.java,698,"return newWarningCommon( messageId, oa );"
java/engine/org/apache/derby/iapi/error/StandardException.java,701,"private	static	SQLWarning	newWarningCommon( String messageId, Object[] oa )"
java/engine/org/apache/derby/iapi/error/StandardException.java,632,if (textMessage == null)
java/engine/org/apache/derby/iapi/error/StandardException.java,633,"textMessage = MessageService.getCompleteMessage(getMessageId(), getArguments());"
java/engine/org/apache/derby/iapi/error/StandardException.java,703,"String		message = MessageService.getCompleteMessage(messageId, oa);"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4451,"return TransactionResourceImpl.wrapInSQLException((SQLException) null, thrownException);"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4463,this.owningStmt = owningStmt;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4464,this.localConn = owningStmt.getEmbedConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3679,"ps.execute(act, true, 0L);"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3755,"org.apache.derby.iapi.sql.ResultSet rs = ps.execute(act, true, 0L);"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3820,"ps.execute(act, true, 0L);"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3684,} catch (StandardException t) {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3769,} catch (StandardException t) {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3831,} catch (StandardException t) {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4010,if (wasNull = dvd.isNull())
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4022,"return new EmbedBlob(dvd, getEmbedConnection());"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4062,if (wasNull = dvd.isNull())
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4622,try {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,639,isClosed = true;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4342,isClosed = true;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,268,final ExecutionFactory factory = conn.getLanguageConnection().
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,421,LanguageConnectionContext lcc = getEmbedConnection().getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,625,LanguageConnectionContext lcc = getEmbedConnection().getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,345,"return wrapInSQLException((SQLException) null, thrownException);"
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,358,"throw wrapInSQLException((SQLException) null, t);"
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,364,"public static final SQLException wrapInSQLException(SQLException sqlException, Throwable thrownException) {"
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,367,return sqlException;
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,374,nextSQLException = (SQLException) thrownException;
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,376,else if (thrownException instanceof StandardException) {
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,406,return nextSQLException;
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,336,boolean isShutdown = cleanupOnError(thrownException);
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,349,if (cm!=null) { // something to let us cleanup?
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,350,cm.cleanupOnError(t);
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,417,boolean cleanupOnError(Throwable e)
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,422,return cm.cleanupOnError(e);
java/engine/org/apache/derby/impl/jdbc/Util.java,220,"new Object[] {name, msg}, ExceptionSeverity.NO_APPLICABLE_SEVERITY, t);"
java/engine/org/apache/derby/impl/jdbc/Util.java,89,return exceptionFactory.getSQLException (
java/engine/org/apache/derby/impl/jdbc/Util.java,161,"static SQLException newException(String messageID, Object a1,"
java/engine/org/apache/derby/impl/jdbc/Util.java,162,"Object a2, Object a3) {"
java/engine/org/apache/derby/impl/jdbc/Util.java,163,"return newEmbedSQLException(messageID, new Object[] {a1, a2, a3},"
java/engine/org/apache/derby/impl/jdbc/Util.java,164,StandardException.getSeverityFromIdentifier(messageID));
java/engine/org/apache/derby/impl/jdbc/Util.java,168,public static SQLException generateCsSQLException(String error) {
java/engine/org/apache/derby/impl/jdbc/Util.java,203,return exceptionFactory.getSQLException(
java/engine/org/apache/derby/impl/jdbc/Util.java,87,String message = MessageService.getCompleteMessage
java/engine/org/apache/derby/impl/jdbc/Util.java,88,"(messageId, args);"
java/engine/org/apache/derby/impl/jdbc/Util.java,195,static SQLException generateCsSQLException(
java/engine/org/apache/derby/impl/jdbc/Util.java,196,"String error, Object arg1, Throwable t) {"
java/engine/org/apache/derby/impl/jdbc/Util.java,198,"new Object[] {arg1},"
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,767,TransactionResourceImpl.wrapInSQLException(
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,768,"(SQLException) null, se));"
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,735,if (sqlstate == null) {
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,737,if (message != null)
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,738,xae = new XAException(message);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,739,else
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,740,xae = new XAException(XAException.XAER_RMERR);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,741,} else if (sqlstate.equals(StandardException.getSQLStateFromIdentifier(
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,743,xae = new XAException(XAException.XAER_DUPID);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,746,xae = new XAException(XAException.XA_RBPROTO);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,748,xae = new XAException(XAException.XA_RBDEADLOCK);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,750,xae = new XAException(XAException.XA_RBTIMEOUT);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,751,else if (message != null)
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,752,xae = new XAException(message);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,754,xae = new XAException(XAException.XAER_RMERR);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,92,inDoubtCM.cleanupOnError(StandardException.closeException());
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,98,inDoubtCM.cleanupOnError(se);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,388,inDoubtCM.cleanupOnError(StandardException.closeException());
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,394,inDoubtCM.cleanupOnError(se);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,438,inDoubtCM.cleanupOnError(StandardException.closeException());
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,444,inDoubtCM.cleanupOnError(se);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,402,throw new XAException(tranState.isPrepared
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,403,? XAException.XAER_NOTA
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,404,: XAException.XAER_PROTO);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,598,con.realConnection.getLanguageConnection().
java/client/org/apache/derby/client/am/SqlException.java,255,this.sqlca_ = sqlca;
java/client/org/apache/derby/client/am/SqlException.java,413,if (sqlca_ == null) {
java/client/org/apache/derby/client/am/SqlException.java,414,return sqlstate_;
java/client/org/apache/derby/client/am/SqlException.java,415,} else {
java/client/org/apache/derby/client/am/SqlException.java,416,return sqlca_.getSqlState();
java/client/org/apache/derby/client/am/SqlException.java,426,if (sqlca_ == null) {
java/client/org/apache/derby/client/am/SqlException.java,427,return errorcode_;
java/client/org/apache/derby/client/am/SqlException.java,428,} else {
java/client/org/apache/derby/client/am/SqlException.java,429,return sqlca_.getSqlCode();
java/client/org/apache/derby/client/am/SqlException.java,493,"return new SqlException(logWriter, sqlca_); // server error"
java/client/org/apache/derby/client/am/SqlException.java,288,protected void setThrowable(Throwable throwable)
java/client/org/apache/derby/client/am/SqlException.java,351,if (JVMInfo.JDK_ID >= JVMInfo.J2SE_14 )
java/client/org/apache/derby/client/am/SqlException.java,353,sqle.initCause(this);
java/client/org/apache/derby/client/am/SqlException.java,210,"public SqlException (LogWriter logwriter,"
java/client/org/apache/derby/client/am/SqlException.java,211,"ClientMessageId msgid, Throwable cause) {"
java/client/org/apache/derby/client/am/SqlException.java,212,"this (logwriter, msgid, (Object[])null, cause);"
java/client/org/apache/derby/client/am/SqlException.java,346,getErrorCode());
java/client/org/apache/derby/client/am/Sqlca.java,34,private String sqlErrmc_;       // A string with all error tokens delimited by sqlErrmcDelimiter
java/client/org/apache/derby/client/am/Sqlca.java,35,protected String[] sqlErrmcTokens_; // A string array with each element
java/client/org/apache/derby/client/am/Sqlca.java,52,"private static final String sqlErrmcDelimiter__ = "";"";"
java/client/org/apache/derby/client/am/Sqlca.java,59,private String cachedMessage;
java/client/org/apache/derby/client/am/Sqlca.java,80,if (sqlErrmcTokens_ == null) {
java/client/org/apache/derby/client/am/Sqlca.java,81,getSqlErrmcTokens();
java/client/org/apache/derby/client/am/Sqlca.java,86,if (sqlErrmcTokens_ == null) {
java/client/org/apache/derby/client/am/Sqlca.java,91,if (sqlErrmcTokens_.length == 0) {
java/client/org/apache/derby/client/am/Sqlca.java,99,for (indx = 0; indx < sqlErrmcTokens_.length - 1; indx++) {
java/client/org/apache/derby/client/am/Sqlca.java,100,buffer.append(sqlErrmcTokens_[indx]);
java/client/org/apache/derby/client/am/Sqlca.java,104,buffer.append(sqlErrmcTokens_[indx]);
java/client/org/apache/derby/client/am/Sqlca.java,111,synchronized public String[] getSqlErrmcTokens() {
java/client/org/apache/derby/client/am/Sqlca.java,112,if (sqlErrmcTokens_ != null) {
java/client/org/apache/derby/client/am/Sqlca.java,113,return sqlErrmcTokens_;
java/client/org/apache/derby/client/am/Sqlca.java,173,synchronized public String getMessage() throws SqlException {
java/client/org/apache/derby/client/am/Sqlca.java,175,if (cachedMessage != null) {
java/client/org/apache/derby/client/am/Sqlca.java,176,return cachedMessage;
java/client/org/apache/derby/client/am/Sqlca.java,180,return getUnformattedMessage();
java/client/org/apache/derby/client/am/Sqlca.java,189,"cs.setIntX(1, getSqlCode());"
java/client/org/apache/derby/client/am/Sqlca.java,191,"cs.setShortX(2, (short) ((getSqlErrmc() != null) ? getSqlErrmc().length() : 0));"
java/client/org/apache/derby/client/am/Sqlca.java,193,"cs.setStringX(3, getSqlErrmc());"
java/client/org/apache/derby/client/am/Sqlca.java,206,"cs.setStringX(12, getSqlState());"
java/client/org/apache/derby/client/am/Sqlca.java,223,cachedMessage = message;
java/client/org/apache/derby/client/am/Sqlca.java,228,return getUnformattedMessage();
java/client/org/apache/derby/client/am/Sqlca.java,242,public synchronized String getJDBCMessage() {
java/client/org/apache/derby/client/am/Sqlca.java,246,return getMessage();
java/client/org/apache/derby/client/am/Sqlca.java,251,return getUnformattedMessage();
java/client/org/apache/derby/client/am/Sqlca.java,254,return getUnformattedMessage();
java/client/org/apache/derby/client/am/Sqlca.java,258,private String getUnformattedMessage() {
java/client/org/apache/derby/client/am/Sqlca.java,259,"return ""DERBY SQL error: SQLCODE: "" + getSqlCode() + "", SQLSTATE: "" + getSqlState() + "", SQLERRMC: "" + getSqlErrmc();"
java/client/org/apache/derby/client/am/Sqlca.java,294,private String[] processSqlErrmcTokens(byte[] tokenBytes) {
java/client/org/apache/derby/client/am/Sqlca.java,296,return null;
java/client/org/apache/derby/client/am/Sqlca.java,302,return new String[0];
java/client/org/apache/derby/client/am/Sqlca.java,307,java.io.ByteArrayOutputStream buffer = new java.io.ByteArrayOutputStream();
java/client/org/apache/derby/client/am/Sqlca.java,308,java.util.LinkedList tokens = new java.util.LinkedList();
java/client/org/apache/derby/client/am/Sqlca.java,311,for (int index = 0; index < length - 1; index++) {
java/client/org/apache/derby/client/am/Sqlca.java,314,if (tokenBytes[index] != -1)  // -1 is the delimiter '\xFF'
java/client/org/apache/derby/client/am/Sqlca.java,316,buffer.write(tokenBytes[index]);
java/client/org/apache/derby/client/am/Sqlca.java,320,else {
java/client/org/apache/derby/client/am/Sqlca.java,321,"tokens.add(bytes2String(buffer.toByteArray(), 0, buffer.size()));"
java/client/org/apache/derby/client/am/Sqlca.java,322,buffer.reset();
java/client/org/apache/derby/client/am/Sqlca.java,326,int lastIndex = length - 1;
java/client/org/apache/derby/client/am/Sqlca.java,328,if (tokenBytes[lastIndex] != -1) {
java/client/org/apache/derby/client/am/Sqlca.java,330,buffer.write(tokenBytes[lastIndex]);
java/client/org/apache/derby/client/am/Sqlca.java,332,"tokens.add(bytes2String(buffer.toByteArray(), 0, buffer.size()));"
java/client/org/apache/derby/client/am/Sqlca.java,336,else {
java/client/org/apache/derby/client/am/Sqlca.java,338,if (lastIndex != 0) {
java/client/org/apache/derby/client/am/Sqlca.java,339,"tokens.add(bytes2String(buffer.toByteArray(), 0, buffer.size()));"
java/client/org/apache/derby/client/am/Sqlca.java,342,"tokens.add("""");"
java/client/org/apache/derby/client/am/Sqlca.java,346,String[] tokenStrings = new String[tokens.size()];
java/client/org/apache/derby/client/am/Sqlca.java,348,java.util.Iterator iterator = tokens.iterator();
java/client/org/apache/derby/client/am/Sqlca.java,349,for (int i = 0; iterator.hasNext(); i++) {
java/client/org/apache/derby/client/am/Sqlca.java,350,tokenStrings[i] = (String) iterator.next();
java/client/org/apache/derby/client/am/Sqlca.java,353,return tokenStrings;
java/client/org/apache/derby/client/am/Sqlca.java,355,return null;
java/client/org/apache/derby/client/am/Sqlca.java,101,buffer.append(sqlErrmcDelimiter__);
java/client/org/apache/derby/client/am/ExceptionFormatter.java,39,java.lang.Throwable throwable = null;
java/client/org/apache/derby/client/am/ExceptionFormatter.java,40,try {
java/client/org/apache/derby/client/am/ExceptionFormatter.java,41,throwable = ((Diagnosable) e).getThrowable();
java/client/org/apache/derby/client/am/ExceptionFormatter.java,42,} catch (java.lang.NoSuchMethodError doNothing) {
java/client/org/apache/derby/client/am/SqlWarning.java,101,if (JVMInfo.JDK_ID >= JVMInfo.J2SE_14 )
java/client/org/apache/derby/client/am/SqlWarning.java,103,sqlw.initCause(this);
java/client/org/apache/derby/client/am/SqlWarning.java,116,sqlw.setNextException(
java/client/org/apache/derby/client/am/SqlWarning.java,117,nextException_ instanceof SqlWarning ?
java/client/org/apache/derby/client/am/SqlWarning.java,118,((SqlWarning)nextException_).getSQLWarning() :
java/client/org/apache/derby/client/am/SqlWarning.java,119,nextException_.getSQLException());
java/client/org/apache/derby/client/am/XaException.java,39,throwable_ = throwable;
java/client/org/apache/derby/client/am/XaException.java,40,if (((org.apache.derby.client.am.Configuration.jreLevelMajor == 1) &&
java/client/org/apache/derby/client/am/XaException.java,41,(org.apache.derby.client.am.Configuration.jreLevelMinor >= 4)) ||
java/client/org/apache/derby/client/am/XaException.java,42,"(org.apache.derby.client.am.Configuration.jreLevelMajor > 1)) { // jre 1.4 or above, init the cause"
java/client/org/apache/derby/client/am/XaException.java,43,initCause(throwable);
java/client/org/apache/derby/client/am/XaException.java,61,throwable_ = throwable;
java/client/org/apache/derby/client/am/XaException.java,62,if (((org.apache.derby.client.am.Configuration.jreLevelMajor == 1) &&
java/client/org/apache/derby/client/am/XaException.java,63,(org.apache.derby.client.am.Configuration.jreLevelMinor >= 4)) ||
java/client/org/apache/derby/client/am/XaException.java,64,"(org.apache.derby.client.am.Configuration.jreLevelMajor > 1)) { // jre 1.4 or above, init the cause"
java/client/org/apache/derby/client/am/XaException.java,65,initCause(throwable);
java/client/org/apache/derby/client/am/XaException.java,81,throwable_ = throwable;
java/client/org/apache/derby/client/am/XaException.java,82,if (((org.apache.derby.client.am.Configuration.jreLevelMajor == 1) &&
java/client/org/apache/derby/client/am/XaException.java,83,(org.apache.derby.client.am.Configuration.jreLevelMinor >= 4)) ||
java/client/org/apache/derby/client/am/XaException.java,84,"(org.apache.derby.client.am.Configuration.jreLevelMajor > 1)) { // jre 1.4 or above, init the cause"
java/client/org/apache/derby/client/am/XaException.java,85,initCause(throwable);
java/client/org/apache/derby/client/am/XaException.java,108,"XaException xae = new XaException(logWriter, this.getThrowable(), getMessage()); // client error"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SqlExceptionTest.java,71,assertNull(javae.getCause().getCause());
java/client/org/apache/derby/client/am/Clob.java,110,"if (encoding.equals(""US-ASCII"")) {"
java/client/org/apache/derby/client/am/Clob.java,149,"if (encoding.equals(""US-ASCII"")) {"
java/client/org/apache/derby/client/am/Clob.java,834,"new java.io.InputStreamReader(asciiStream_, ""US-ASCII"");"
java/client/org/apache/derby/client/am/Clob.java,839,"""US-ASCII"", ""CharacterStream"", e);"
java/client/org/apache/derby/client/am/ResultSet.java,3043,"updateColumn(column, agent_.crossConverters_.setObjectFromCharacterStream(resultSetMetaData_.types_[column - 1], x, ""US-ASCII"", length));"
java/client/org/apache/derby/client/am/ResultSet.java,5462,"""US-ASCII"","
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,490,if (logWriter != null)
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,492,synchronized (logWriter) {
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,493,e.printStackTrace(logWriter);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,501,if (cloudscapeLogWriter != null)
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,503,synchronized(cloudscapeLogWriter) {
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,504,e.printStackTrace(cloudscapeLogWriter);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,520,if (logWriter != null)
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,522,synchronized(logWriter) {
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,523,logWriter.println(msg);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,527,if (cloudscapeLogWriter != null)
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,528,synchronized(cloudscapeLogWriter)
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,644,if (mc != null)
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,645,mc.interrupt();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,648,clientThread.interrupt();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,664,((DRDAConnThread)threadList.get(i)).close();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,665,((DRDAConnThread)threadList.get(i)).interrupt();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,635,shutdownSync.wait();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,147,protected static String att_srvclsnm;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,150,protected static String att_extnam;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,151,protected static String att_srvrlslv;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,152,protected static String prdId;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,153,protected static byte[] prdIdBytes_;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,170,"protected final static int [] MGR_LEVELS = { 7, // AGENT"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,186,protected PrintWriter logWriter;                        // console
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,187,protected PrintWriter cloudscapeLogWriter;              // derby.log
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,245,protected boolean debugOutput = false;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,269,public String clientLocale;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3503,protected void setClientLocale(String locale)
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,866,writeCommandHeader(COMMAND_TESTCONNECTION);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,867,writeLDString(database);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,868,writeLDString(user);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,869,writeLDString(password);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1050,send();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1033,readResult();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2926,if (msg.startsWith(DRDA_MSG_PREFIX))
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2856,String locMsg = null;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2860,String [] argMsg = new String[args.length];
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3292,else
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2887,locMsg = localLangUtil.getTextMessage(msgProp);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2888,return locMsg;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1604,MessageService.getLocalizedMessage(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/statementJdbc20.java,74,dumpExpectedSQLExceptions(e);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/statementJdbc20.java,81,dumpExpectedSQLExceptions(e);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/statementJdbc20.java,125,dumpExpectedSQLExceptions(e);
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,173,DirContext ctx = new InitialDirContext(env);
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,356,try {
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,357,"initDirContextEnv.put(""com.sun.naming.ldap.trace.ber"","
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,358,"new java.io.FileOutputStream(""CloudLDAP.out""));"
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,359,} catch (java.io.IOException ie) {}
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,392,DirContext ctx = new InitialDirContext(env);
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,752,switch (returnType.getJDBCTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,1055,case java.sql.Types.SMALLINT:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,1056,case java.sql.Types.INTEGER:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,1057,case java.sql.Types.BIGINT:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,1058,case java.sql.Types.REAL:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,1059,case java.sql.Types.DOUBLE:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,758,TypeCompiler tc = getTypeCompiler(returnTypeId);
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,759,requiredType = tc.getCorrespondingPrimitiveTypeName();
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,760,if (!routineInfo.calledOnNullInput() && routineInfo.getParameterCount() != 0)
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,762,promoteName = returnTypeId.getCorrespondingJavaTypeName();
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,765,break;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,1136,default:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,767,requiredType = returnTypeId.getCorrespondingJavaTypeName();
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,1134,break;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,212,qt = (SQLToJavaValueNode) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,193,public void addParms(Vector parameterList) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,832,getCompilerContext().getParameterTypes()[0] = dts;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,384,"public void preprocess(int numTables,"
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,433,"public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)"
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,475,public JavaValueNode remapColumnReferencesToExpressions()
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,587,"public	void generateOneParameter(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,1162,protected int getOrderableVariantType() throws StandardException
java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java,194,serverThread.interrupt();
java/engine/org/apache/derby/iapi/services/context/ContextService.java,560,active.interrupt();
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,109,ValueNode firstNonParameterNode;//The generated method will generate code to call coalesce on this non-parameter argument
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,156,firstNonParameterNode = (ValueNode) argumentsList.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,283,"firstNonParameterNode.generateExpression(acb, mb); //coalesce will be called on this non-parameter argument"
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,415,"printLabel(depth, ""argumentsList: "");"
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,193,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,194,MethodBuilder mb)
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1520,if (lrs.isClosed)
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1521,continue;
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1182,"ResultSet resultsToWrap = ps.execute(a,"
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1183,"false,"
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1184,timeoutMillis);
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1268,} catch (Throwable t) {
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1382,void clearResultSets() throws SQLException {
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,129,lcc = getEmbedConnection().getLanguageConnection();
java/engine/org/apache/derby/impl/sql/execute/CallStatementResultSet.java,69,close();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,862,if (newCost < 0.0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,863,newCost = 0.0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,599,int nextOptimizable = 0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,761,if (nextOptimizable < numOptimizables)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,763,Optimizable nextOpt =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,764,optimizableList.getOptimizable(nextOptimizable);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,765,if (! (nextOpt.legalJoinOrder(assignedTableMap)))
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,767,if (optimizerTrace)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,769,"trace(SKIPPING_JOIN_ORDER, nextOptimizable, 0, 0.0, null);"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,871,if (joinPosition == 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,873,if (outermostCostEstimate != null)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,875,newCost = outermostCostEstimate.getEstimatedCost();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,877,else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,879,newCost = 0.0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,883,currentCost.setCost(
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,884,"newCost,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,885,"prevRowCount,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,886,prevSingleScanRowCount);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,897,if (requiredRowOrdering != null)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,899,if (pullMe.considerSortAvoidancePath())
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,901,AccessPath ap = pullMe.getBestSortAvoidancePath();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,902,"double	   prevEstimatedCost = 0.0d;"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,913,if (joinPosition == 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,915,prevRowCount = outermostCostEstimate.rowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,916,prevSingleScanRowCount = outermostCostEstimate.singleScanRowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,922,prevEstimatedCost = outermostCostEstimate.getEstimatedCost();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,924,else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,926,CostEstimate localCE =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,927,optimizableList.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,928,getOptimizable(prevPosition).
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,929,getBestSortAvoidancePath().
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,930,getCostEstimate();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,931,prevRowCount = localCE.rowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,932,prevSingleScanRowCount = localCE.singleScanRowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,933,prevEstimatedCost = currentSortAvoidanceCost.getEstimatedCost() -
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,934,ap.getCostEstimate().getEstimatedCost();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,937,currentSortAvoidanceCost.setCost(
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,938,"prevEstimatedCost,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,939,"prevRowCount,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,940,prevSingleScanRowCount);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,949,bestRowOrdering.removeOptimizable(
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,950,pullMe.getTableNumber());
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,958,bestRowOrdering.copy(currentRowOrdering);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1001,proposedJoinOrder[joinPosition] = -1;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,195,int numTablesInQuery)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2512,return 1;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,72,public class OptimizerImpl implements Optimizer
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,75,"DataDictionary			 dDictionary;"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,77,"int						 numTablesInQuery;"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,79,"int						 numOptimizables;"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,84,"protected JBitSet		 assignedTableMap;"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,85,protected OptimizableList optimizableList;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,86,OptimizablePredicateList predicateList;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,87,"JBitSet					 nonCorrelatedTableMap;"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,89,"protected int[]			 proposedJoinOrder;"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,90,"protected int[]					 bestJoinOrder;"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,91,"protected int			 joinPosition;"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,92,"boolean					 desiredJoinOrderFound;"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,112,protected CostEstimateImpl currentCost;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,113,protected CostEstimateImpl currentSortAvoidanceCost;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,114,protected CostEstimateImpl bestCost;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,116,"protected long			 timeOptimizationStarted;"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,117,"protected long			 currentTime;"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,118,"protected boolean		 timeExceeded;"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,125,"protected RequiredRowOrdering	requiredRowOrdering;"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,129,protected CostEstimate sortCost;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,141,protected int maxMemoryPerTable;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,161,protected double timeLimit;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,165,CostEstimate finalCostEstimate;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,185,"protected  OptimizerImpl(OptimizableList optimizableList,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2546,"protected void updateBestPlanMaps(short action,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2633,protected void addScopedPredicatesToList(PredicateList pList)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1427,"retval =  curOpt.nextAccessPath(this,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1428,"(OptimizablePredicateList) null,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1429,currentRowOrdering);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,217,if (numTablesInQuery > 6)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,219,permuteState = READY_TO_JUMP;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,220,firstLookOrder = new int[numOptimizables];
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,222,else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,223,permuteState = NO_JUMP;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,260,ps.rePrepare(getLanguageConnectionContext());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,93,final class GenericActivationHolder implements Activation
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,95,"BaseActivation			ac;"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,649,public Hashtable getParentResultSets()
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,651,return ac.getParentResultSets();
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,421,public boolean closingConnection() throws SQLException {
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,422,notifyClose();
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,101,"EmbedPooledConnection(ReferenceableDataSource ds, String u, String p, boolean requestPassword) throws SQLException"
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,179,final Connection getNewCurrentConnectionHandle() {
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,86,final ReferenceableDataSource dataSource;
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,356,return realConnection.getLanguageConnection().isIsolationLevelSetUsingSQLorJDBC();
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,368,realConnection.getLanguageConnection().resetIsolationLevelFlagUsedForSQLandJDBC();
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1042,for (int index = 0; index < numTables; index++)
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1044,if ((index != tableNumber) && referencedTableMap.get(index))
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1046,dependencyMap.set(index);
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,110,"private	FormatableHashtable	compileTimeConstants;"
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1532,if ((key == null) || (compileTimeConstants == null))
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1517,return ExecutionContext.CS_TO_JDBC_ISOLATION_LEVEL_MAP[getCompilerContext().getScanIsolationLevel()];
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1155,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1156,MethodBuilder mb)
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1121,"return Main.getTextMessage(""SIF01.V"", cls, se.getMessage());"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,463,"private static final String USAGESTRINGPARTA = MAINUSAGESTRING + "" [ [ "" + EMBEDDED + "" ][ "" + NET + "" ][ "" + CLIENT + ""] [ "" + DB2DRIVER + "" ] [ "" + TOOLS + "" ] [ "";"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1129,return formatURL(result);
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1222,"result = ""IOException"";"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,330,if ((bcps.length == baseColumnPositions.length) &&
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,331,(irg.isUnique() || !unique) &&
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,332,indexType.equals(irg.indexType()))
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,341,"if (j == baseColumnPositions.length)	// duplicate"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,359,indexRowGenerator = cd.getIndexDescriptor();
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,363,duplicate = true;
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,373,if (duplicate)
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,424,if (! duplicate)
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,537,if (duplicate)
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,651,ConglomerateDescriptor cgd =
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,652,"ddg.newConglomerateDescriptor(conglomId, indexName, true,"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,653,"indexRowGenerator, isConstraint,"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,654,"conglomerateUUID, td.getUUID(), sd.getUUID() );"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,656,"dd.addDescriptor(cgd, sd, DataDictionary.SYSCONGLOMERATES_CATALOG_NUM, false, tc);"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,660,ConglomerateDescriptorList cdl = td.getConglomerateDescriptorList();
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,661,cdl.add(cgd);
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,671,"new StatisticsDescriptor(dd, dd.getUUIDFactory().createUUID(),"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,672,"cgd.getUUID(), td.getUUID(), ""I"", new StatisticsImpl(numRows, c[i]),"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,673,i + 1);
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,453,"assertSQLState(sqlState, se);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java,38,"public BrokeredCallableStatement(BrokeredStatementControl control, int jdbcLevel, String sql) throws SQLException {"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java,39,"super(control, jdbcLevel, sql);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement30.java,38,"public BrokeredCallableStatement30(BrokeredStatementControl control, int jdbcLevel, String sql) throws SQLException {"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement30.java,39,"super(control, jdbcLevel, sql);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,37,"public BrokeredCallableStatement40(BrokeredStatementControl control, int jdbcLevel, String sql) throws SQLException{"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,38,"super(control,jdbcLevel,sql);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,35,public class BrokeredCallableStatement40 extends  BrokeredCallableStatement30{
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,311,"throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,312,interfaces);
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,450,"return new BrokeredStatement(statementControl, getJDBCLevel());"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,56,private boolean isClosed;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,379,throw Util.noCurrentConnection();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java,192,"return new BrokeredPreparedStatement30(statementControl, getJDBCLevel(), sql, generatedKeys);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java,195,"return new BrokeredCallableStatement30(statementControl, getJDBCLevel(), sql);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,304,"return new BrokeredStatement40(statementControl, getJDBCLevel());"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,312,"return new BrokeredPreparedStatement40(statementControl, getJDBCLevel(), sql, generatedKeys);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,320,"return new BrokeredCallableStatement40(statementControl, getJDBCLevel(), sql);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,40,public class BrokeredConnection40 extends BrokeredConnection30 {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,43,public BrokeredConnection40(BrokeredConnectionControl control) {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,72,throw Util.noCurrentConnection();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,285,throw Util.noCurrentConnection();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,376,"throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,377,interfaces);
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java,44,"public BrokeredPreparedStatement(BrokeredStatementControl control, int jdbcLevel, String sql) throws SQLException"
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java,46,"super(control, jdbcLevel);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement30.java,33,"public BrokeredPreparedStatement30(BrokeredStatementControl control, int jdbcLevel, String sql, Object generatedKeys) throws SQLException {"
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement30.java,34,"super(control, jdbcLevel, sql);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,35,"public BrokeredPreparedStatement40(BrokeredStatementControl control, int jdbcLevel, String sql, Object generatedKeys) throws SQLException {"
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,36,"super(control, jdbcLevel, sql,generatedKeys);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,111,"throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,112,interfaces);
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,64,"BrokeredStatement(BrokeredStatementControl control, int jdbcLevel) throws SQLException"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,491,if (jdbcLevel == 2)
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,492,"newStatement = conn.createStatement(resultSetType, resultSetConcurrency);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,493,else
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,494,"newStatement = conn.createStatement(resultSetType, resultSetConcurrency,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,569,protected boolean isClosed() throws SQLException {
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,575,throw Util.notImplemented();
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,589,"throw Util.generateCsSQLException(SQLState.ALREADY_CLOSED,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,590,"""Statement"");"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,39,"BrokeredStatement40(BrokeredStatementControl control, int jdbcLevel)"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,41,"super(control, jdbcLevel);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,71,"throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,72,interfaces);
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,925,"throw StandardException.newException(SQLState.LANG_DB2_ADD_UNIQUE_OR_PRIMARY_KEY_ON_NULL_COLS, colName);"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,369,public int genColumnInfos(ColumnInfo[] colInfos)
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,380,"null, null, null, null, null,"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,555,ResultColumnList rcl = table.getResultColumns();
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,556,"int		numReferenced = rcl.countReferencedColumns();"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,557,"int[]	checkColumnReferences = new int[numReferenced];"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,559,"rcl.recordColumnReferences(checkColumnReferences, 1);"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,560,cdn.setCheckColumnReferences(checkColumnReferences);
java/engine/org/apache/derby/impl/sql/compile/VerifyAggregateExpressionsVisitor.java,86,throw StandardException.newException(SQLState.LANG_INVALID_GROUPED_SELECT_LIST);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,1514,false);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,1555,false);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,3484,dvf.getDataValue(false);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,3486,dvf.getDataValue((Object) null);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5377,dvf.getDataValue(conglomerateNumber);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8179,dvf.getDataValue(aiValue));
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,10310,"keyRow,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,3996,"(ScanQualifier [][])null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,10312,"ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,3998,"(TupleDescriptor)null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,3999,"statDescriptorList, false);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7563,else
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,769,public void stop()
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,403,public boolean readOnlyUpgrade;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8585,routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8749,routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8724,routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8825,routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9768,routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6972,boolean baseRowExists =
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6975,columnToUpdate.set(columnNum - 1); // current value.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6973,"heapCC.fetch(rl, row.getRowArray(), columnToRead, wait);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5314,getDescriptorViaIndex(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5315,"SYSCONGLOMERATESRowFactory.SYSCONGLOMERATES_INDEX1_ID,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5316,"keyRow,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5433,"(ScanQualifier [][]) null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5318,"ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5435,"(TupleDescriptor) null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5320,"cdl,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5321,false);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,3340,"updCols = new int[]	{SYSSTATEMENTSRowFactory.SYSSTATEMENTS_VALID} ;"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,1086,clearCaches();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,693,"loadDictionaryTables(bootingTC, ddg, startParams);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,2993,public SPSDescriptor getUncachedSPSDescriptor(TableKey stmtKey)
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6137,"protected void loadDictionaryTables(TransactionController tc,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6138,"DataDescriptorGenerator ddg,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6143,"loadCatalogs(ddg, coreInfo);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6159,"public void loadCatalogs(DataDescriptorGenerator ddg, TabInfoImpl[] catalogArray)"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6177,if (numIndexes > 0)
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6179,for (indexCtr = 0; indexCtr < numIndexes; indexCtr++)
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6181,"initSystemIndexVariables(ddg, catalog, indexCtr);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6474,"public	void	makeCatalog( TabInfoImpl					ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7036,"initSystemIndexVariables(ddg, ti, indexNumber);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7108,"public void initSystemIndexVariables(DataDescriptorGenerator ddg,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7109,"TabInfoImpl ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7110,int indexNumber)
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7833,if (numIndexes > 0)
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7835,DataDescriptorGenerator ddg = getDataDescriptorGenerator();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7837,for (int indexCtr = 0; indexCtr < numIndexes; indexCtr++)
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7839,"initSystemIndexVariables(ddg, ti, indexCtr);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7858,"public	void	faultInTabInfo( TabInfoImpl ti )"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9197,"Types.VARCHAR, Limits.DB2_JCC_MAX_EXCEPTION_PARAM_LENGTH),"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,151,ConstantAction csca
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,154,try {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,155,csca.executeConstantAction(activation);
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,156,} catch (StandardException se) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,157,if (se.getMessageId()
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,158,.equals(SQLState.LANG_OBJECT_ALREADY_EXISTS)) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,161,} else {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,162,throw se;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,284,} else if (statPerm instanceof StatementSchemaPermission
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,285,|| statPerm instanceof StatementRoutinePermission)
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,243,"Activation activation, Dependent dependent, UUID refTableUUID)"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,244,throws StandardException
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,336,break;
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,627,(action != DependencyManager.SET_TRIGGERS_DISABLE)
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,205,return referencedColumns;
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,460,"""referencedColumns: "" + referencedColumns + ""\n"" +"
java/engine/org/apache/derby/iapi/types/SQLBinary.java,1019,"""XX-RESOLVE-XX"","
java/engine/org/apache/derby/iapi/types/SQLBinary.java,510,public final Object cloneObject()
java/engine/org/apache/derby/iapi/types/SQLBinary.java,513,return getClone();
java/engine/org/apache/derby/iapi/types/SQLBinary.java,524,public final DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLChar.java,322,return (tmpString == null) ?
java/engine/org/apache/derby/iapi/types/SQLChar.java,323,0 : tmpString.length();
java/engine/org/apache/derby/iapi/types/SQLChar.java,382,"""java.sql.String"");"
java/engine/org/apache/derby/iapi/types/SQLChar.java,920,public Object cloneObject()
java/engine/org/apache/derby/iapi/types/SQLChar.java,934,public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLChar.java,1153,if( micros > 0)
java/engine/org/apache/derby/iapi/types/SQLChar.java,2768,this.localeFinder = localeFinder;
java/engine/org/apache/derby/iapi/types/SQLChar.java,1156,String microsStr = Integer.toString( micros);
java/engine/org/apache/derby/iapi/types/SQLChar.java,1163,sb.append( microsStr);
java/engine/org/apache/derby/impl/sql/execute/CreateConstraintConstantAction.java,357,"storeConstraintDependenciesOnPrivileges(activation, conDesc, referencedConstraint.getTableId());"
java/engine/org/apache/derby/impl/services/daemon/SingleThreadDaemonFactory.java,48,"Thread daemonThread = Monitor.getMonitor().getDaemonThread(daemon, name, false);"
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,272,"Thread dontGCthread = getDaemonThread(dontGC, ""antiGC"", true);"
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,1282,if( moduleList.contains( key))
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,1841,if (cm != previousCM)
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,1842,cm.cleanupOnError(StandardException.closeException());
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2088,public void setThreadPriority(int priority) {
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2090,Thread t = Thread.currentThread();
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2092,if (t.getThreadGroup() == daemonGroup) {
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2093,t.setPriority(priority);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5614,sqlerrmc = buildTokenizedSqlerrmc((EmbedSQLException) se);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5666,private String buildTokenizedSqlerrmc(EmbedSQLException se) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5670,String messageId = se.getMessageId();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5672,Object[] args = se.getArguments();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5673,for (int i = 0; args != null &&  i < args.length; i++)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5674,sqlerrmc += args[i] + SQLERRMC_TOKEN_DELIMITER;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5675,sqlerrmc += messageId;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5676,se = (EmbedSQLException) se.getNextException();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6928,"nullable,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7040,writer.writeByte(CodePoint.NULLDATA);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4512,PreparedStatement ps = stmt.getPreparedStatement();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,3837,writer.endDdm();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,3838,writer.endDdmAndDss();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5479,if (SanityManager.DEBUG && server.debugOutput && sqlcode < 0) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5611,se = Util.getExceptionFactory().getArgumentFerry( se );
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5679,"sqlerrmc += SystemProcedures.SQLERRMC_MESSAGE_DELIMITER + se.getSQLState() + "":"";"
java/engine/org/apache/derby/impl/sql/execute/ConstraintConstantAction.java,316,"rs = ps.execute(lcc, false, 0L);"
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,170,"ResultSet rs = ps.execute(spsActivation, false, 0L);"
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,92,"CursorResultSet 	ars"
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,41,public abstract class GenericTriggerExecutor
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,43,"protected InternalTriggerExecutionContext	tec;"
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,44,"protected TriggerDescriptor					triggerd;"
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,45,"protected Activation						activation;"
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,46,"protected LanguageConnectionContext			lcc;"
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,100,whenClause = triggerd.getWhenClauseSPS();
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,1048,if (accessPath == null)
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,748,childResult = (FromTable) childResult.optimize(
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,799,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,800,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,608,public FromTable getParent()
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,759,(RequiredRowOrdering) null);
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,94,return defaultText;
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,266,if (numCheckConstraints > 0)
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,276,FromList fromList = (FromList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,277,"C_NodeTypes.FROM_LIST,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,278,"getNodeFactory().doJoinOrderOptimization(),"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,279,getContextManager());
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,280,FromBaseTable table = (FromBaseTable)
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,281,getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,282,"C_NodeTypes.FROM_BASE_TABLE,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,283,"getObjectName(),"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,284,"null,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,285,"null,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,286,"null,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,287,getContextManager());
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,288,fromList.addFromTable(table);
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,289,"fromList.bindTables(dd,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,290,(FromList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,291,"C_NodeTypes.FROM_LIST,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,292,"getNodeFactory().doJoinOrderOptimization(),"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,293,getContextManager()));
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,294,tableElementList.appendNewColumnsToRCL(table);
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,299,tableElementList.bindAndValidateCheckConstraints(fromList);
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,258,if (numCheckConstraints > 0)
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,290,tableElementList.bindAndValidateCheckConstraints(fromList);
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,348,DataTypeDescriptor dts = colInfos[i].dataType;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1363,return (TableName) getNodeFactory().getNode
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1368,getContextManager()
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,537,public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,80,public abstract class QueryTreeNode implements Visitable
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1627,"public void setRefActionInfo(long fkIndexConglomId,"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,667,return getCompilerContext().getParameterTypes();
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,631,protected void generate(
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,632,"ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,633,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1480,SchemaDescriptor sd = null;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1481,boolean isCurrent = false;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1482,boolean isCompilation = false;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1483,if (schemaName == null) {
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1550,CompilerContext cc = getCompilerContext();
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1486,sd = cc.getCompilationSchema();
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1488,if (sd == null) {
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1491,sd = getLanguageConnectionContext().getDefaultSchema();
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1493,isCurrent = true;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1495,cc.setCompilationSchema(sd);
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,282,else
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1499,isCompilation = true;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1501,schemaName = sd.getSchemaName();
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1504,DataDictionary dataDictionary = getDataDictionary();
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1505,"SchemaDescriptor sdCatalog = dataDictionary.getSchemaDescriptor(schemaName,"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1506,"getLanguageConnectionContext().getTransactionCompile(), raiseError);"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1508,if (isCurrent || isCompilation) {
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1514,if (sdCatalog != null && sdCatalog.getUUID() != null)
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1518,if (!sdCatalog.getUUID().equals(sd.getUUID()))
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1520,if (isCurrent)
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1521,getLanguageConnectionContext().setDefaultSchema(sdCatalog);
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1522,getCompilerContext().setCompilationSchema(sdCatalog);
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1525,else
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1528,sd.setUUID(null);
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1529,sdCatalog = sd;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1532,return sdCatalog;
java/tools/org/apache/derby/impl/tools/dblook/DB_Table.java,152,"colDef.append("" DEFAULT "");"
java/tools/org/apache/derby/impl/tools/dblook/DB_Table.java,153,colDef.append(rs.getString(2));
java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java,76,"public void recover(RawStoreFactory rawStoreFactory,"
java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java,77,"DataFactory dataFactory,"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,783,"rsf,"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1095,"tf.rollbackAllTransactions(recoveryTransaction, rsf);"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1134,tf.handlePreparedXacts(rsf);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1186,"if (needCheckpoint && !checkpoint(rsf, df, tf, false))"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1378,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1832,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3665,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3723,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,4656,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,5164,public final Object run() throws IOException {
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,5175,return activeFile.getRandomAccessFile(activePerms);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,5181,return ReuseFactory.getBoolean(activeFile.mkdirs());
java/engine/org/apache/derby/impl/store/raw/log/ReadOnly.java,82,"public void recover(RawStoreFactory rawStoreFactory,"
java/engine/org/apache/derby/impl/store/raw/log/ReadOnly.java,83,"DataFactory dataFactory,"
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,116,"ResultSet getInsertResultSet(NoPutResultSet source,"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,510,"bindCheckConstraint(nodeFactory,"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,539,"ValueNode			checkConstraint"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,544,"TableName	targetTableName ="
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,545,"makeTableName(targetTableDescriptor.getSchemaName(),"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,546,targetTableDescriptor.getName());
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,571,getContextManager());
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,579,getContextManager());
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,584,checkConstraint = checkConstraint.bindExpression(
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,801,continue;
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,191,"protected void generateCodeForTemporaryTable(ActivationClassBuilder acb, MethodBuilder mb)"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1561,"public void setRefActionInfo(long fkIndexConglomId,"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,498,"generateTriggerInfo(relevantTriggers, targetTableDescriptor, changedColumnIds);"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,897,private void generateTriggerInfo
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,899,"GenericDescriptorList		triggerList,"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,900,"TableDescriptor				td,"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,901,"int[]						changedCols"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,903,throws StandardException
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,905,if ((triggerList != null) && (triggerList.size() > 0))
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,907,"triggerInfo = new TriggerInfo(td, changedCols, triggerList);"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,804,"TableDescriptor	pktd = refcd.getTableDescriptor();"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,805,UUID pkuuid = refcd.getIndexId();
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,806,ConglomerateDescriptor pkIndexConglom = pktd.getConglomerateDescriptor(pkuuid);
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,808,TableDescriptor refTd = cd.getTableDescriptor();
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,778,"mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, ""getInsertResultSet"", ClassName.ResultSet, 2);"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,752,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,753,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,163,this.expression = (ValueNode) arg2;
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,176,this.expression = (ValueNode) arg2;
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,194,this.expression = (ValueNode) arg2;
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,188,this.expression = (ValueNode) arg2;
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,580,"expression = expression.bindExpression(fromList, subqueryList,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,581,aggregateVector);
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,812,"expression = expression.preprocess(numTables, outerFromList,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,814,outerPredicateList);
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1515,expression = (ValueNode)expression.accept(v);
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,880,"public void generateExpression(ExpressionClassBuilder ecb,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,931,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,884,"expression.generateExpression(ecb, mb);"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,89,"public ResultSet getInsertResultSet(NoPutResultSet source,"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,95,"return new InsertResultSet(source, checkGM, activation );"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,178,"return new UpdateResultSet(source, checkGM, activation);"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,207,"return new UpdateResultSet(source, checkGM, activation,"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,241,"constantRestriction, mapRefItem,"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,486,if (checkGM != null)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,225,RowLocation rlClone = (RowLocation) rowLocation.cloneObject();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1633,newRowColArray[i] =
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1634,(DataValueDescriptor) fkInfo.rowLocation.cloneObject();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1630,(templateColArray[fkInfo.colArray[i] - 1]).getClone();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,2153,fullTemplate.getColumn(index + 1).getClone());
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,293,rowHolder.getResultSet());
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,481,tableScan);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,516,getTableScanResultSet(baseTableConglom));
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1103,rowHolder.getResultSet());
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1151,rowHolder.getResultSet());
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,434,if (activation.getAutoGeneratedKeysColumnIndexes() != null)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,435,verifyAutoGeneratedColumnsIndexes(activation.getAutoGeneratedKeysColumnIndexes());
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,436,else  if (activation.getAutoGeneratedKeysColumnNames() != null)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,437,verifyAutoGeneratedColumnsNames(activation.getAutoGeneratedKeysColumnNames());
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,952,columnIndexes = activation.getAutoGeneratedKeysColumnIndexes();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,957,if ( columnIndexes != null) {//use user provided column positions array
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,958,columnIndexes = uniqueColumnPositionArray(columnIndexes);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,959,} else { //prepare array of auto-generated keys for the table since user didn't provide any
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,960,columnIndexes = generatedColumnPositionsArray();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,963,"rd = lcc.getLanguageFactory().getResultDescription(resultDescription,columnIndexes);"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,971,if (activation.getAutoGeneratedKeysResultsetMode())
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,972,"autoGeneratedKeysRowsHolder.insert(getCompactRow(row, columnIndexes));"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,804,if (se.getMessageId().equals(SQLState.LOCK_TIMEOUT))
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,184,"private NumberDataValue				aiCache[];"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,375,aiCache =
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,376,new NumberDataValue[rla.length];
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,383,aiCache[i] = (NumberDataValue)rcd.getType().getNull();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,840,return aiCache[index];
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1329,lcc.autoincrementFlushCache(constants.targetUUID);
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,452,afterColumns);
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,556,"if (hasCheckConstraints(dataDictionary, targetTableDescriptor))"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,595,"hasTriggers ? resultColumnList : afterColumns,"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,818,"generateCheckConstraints( checkConstraints, acb, mb ); // arg 2"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,825,"ClassName.ResultSet, 4);"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,829,"ClassName.ResultSet, 2);"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,873,"ResultColumnList	updateColumnList"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,884,"FormatableBitSet	columnMap = UpdateNode.getUpdateReadMap(baseTable,"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,885,"updateColumnList, conglomVector, relevantCdl, relevantTriggers, needsDeferredProcessing );"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,940,"boolean[]					needsDeferredProcessing"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,497,rowLocationNode = (CurrentRowLocationNode) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,503,rowLocationNode = (NumericConstantNode) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,400,if (ucl == null || (ucl.length == 0))
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,430,"resultSet.getResultColumns().checkColumnUpdateability(ucl,"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,431,currentOfNode.getCursorName());
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,782,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,783,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,140,"this(source, checkGM , activation, activation.getConstantAction(),null);"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,162,"this(source, checkGM , activation,"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,578,source.updateRow(newBaseRow);
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,724,RowLocation updatedRL = (RowLocation) rl.getClone();
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,787,"tableScan.lastCursorKey.setColumn(i, aCol.getClone());"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,814,insertedRowHolder.getResultSet());
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,828,insertedRowHolder.getResultSet());
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,283,runChecker(true); //check for only RESTRICT referential action rule violations
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,288,runChecker(false); //check for all  violations
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,918,void runChecker(boolean restrictCheckOnly) throws StandardException
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,222,for (int i = 0; i < fkInfoArray.length; i++)
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,224,if (fkInfoArray[i].type == FKInfo.REFERENCED_KEY)
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,226,updatingReferencedKey = true;
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,227,if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,229,"SanityManager.ASSERT(constants.deferred, ""updating referenced key but update not deferred, wuzzup?"");"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,232,else
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,234,updatingForeignKey = true;
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,702,double rowCount = tableScan.getEstimatedRowCount();
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,704,if (rowCount > 0.0)
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,706,"rowCount = rowCount / 0.75 + 1.0;	// load factor"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,707,if (rowCount < initCapacity)
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,708,initCapacity = (int) rowCount;
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,843,"tc.OPENMODE_FORUPDATE|tc.OPENMODE_SECONDARY_LOCKED,"
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,411,if (!isAutoincrement)
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,34,import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,123,"An update row, for an update statement which sets n columns; i.e"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,124,"UPDATE tab set x,y,z=.... where ...;"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,125,"has,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,126,"before values of x,y,z after values of x,y,z and rowlocation."
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,127,"need only normalize after values of x,y,z."
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,128,"i.e insead of starting at index = 1, I need to start at index = 4."
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,129,also I needn't normalize the last value in the row.
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,131,startCol = (forUpdate) ? ((numCols - 1)/ 2) + 1 : 1;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,322,if (desiredTypes == null)
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,324,desiredTypes = new DataTypeDescriptor[numCols];
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,325,for (whichCol = 1; whichCol <= numCols; whichCol++)
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,327,DataTypeDescriptor dtd = resultDescription.getColumnDescriptor(whichCol).getType();
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,329,desiredTypes[whichCol - 1] = dtd;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,334,for (whichCol = 1; whichCol <= numCols; whichCol++)
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,336,DataValueDescriptor sourceCol = sourceRow.getColumn(whichCol);
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,341,if (whichCol < startCol)
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,342,normalizedCol = sourceCol;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,344,try {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,345,normalizedCol =
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,346,"desiredTypes[whichCol - 1].normalize(sourceCol,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,347,normalizedRow.getColumn(whichCol));
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,348,} catch (StandardException se) {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,350,if (se.getMessageId().startsWith(SQLState.LANG_NULL_INTO_NON_NULL))
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,352,ResultColumnDescriptor columnDescriptor =
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,353,resultDescription.getColumnDescriptor(whichCol);
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,354,throw
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,355,"StandardException.newException(SQLState.LANG_NULL_INTO_NON_NULL,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,356,columnDescriptor.getName());
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,359,throw se;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,362,"normalizedRow.setColumn(whichCol, normalizedCol);"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,372,public void updateRow (ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,373,source.updateRow(row);
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,323,"dropJDBCMetadataSPSes(tc, false);"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,324,bootingDictionary.createSystemSps(tc);
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,401,bootingDictionary.clearSPSPlans();
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,431,bootingDictionary.readOnlyUpgrade = true;
java/testing/org/apache/derbyTesting/functionTests/util/CanonTestCase.java,47,"final String outputEncoding = ""US-ASCII"";"
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,45,super(script);
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,110,outputEncoding);
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,336,(StoredPage)containerHdl.getPageNoWait(headPageId);
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,342,if (work.incrAttempts() < 3)
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,343,return Serviceable.REQUEUE;
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,344,else
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,345,return Serviceable.DONE;
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,467,ContainerHandle containerHdl = tran.openContainer
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,468,"(containerId, rlock,"
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,469,ContainerHandle.MODE_FORUPDATE |
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,470,ContainerHandle.MODE_LOCK_NOWAIT);
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,115,this.alphabet = alphabet;
java/client/org/apache/derby/client/am/Agent.java,270,"BatchUpdateException bue = new BatchUpdateException(logWriter_,"
java/client/org/apache/derby/client/am/Agent.java,272,updateCounts);
java/client/org/apache/derby/client/am/Agent.java,273,bue.setNextException(accumulatedExceptions.getSQLException());
java/client/org/apache/derby/client/am/Agent.java,274,throw bue;
java/client/org/apache/derby/client/am/BatchUpdateException.java,40,"Object[] args, int[] updateCounts)"
java/engine/org/apache/derby/catalog/TriggerNewTransitionRows.java,85,public ResultSet executeQuery() {
java/engine/org/apache/derby/catalog/TriggerNewTransitionRows.java,86,return resultSet;
java/engine/org/apache/derby/catalog/TriggerOldTransitionRows.java,81,public ResultSet executeQuery() {
java/engine/org/apache/derby/catalog/TriggerOldTransitionRows.java,82,return resultSet;
java/client/org/apache/derby/client/net/NetXAResource.java,181,rc = XAException.XAER_RMERR;
java/client/org/apache/derby/client/net/NetXAResource.java,242,rc = XAException.XAER_RMERR;
java/client/org/apache/derby/client/net/NetXAResource.java,300,throwXAException(XAException.XAER_RMERR);
java/client/org/apache/derby/client/net/NetXAResource.java,382,rc = XAException.XAER_RMERR;
java/client/org/apache/derby/client/net/NetXAResource.java,454,rc = XAException.XAER_RMERR;
java/client/org/apache/derby/client/net/NetXAResource.java,507,rc = XAException.XAER_RMERR;
java/client/org/apache/derby/client/net/NetXAResource.java,566,rc = XAException.XAER_RMERR;
java/client/org/apache/derby/client/net/NetXAResource.java,595,rc = XAException.XAER_RMERR;
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,179,return getDataValue(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,211,return getDataValue(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,243,return getDataValue(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,277,return getDataValue(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,309,return getDataValue(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,372,return getDataValue(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,921,return getDataValue((Object) null);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,949,return getDataValue((Date) null);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,973,return getDataValue((Time) null);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,997,return getDataValue((Timestamp) null);
java/engine/org/apache/derby/impl/sql/catalog/DropDependencyFilter.java,189,trueValue = getDataValueFactory().getDataValue( true );
java/engine/org/apache/derby/impl/sql/catalog/DropDependencyFilter.java,206,falseValue = getDataValueFactory().getDataValue( false );
java/engine/org/apache/derby/impl/sql/catalog/SYSALIASESRowFactory.java,232,"(SYSALIASES_SYSTEMALIAS, dvf.getDataValue(systemAlias));"
java/engine/org/apache/derby/impl/sql/catalog/SYSALIASESRowFactory.java,236,dvf.getDataValue(aliasInfo));
java/engine/org/apache/derby/impl/sql/catalog/SYSCHECKSRowFactory.java,160,dvf.getDataValue(rcd));
java/engine/org/apache/derby/impl/sql/catalog/SYSCOLPERMSRowFactory.java,137,"row.setColumn( COLUMNS_COL_NUM, dvf.getDataValue( (Object) columns));"
java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java,251,dvf.getDataValue(typeDesc));
java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java,255,dvf.getDataValue(defaultSerializable));
java/engine/org/apache/derby/impl/sql/catalog/SYSCONGLOMERATESRowFactory.java,177,"row.setColumn(3, dvf.getDataValue(conglomNumber));"
java/engine/org/apache/derby/impl/sql/catalog/SYSCONGLOMERATESRowFactory.java,188,"row.setColumn(5, dvf.getDataValue(supportsIndex));"
java/engine/org/apache/derby/impl/sql/catalog/SYSCONGLOMERATESRowFactory.java,194,dvf.getDataValue(
java/engine/org/apache/derby/impl/sql/catalog/SYSCONGLOMERATESRowFactory.java,203,"row.setColumn(7, dvf.getDataValue(supportsConstraint));"
java/engine/org/apache/derby/impl/sql/catalog/SYSCONSTRAINTSRowFactory.java,222,"row.setColumn(SYSCONSTRAINTS_REFERENCECOUNT, dvf.getDataValue(referenceCount));"
java/engine/org/apache/derby/impl/sql/catalog/SYSDEPENDSRowFactory.java,171,dvf.getDataValue(dependentBloodhound));
java/engine/org/apache/derby/impl/sql/catalog/SYSDEPENDSRowFactory.java,178,dvf.getDataValue(providerBloodhound));
java/engine/org/apache/derby/impl/sql/catalog/SYSFILESRowFactory.java,159,"row.setColumn(GENERATION_ID_COL_NUM, dvf.getDataValue(generationId));"
java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java,210,"row.setColumn(5, dvf.getDataValue(valid));"
java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java,229,"row.setColumn(10, dvf.getDataValue(preparedStatement));"
java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java,232,"row.setColumn(11, dvf.getDataValue(initiallyCompilable));"
java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java,312,if (((DataDictionaryImpl) dd).readOnlyUpgrade) {
java/engine/org/apache/derby/impl/sql/catalog/SYSSTATISTICSRowFactory.java,169,"row.setColumn(6, dvf.getDataValue(validStat));"
java/engine/org/apache/derby/impl/sql/catalog/SYSSTATISTICSRowFactory.java,170,"row.setColumn(7, dvf.getDataValue(columnCount));"
java/engine/org/apache/derby/impl/sql/catalog/SYSSTATISTICSRowFactory.java,171,"row.setColumn(8, dvf.getDataValue(statisticsObject));"
java/engine/org/apache/derby/impl/sql/catalog/SYSTRIGGERSRowFactory.java,205,"row.setColumn(4, dvf.getDataValue(createTime));"
java/engine/org/apache/derby/impl/sql/catalog/SYSTRIGGERSRowFactory.java,231,"row.setColumn(12, dvf.getDataValue(rcd));"
java/engine/org/apache/derby/impl/sql/catalog/SYSTRIGGERSRowFactory.java,237,"row.setColumn(14, dvf.getDataValue(referencingOld));"
java/engine/org/apache/derby/impl/sql/catalog/SYSTRIGGERSRowFactory.java,240,"row.setColumn(15, dvf.getDataValue(referencingNew));"
java/engine/org/apache/derby/impl/sql/catalog/SYSTRIGGERSRowFactory.java,180,rcd = (refCols != null) ? new
java/engine/org/apache/derby/impl/sql/catalog/SYSTRIGGERSRowFactory.java,181,ReferencedColumnsDescriptorImpl(refCols) : null;
java/engine/org/apache/derby/impl/sql/compile/BooleanConstantNode.java,71,super.setValue(getDataValueFactory().getDataValue(booleanValue));
java/engine/org/apache/derby/impl/sql/compile/BooleanConstantNode.java,201,super.setValue(getDataValueFactory().getDataValue(booleanValue));
java/engine/org/apache/derby/impl/sql/compile/NumericConstantNode.java,87,setValue(getDataValueFactory().getDataValue((Byte) arg1));
java/engine/org/apache/derby/impl/sql/compile/NumericConstantNode.java,109,setValue(getDataValueFactory().getDataValue((Short) arg1));
java/engine/org/apache/derby/impl/sql/compile/NumericConstantNode.java,120,setValue(getDataValueFactory().getDataValue((Long) arg1));
java/engine/org/apache/derby/impl/sql/compile/NumericConstantNode.java,154,setValue(getDataValueFactory().getDataValue((Double) arg1));
java/engine/org/apache/derby/impl/sql/compile/NumericConstantNode.java,165,setValue(
java/engine/org/apache/derby/impl/sql/compile/NumericConstantNode.java,166,getDataValueFactory().getDataValue((Float) arg1));
java/engine/org/apache/derby/impl/sql/compile/SQLBooleanConstantNode.java,81,if ( val == null )
java/engine/org/apache/derby/impl/sql/compile/SQLBooleanConstantNode.java,83,setValue(getTypeServices().getNull() );
java/engine/org/apache/derby/impl/sql/compile/SQLBooleanConstantNode.java,85,else
java/engine/org/apache/derby/impl/sql/compile/SQLBooleanConstantNode.java,87,setValue(getDataValueFactory().getDataValue(val.booleanValue()));
java/engine/org/apache/derby/impl/sql/compile/UserTypeConstantNode.java,160,setValue(getDataValueFactory().getDataValue((Date) arg1));
java/engine/org/apache/derby/impl/sql/compile/UserTypeConstantNode.java,164,setValue(getDataValueFactory().getDataValue((Time) arg1));
java/engine/org/apache/derby/impl/sql/compile/UserTypeConstantNode.java,168,setValue(getDataValueFactory().getDataValue((Timestamp) arg1));
java/engine/org/apache/derby/impl/sql/compile/UserTypeConstantNode.java,287,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/UserTypeConstantNode.java,288,MethodBuilder mb)
java/engine/org/apache/derby/iapi/sql/execute/NoPutResultSet.java,183,public void updateRow(ExecRow row) throws StandardException;
java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java,549,public void updateRow(ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,577,public void updateRow (ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,578,source.updateRow(row);
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,500,"result.setColumn(index + 1, sourceRow.getColumn(projectMapping[index]));"
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1101,public void updateRow(ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1102,ExecRow newRow = row;
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1103,boolean undoProjection = false;
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,977,hashRowArray[POS_ROWLOCATION] = rowLoc.getClone();
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,1154,public void updateRow(ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,195,"CursorResultSet 		rs"
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,198,TemporaryRowHolderImpl singleRow =
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,199,"new TemporaryRowHolderImpl(activation, null,"
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,200,rs.getResultDescription());
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,201,singleRow.insert(rs.getCurrentRow());
java/demo/nserverdemo/NsSample.java,69,"public static final String DB2_JDBC_UNIVERSAL_DRIVER = new String(""com.ibm.db2.jcc.DB2Driver"");"
java/demo/nserverdemo/NsSample.java,70,"public static final String DERBY_CLIENT_DRIVER = ""org.apache.derby.jdbc.ClientDriver"";"
java/demo/nserverdemo/NsSample.java,173,"properties.setProperty(""user"",""cloud"");"
java/demo/nserverdemo/NsSample.java,174,"properties.setProperty(""password"",""scape"");"
java/demo/nserverdemo/SimpleNetworkClientSample.java,246,"properties.setProperty(""user"",""cloud"");"
java/demo/nserverdemo/SimpleNetworkClientSample.java,247,"properties.setProperty(""password"",""scape"");"
java/engine/org/apache/derby/iapi/types/SQLClob.java,78,return new SQLClob(getString());
java/engine/org/apache/derby/iapi/types/SQLClob.java,94,return new SQLClob();
java/engine/org/apache/derby/iapi/types/SQLClob.java,74,public DataValueDescriptor getClone()
java/drda/org/apache/derby/impl/drda/Database.java,344,if (! forXA)
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2236,"return fsq.bindNonVTITables(dataDictionary, fromListParam);"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2234,fsq.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2111,ResultSetNode vtiNode = getNodeFactory().mapTableAsVTI(
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,4462,"public void setRefActionInfo(long fkIndexConglomId,"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3937,if ((isolationLevel != ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL) &&
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2287,"protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2979,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2980,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3004,"public void generateResultSet(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3005,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2467,columnsTableName.bind(this.getDataDictionary());
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2475,if(exposedTableName.getSchemaName() == null && correlationName == null)
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2476,exposedTableName.bind(this.getDataDictionary());
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3621,TableName tn;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3623,tn = super.getTableName();
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3625,if(tn != null) {
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3626,if(tn.getSchemaName() == null &&
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3627,correlationName == null)
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3628,tn.bind(this.getDataDictionary());
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,422,if (cachedDest == null)
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,423,cachedDest = getNull();
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,424,else
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,425,cachedDest.setToNull();
java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java,135,"leftOperand,"
java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java,211,QueryTreeNode trueNode = nodeFactory.getNode(
java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java,271,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java,272,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,264,"if ((otherType.isNumericTypeId())	||"
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,265,(otherType.isBooleanTypeId()))
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,266,return true;
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,77,int otherJDBCTypeId = otherType.getJDBCTypeId();
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,79,if ((otherJDBCTypeId == Types.DATE) ||
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,80,(otherJDBCTypeId == Types.TIME) ||
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,81,(otherJDBCTypeId == Types.TIMESTAMP))
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,83,return false;
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,107,return true;
java/engine/org/apache/derby/impl/sql/compile/CLOBTypeCompiler.java,104,return (otherType.isStringTypeId()) ;
java/engine/org/apache/derby/impl/sql/compile/CLOBTypeCompiler.java,78,return (otherType.isStringTypeId()) ;
java/engine/org/apache/derby/impl/sql/compile/CharTypeCompiler.java,98,return (otherType.isStringTypeId());
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,151,"""tableName: "" + ( ( tableName != null) ? tableName.toString() : ""null"") + ""\n"" +"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,685,columnNumber = source.getColumnPosition();
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,924,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,925,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java,794,getContextManager());
java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java,527,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java,528,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1100,"pushPList.pushExpressionsIntoSelect((SelectNode) childResult, false);"
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1390,int[] mapArray = resultColumns.mapSourceColumns();
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1570,"ClassName.NoPutResultSet, 10);"
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1831,"public void setRefActionInfo(long fkIndexConglomId,"
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1296,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1297,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1316,"public void generateResultSet(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1317,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1734,"protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1224,(RequiredRowOrdering) null);
java/testing/org/apache/derbyTesting/functionTests/util/SQLStateConstants.java,104,public static final String DATA_EXCEPTION_INVALID_PRECEDING_OR_FOLLOWING_SIZE_IN_WINDOW_FUNCTION
java/testing/org/apache/derbyTesting/functionTests/util/SQLStateConstants.java,105,"= ""22013"";"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,144,else
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,255,pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,351,pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,426,pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,480,pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,492,if (c == -1)  // run out of stream
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,499,else
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,576,pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,591,if (b == null || b.length < 1)  // the 'empty' blob
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,599,if (c == -1)  // run out of stream
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,606,else
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2123,else if (right instanceof ConstantNode && left instanceof ColumnReference)
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2126,bcon.swapOperands();
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2031,innerJCL.addElement(newPred);
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,1416,! (opNode.getRightOperand() instanceof ConstantNode ||
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,1417,opNode.getRightOperand() instanceof ParameterNode))
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2118,if (left instanceof ColumnReference &&
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2119,(right instanceof ConstantNode || right instanceof ParameterNode))
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,1425,if (! (inNode.getRightOperandList().isConstantExpression()))
java/engine/org/apache/derby/impl/io/JarStorageFactory.java,96,while( offset < dataDirectory.length() & Character.isSpaceChar( dataDirectory.charAt( offset)))
java/engine/org/apache/derby/impl/io/JarStorageFactory.java,111,while( offset < dataDirectory.length() & Character.isSpaceChar( dataDirectory.charAt( offset)))
java/engine/org/apache/derby/impl/io/JarStorageFactory.java,104,"rightParen = dataDirectory.indexOf( ')', leftParen + 1);"
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,950,synchronized(this)
java/client/org/apache/derby/client/net/DssConstants.java,25,static final int MAX_DSS_LEN = 32767;
java/client/org/apache/derby/client/net/NetStatementReply.java,2064,int columnNumber) throws DisconnectException {
java/client/org/apache/derby/client/net/NetStatementReply.java,2065,if (readFastUnsignedByte() == CodePoint.NULLDATA) {
java/client/org/apache/derby/client/net/NetStatementReply.java,2066,return;
java/client/org/apache/derby/client/net/NetStatementReply.java,1506,"new ClientMessageId(SQLState.NET_LOB_DATA_TOO_LARGE_FOR_JVM), null, e));"
java/client/org/apache/derby/client/net/NetStatementReply.java,1554,} else if ((ddmLength >= 71) && (ddmLength <= 781)) {
java/client/org/apache/derby/client/net/NetStatementReply.java,1562,if (scldtaLen < 18 || scldtaLen > 255) {
java/client/org/apache/derby/client/net/Request.java,1415,"System.arraycopy(bytes, 0, bytes_, offset_, bytes.length);"
java/client/org/apache/derby/client/net/Request.java,1416,offset_ += bytes.length;
java/client/org/apache/derby/client/net/Request.java,299,"padScalarStreamForError(leftToRead, bytesToRead);"
java/client/org/apache/derby/client/net/Request.java,431,leftToRead);
java/client/org/apache/derby/client/net/Request.java,441,"leftToRead,"
java/client/org/apache/derby/client/net/Request.java,453,"padScalarStreamForError(leftToRead, bytesToRead);"
java/client/org/apache/derby/client/net/Request.java,465,"padScalarStreamForError(leftToRead, bytesToRead);"
java/client/org/apache/derby/client/net/Request.java,426,"int parameterIndex) throws DisconnectException, SqlException {"
java/client/org/apache/derby/client/net/Request.java,607,"protected final void padScalarStreamForError(int leftToRead, int bytesToRead) throws DisconnectException {"
java/client/org/apache/derby/client/net/Request.java,1383,"final void writeSingleorMixedCcsidLDString(String s, String encoding) throws SqlException {"
java/client/org/apache/derby/client/net/Request.java,1384,byte[] b;
java/client/org/apache/derby/client/net/Request.java,1243,try {
java/client/org/apache/derby/client/net/Request.java,1386,b = s.getBytes(encoding);
java/client/org/apache/derby/client/net/Request.java,1387,} catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/net/Request.java,1393,"throw new SqlException(netAgent_.logWriter_,"
java/client/org/apache/derby/client/net/Request.java,1342,"new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/net/Request.java,1390,"""String"", ""byte"", e);"
java/client/org/apache/derby/client/net/Request.java,495,"e.getMessage(),"
java/client/org/apache/derby/client/net/Typdef.java,429,"null,"
java/client/org/apache/derby/client/net/Typdef.java,431,"null,"
java/client/org/apache/derby/client/net/Typdef.java,768,"0x00, // 0x50 Empties"
java/client/org/apache/derby/client/net/Typdef.java,769,"0x00, // 0x51 Empties"
java/client/org/apache/derby/client/net/Typdef.java,159,"public static final String UTF8ENCODING = ""UTF8"";"
java/client/org/apache/derby/client/net/Typdef.java,904,private String ccsidSbcEncoding_;
java/client/org/apache/derby/client/net/Typdef.java,908,private String ccsidDbcEncoding_;
java/client/org/apache/derby/client/net/Typdef.java,913,private String ccsidMbcEncoding_;
java/client/org/apache/derby/client/net/Typdef.java,991,String getCcsidSbcEncoding() throws DisconnectException {
java/client/org/apache/derby/client/net/Typdef.java,1047,String getCcsidMbcEncoding() throws DisconnectException {
java/client/org/apache/derby/client/net/Typdef.java,1092,netCursor.charsetName_[columnIndex] = getCcsidSbcEncoding();
java/client/org/apache/derby/client/net/Typdef.java,1097,netCursor.charsetName_[columnIndex] = getCcsidMbcEncoding();
java/client/org/apache/derby/client/net/Typdef.java,1102,netCursor.charsetName_[columnIndex] = null;
java/client/org/apache/derby/client/net/Typdef.java,1108,netCursor.charsetName_[columnIndex] = getCcsidDbcEncoding();
java/client/org/apache/derby/client/net/Typdef.java,1115,netCursor.charsetName_[columnIndex] = null;
java/client/org/apache/derby/client/net/Typdef.java,1125,netCursor.charsetName_[columnIndex] = UTF8ENCODING;
java/drda/org/apache/derby/impl/drda/FdocaConstants.java,136,"protected static int mapJdbcTypeToDrdaType(int jdbcType, boolean nullable,"
java/drda/org/apache/derby/impl/drda/FdocaConstants.java,199,drdaType = DRDAConstants.DRDA_TYPE_NLONG;
java/drda/org/apache/derby/impl/drda/FdocaConstants.java,200,outlen[0] = LONGVARCHAR_MAX_LEN;
java/drda/org/apache/derby/impl/drda/SQLTypes.java,134,"static protected int mapJdbcTypeToDB2SqlType (int jdbctype, boolean nullable,"
java/drda/org/apache/derby/impl/drda/SQLTypes.java,144,"FdocaConstants.mapJdbcTypeToDrdaType(jdbctype,nullable,outlen);"
java/drda/org/apache/derby/impl/drda/SQLTypes.java,180,return DRDAConstants.DB2_SQLTYPE_LONG + nullAddVal;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,151,switch (formatId)
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,236,return formatId;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,268,switch (formatId)
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,427,"SanityManager.THROWASSERT(""Unexpected formatId "" + formatId);"
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,272,JDBCTypeId = JVMInfo.JAVA_SQL_TYPES_BOOLEAN;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,36,public class DynamicByteArrayOutputStream extends OutputStream {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,38,private static int INITIAL_SIZE = 4096;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,40,private byte[] buf;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,41,"private int		position;"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,42,"private int		used;		// how many bytes are used"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,43,"private int		beginPosition;"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,45,public DynamicByteArrayOutputStream() {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,46,this(INITIAL_SIZE);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,49,public DynamicByteArrayOutputStream(int size) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,50,super();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,52,buf = new byte[size];
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,55,public DynamicByteArrayOutputStream(byte[] data) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,56,super();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,58,buf = data;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,61,public DynamicByteArrayOutputStream(DynamicByteArrayOutputStream toBeCloned) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,63,byte[] cbuf = toBeCloned.getByteArray();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,64,buf = new byte[cbuf.length];
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,66,"write(cbuf, 0, cbuf.length);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,67,position = toBeCloned.getPosition();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,68,used = toBeCloned.getUsed();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,69,beginPosition = toBeCloned.getBeginPosition();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,75,public void write(int b)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,77,if (position >= buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,78,expandBuffer(INITIAL_SIZE);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,80,buf[position++] = (byte) b;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,82,if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,83,used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,86,"public void write(byte[] b, int off, int len)"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,88,if ((position+len) > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,89,expandBuffer(len);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,91,"System.arraycopy(b, off, buf, position, len);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,92,position += len;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,94,if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,95,used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,98,"void writeCompleteStream(InputStream dataIn, int len) throws IOException"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,100,if ((position+len) > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,101,expandBuffer(len);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,103,"org.apache.derby.iapi.services.io.InputStreamUtil.readFully(dataIn, buf, position, len);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,104,position += len;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,106,if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,107,used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,110,public void close()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,112,buf = null;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,113,reset();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,121,Reset the stream for reuse
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,123,public void reset()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,125,position = 0;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,126,beginPosition = 0;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,127,used = 0;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,131,Get a reference to the byte array stored in the byte array output
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,132,stream. Note that the byte array may be longer that getPosition().
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,133,Bytes beyond and including the current poistion are invalid.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,135,public byte[] getByteArray()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,137,return buf;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,141,Get the number of bytes that was used.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,143,public int getUsed()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,145,return used;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,149,Get the current position in the stream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,151,public int getPosition()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,153,return position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,157,Get the current position in the stream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,159,public int getBeginPosition()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,161,return beginPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,165,Set the position of the stream pointer.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,166,It is up to the caller to make sure the stream has no gap of garbage in
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,167,it or useful information is not left out at the end because the stream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,168,does not remember anything about the previous position.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,170,public void setPosition(int newPosition)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,172,if (newPosition > position)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,174,if (newPosition > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,175,expandBuffer(newPosition - buf.length);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,178,position = newPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,180,if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,181,used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,183,return ;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,187,Set the begin position of the stream pointer.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,188,"If the newBeginPosition is larger than the stream itself,"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,189,"then, the begin position is not set."
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,191,public void setBeginPosition(int newBeginPosition)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,194,if (newBeginPosition > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,195,return;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,197,beginPosition = newBeginPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,201,Shrink the buffer left by the amount given. Ie.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,202,bytes from 0 to amountToShrinkBy are thrown away
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,204,public void discardLeft(int amountToShrinkBy) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,206,"System.arraycopy(buf, amountToShrinkBy, buf, 0,"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,207,used - amountToShrinkBy);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,209,position -= amountToShrinkBy;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,210,used -= amountToShrinkBy;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,214,Expand the buffer by at least the number of bytes requested in minExtension.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,216,"To optimize performance and reduce memory copies and allocation, we have a staged buffer"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,217,expansion.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,219,<UL>
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,220,<LI> buf.length < 128k - increase by 4k
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,221,<LI> buf.length < 1Mb - increase by 128k
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,222,<LI> otherwise increase by 1Mb.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,223,</UL>
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,225,"In all cases, if minExpansion is greater than the value about then the buffer will"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,226,be increased by minExtension.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,228,private void expandBuffer(int minExtension)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,230,if (buf.length < (128 * 1024)) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,231,if (minExtension < INITIAL_SIZE)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,232,minExtension = INITIAL_SIZE;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,233,} else if (buf.length < (1024 * 1024)) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,235,if (minExtension < (128 * 1024))
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,236,minExtension = (128 * 1024);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,237,} else {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,238,if (minExtension < (1024 * 1024))
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,239,minExtension = 1024 * 1024;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,242,int newsize = buf.length + minExtension;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,244,byte[] newbuf = new byte[newsize];
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,245,"System.arraycopy(buf, 0, newbuf, 0, buf.length);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,246,buf = newbuf;
java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java,205,size = (w > 0 ? w : 15);
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,54,public static final int PARAMETER_NO_NULLS = ParameterMetaData.parameterNoNulls;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,55,public static final int PARAMETER_NULLABLE = ParameterMetaData.parameterNullable;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,56,public static final int PARAMETER_NULLABLE_UNKNOWN = ParameterMetaData.parameterNullableUnknown;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,57,public static final int PARAMETER_MODE_UNKNOWN = ParameterMetaData.parameterModeUnknown;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,58,public static final int PARAMETER_MODE_IN = ParameterMetaData.parameterModeIn;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,59,public static final int PARAMETER_MODE_IN_OUT = ParameterMetaData.parameterModeInOut;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,60,public static final int PARAMETER_MODE_OUT = ParameterMetaData.parameterModeOut;
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,517,"dropSchemaObject( conn, TABLE, name );"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,531,"dropSchemaObject( conn, FUNCTION, name );"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,545,"dropSchemaObject( conn, PROCEDURE, name );"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,557,"protected	static	void	dropSchemaObject( Connection conn, String genus, String objectName )"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,562,"ps = prepare( conn, ""drop "" + genus + "" "" + objectName );"
java/engine/org/apache/derby/iapi/types/RowLocation.java,39,"public interface RowLocation extends DataValueDescriptor, CloneableObject"
java/engine/org/apache/derby/iapi/types/SQLRef.java,203,return new SQLRef((RowLocation) value.cloneObject());
java/engine/org/apache/derby/iapi/types/SQLRef.java,192,public DataValueDescriptor getClone()
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,328,RowLocation rl = (RowLocation) getPreparedStatement().getSavedObject(itemNumber);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,329,if (! (rl.cloneObject() instanceof RowLocation))
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,332,"""rl.cloneObject() expected to be "" +"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,333,"""instance of RowLocation, not "" +"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,334,rl.getClass().getName() +
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,335,""", query is "" + getPreparedStatement().getSource());"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,341,return (RowLocation)
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,342,((RowLocation)(getPreparedStatement().getSavedObject(itemNumber))).cloneObject();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1386,return row[rsNumber].getColumn(colId);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,867,synchronized (getPreparedStatement())
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,869,Vector rowCountCheckVector = getRowCountCheckVector();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,871,if (rowCountCheckVector == null) {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,872,rowCountCheckVector = new Vector();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,873,setRowCountCheckVector(rowCountCheckVector);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,884,(Long) rowCountCheckVector.elementAt(resultSetNumber);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,888,rowCountCheckVector.setSize(resultSetNumber + 1);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,979,firstRowCount = new Long(currentRowCount);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,980,rowCountCheckVector.setElementAt(
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,981,"firstRowCount,"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,982,resultSetNumber
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1006,shouldWeCheckRowCounts();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1138,private void shouldWeCheckRowCounts() throws StandardException
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1146,int executionCount = getExecutionCount() + 1;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1159,checkRowCounts = true;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1164,checkRowCounts = false;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1168,int stalePlanCheckInterval = getStalePlanCheckInterval();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1186,setStalePlanCheckInterval(stalePlanCheckInterval);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1189,checkRowCounts = (executionCount % stalePlanCheckInterval) == 1;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,594,autoGeneratedKeysColumnIndexes = columnIndexes;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,595,autoGeneratedKeysColumnNames = columnNames;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,607,return autoGeneratedKeysColumnIndexes;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,613,return autoGeneratedKeysColumnNames;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1547,public Hashtable getParentResultSets()
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1549,return parentResultSets;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,272,scan_position.current_lock_row_loc =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,273,(RowLocation) ((RowLocation)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,274,init_template[init_template.length - 1]).cloneObject();
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,24,import org.apache.derby.iapi.services.loader.ClassFactory;
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,26,import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,35,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,37,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,39,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,273,pvstarget.getParameterForSet(i).setValue(oldp.getValue());
java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java,390,new_row[i] = (DataValueDescriptor)
java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java,391,((CloneableObject) old_row[i]).cloneObject();
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,209,"cloned.setColumn(i + 1, (DataValueDescriptor)((CloneableObject) cols[i]).cloneObject());"
java/engine/org/apache/derby/iapi/services/io/FormatIdInputStream.java,46,"implements ErrorObjectInput, Resetable"
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,42,implements Resetable
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,55,"throws IOException, StandardException"
java/engine/org/apache/derby/impl/sql/compile/HashTableNode.java,260,int[] mapArray = resultColumns.mapSourceColumns();
java/engine/org/apache/derby/impl/sql/compile/HashTableNode.java,174,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/HashTableNode.java,175,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/HashTableNode.java,196,"public void generateResultSet(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/HashTableNode.java,197,MethodBuilder mb)
java/engine/org/apache/derby/iapi/types/BinaryDecimal.java,672,public DataValueDescriptor getClone() {
java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java,282,public DataValueDescriptor getClone();
java/engine/org/apache/derby/iapi/types/SQLBoolean.java,315,public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLDate.java,234,public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLDate.java,936,return (SQLDate) operand.getClone();
java/engine/org/apache/derby/iapi/types/SQLDecimal.java,563,public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLDouble.java,285,public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLDouble.java,463,setValue(bigDecimal.doubleValue());
java/engine/org/apache/derby/iapi/types/SQLInteger.java,238,public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLLongint.java,241,public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLLongvarchar.java,73,public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLReal.java,286,public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLReal.java,419,setValue(bigDecimal.floatValue());
java/engine/org/apache/derby/iapi/types/SQLSmallint.java,256,public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLSmallint.java,338,"public SQLSmallint(short val, boolean isnull)"
java/engine/org/apache/derby/iapi/types/SQLTime.java,250,public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLTimestamp.java,287,public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLTimestamp.java,1008,return (SQLTimestamp) operand.getClone();
java/engine/org/apache/derby/iapi/types/SQLTimestamp.java,88,static final int MAX_FRACTION_DIGITS = 6; // Only microsecond resolution on conversion to/from strings
java/engine/org/apache/derby/iapi/types/SQLTimestamp.java,89,static final int FRACTION_TO_NANO = 1000; // 10**(9 - MAX_FRACTION_DIGITS)
java/engine/org/apache/derby/iapi/types/SQLTinyint.java,113,"public SQLTinyint(byte val, boolean isnull)"
java/engine/org/apache/derby/iapi/types/SQLTinyint.java,293,public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLVarchar.java,72,public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/UserType.java,314,public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/XML.java,163,"private XML(SQLChar val, int xmlType, boolean seqWithAttr)"
java/engine/org/apache/derby/iapi/types/XML.java,165,xmlStringValue = (val == null ? null : (SQLChar)val.getClone());
java/engine/org/apache/derby/iapi/types/XML.java,178,public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/XML.java,180,"return new XML(xmlStringValue, getXType(), hasTopLevelAttr());"
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,172,newArray[i] = origArray[i].getClone();
java/engine/org/apache/derby/impl/sql/execute/CardinalityCounter.java,108,cloned[i] = ((DataValueDescriptor)clonee[i]).getClone();
java/engine/org/apache/derby/impl/sql/execute/CardinalityCounter.java,44,public class CardinalityCounter implements RowLocationRetRowSource
java/engine/org/apache/derby/impl/sql/execute/DependentResultSet.java,323,"indexRow.setColumn(numFkColumns + 1, rowLocation.getClone());"
java/engine/org/apache/derby/impl/sql/execute/MaxMinAggregator.java,74,value = addend.getClone();
java/engine/org/apache/derby/impl/sql/execute/SumAggregator.java,63,value = addend.getClone();
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,664,RowLocation rl2 = (RowLocation) rl.getClone();
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,174,"rowClone.setColumn(colCtr + 1, column[colCtr].getClone());"
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,192,if (column[colCtr] instanceof RowLocation)
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,200,"rowClone.setColumn(colCtr + 1, column[colCtr].getClone());"
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,202,else
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,205,"rowClone.setColumn(colCtr + 1,"
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,206,((DataValueDescriptor) (column[colCtr])).getNewNull());
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,220,return column[columnPosition -1].getClone();
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,267,columnClones[colCtr] = column[colCtr].getClone();
java/engine/org/apache/derby/impl/store/access/StorableFormatId.java,203,public DataValueDescriptor getClone()
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,91,check_row_template[0] = fetch_row[0].getClone();
java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerate.java,126,public DataValueDescriptor getClone()
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,124,public DataValueDescriptor getClone() {
java/testing/org/apache/derbyTesting/functionTests/tests/store/TestDiskHashtable.java,236,row[i] = aRow[i].getClone();
java/testing/org/apache/derbyTesting/unitTests/store/T_AccessRow.java,134,retval[index] = column[index].getClone();
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,33,import org.apache.derby.iapi.types.Orderable;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,33,import org.apache.derby.iapi.types.Orderable;
java/engine/org/apache/derby/iapi/types/TypeId.java,1234,UserDefinedTypeIdImpl baseUserTypeId =
java/engine/org/apache/derby/iapi/types/TypeId.java,1235,(UserDefinedTypeIdImpl) baseTypeId;
java/engine/org/apache/derby/iapi/types/TypeId.java,1237,String className = baseUserTypeId.getClassName();
java/engine/org/apache/derby/iapi/types/TypeId.java,1239,try
java/engine/org/apache/derby/iapi/types/TypeId.java,1241,Class c = cf.getClassInspector().getClass(className);
java/engine/org/apache/derby/iapi/types/TypeId.java,1242,orderable = java.lang.Comparable.class.isAssignableFrom(c);
java/engine/org/apache/derby/iapi/types/TypeId.java,1244,catch (ClassNotFoundException cnfe)
java/engine/org/apache/derby/iapi/types/TypeId.java,1246,orderable = false;
java/engine/org/apache/derby/iapi/types/TypeId.java,1248,break;
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,256,DataTypeDescriptor dts = DataTypeDescriptor.getSQLDataTypeDescriptor(javaNode.getJavaTypeName());
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,115,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,116,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,215,public JavaValueNode getJavaValueNode()
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,369,"dataDirectory,"
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,370,readOnlyMsg));
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,473,getIdentifier()));
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,474,istream.println(LINE);
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2309,isFrozen = false;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2310,freezeSemaphore.notifyAll();
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2312,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2355,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,1983,MessageService.getCompleteMessage(
java/client/org/apache/derby/client/net/NetConnection.java,1366,"extnam_ = ""derbydnc"" + java.lang.Thread.currentThread().getName();"
java/client/org/apache/derby/client/net/NetConnection.java,36,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/net/NetConnection.java,194,"public NetConnection(NetLogWriter netLogWriter,"
java/client/org/apache/derby/client/net/NetConnection.java,195,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,196,"String user,"
java/client/org/apache/derby/client/net/NetConnection.java,197,String password) throws SqlException {
java/client/org/apache/derby/client/net/NetConnection.java,215,String password = ClientBaseDataSource.getPassword(properties);
java/client/org/apache/derby/client/net/NetConnection.java,216,securityMechanism_ = ClientBaseDataSource.getSecurityMechanism(properties);
java/client/org/apache/derby/client/net/NetConnection.java,226,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,237,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,274,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,286,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,484,"e.getClass().getName(), e.getMessage(), e);"
java/client/org/apache/derby/client/net/NetConnection.java,528,"e.getClass().getName(), e.getMessage(), e);"
java/engine/org/apache/derby/impl/sql/GenericStatement.java,204,for (;;) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,206,if (foundInCache) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,207,if (preparedStmt.referencesSessionSchema()) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,212,break;
java/engine/org/apache/derby/impl/sql/GenericStatement.java,225,try {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,226,preparedStmt.wait();
java/engine/org/apache/derby/impl/sql/GenericStatement.java,227,} catch (InterruptedException ie) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,222,break;
java/engine/org/apache/derby/impl/sql/GenericStatement.java,228,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/sql/GenericStatement.java,267,ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL)
java/engine/org/apache/derby/impl/sql/GenericStatement.java,221,if (!preparedStmt.compilingStatement) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,232,preparedStmt.compilingStatement = true;
java/engine/org/apache/derby/impl/sql/GenericStatement.java,233,preparedStmt.setActivationClass(null);
java/engine/org/apache/derby/impl/sql/GenericStatement.java,552,synchronized (preparedStmt) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,553,preparedStmt.compilingStatement = false;
java/engine/org/apache/derby/impl/sql/GenericStatement.java,554,preparedStmt.notifyAll();
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,84,int rcLength = in.readInt();
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,85,referencedColumns = new int[rcLength];
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,86,for (int i = 0; i < rcLength; i++)
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,88,referencedColumns[i] = in.readInt();
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,97,public void writeExternal(ObjectOutput out) throws IOException
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,99,out.writeInt(referencedColumns.length);
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,100,for (int i = 0; i < referencedColumns.length; i++)
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,102,out.writeInt(referencedColumns[i]);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,432,"newText.append(genColumnReferenceSQL(dd, colName, tableName.getTableName(), tableName.getTableName().equals(oldTableName)));"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,586,"boolean			isOldTable"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,619,methodCall.append(colDesc.getPosition());
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,391,StringBuffer newText = new StringBuffer();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,392,boolean regenNode = false;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,394,if (isRow)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,462,continue;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,490,if (regenNode)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,492,if (start < originalActionText.length())
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,494,newText.append(originalActionText.substring(start));
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,496,actionText = newText.toString();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,509,QueryTreeNode[] sorted = new QueryTreeNode[size];
java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java,930,"referencedCols, originalActionText,"
java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java,209,"public	CreateIndexConstantAction	getCreateIndexConstantAction"
java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java,478,"public	DropIndexConstantAction	getDropIndexConstantAction"
java/engine/org/apache/derby/impl/services/locks/LockSet.java,285,byte wakeupReason = waitingLock.waitForGrant(actualTimeout);
java/engine/org/apache/derby/impl/services/locks/LockSet.java,437,if (deadlockTrace)
java/client/org/apache/derby/jdbc/ClientDataSource.java,163,"return getConnection(getUser(), getPassword());"
java/client/org/apache/derby/jdbc/ClientDataSource.java,185,"updateDataSourceValues(tokenizeAttributes(getConnectionAttributes(), null));"
java/client/org/apache/derby/jdbc/ClientDataSource.java,186,return ClientDriver.getFactory().newNetConnection
java/client/org/apache/derby/jdbc/ClientDataSource.java,187,"((NetLogWriter) dncLogWriter, user,"
java/client/org/apache/derby/jdbc/ClientDataSource.java,188,"password, this, -1, false);"
java/client/org/apache/derby/jdbc/ClientDataSource.java,104,public class ClientDataSource extends ClientBaseDataSource implements DataSource {
java/client/org/apache/derby/jdbc/ClientXADataSource.java,64,"return getXAConnection(getUser(), getPassword());"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,53,public class ClientXADataSource extends ClientDataSource implements XADataSource {
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,318,else
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,320,if (SanityManager.DEBUG)
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,322,"SanityManager.THROWASSERT(""NDRDAType: "" + ndrdaType +"
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,323,""" not valid EXTDTA object type"");"
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,558,public Blob getBlob (int i) throws SQLException {
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,559,throw Util.notImplemented();
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,571,public Clob getClob (int i) throws SQLException {
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,572,throw Util.notImplemented();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,304,{// left operand must be either a base table or another LOJ
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,319,{// right operand must be either a base table or another LOJ
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,336,"JBitSet				NPReferencedTableMap; // Null-producing"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,337,"JBitSet				RPReferencedTableMap; // Row-preserving"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,357,BinaryRelationalOperatorNode equals;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,358,ValueNode leftCol;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,359,ValueNode rightCol;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,360,AndNode   and;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,361,ValueNode left;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,362,ValueNode vn = joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,363,while (vn instanceof AndNode)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,365,and = (AndNode) vn;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,366,left = and.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,380,boolean refCheck = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,381,boolean leftOperandCheck = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,383,if (RPReferencedTableMap.get(((ColumnReference)leftCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,385,refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,386,leftOperandCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,388,else if (NPReferencedTableMap.get(((ColumnReference)leftCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,390,refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,393,if (refCheck == false)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,394,return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,396,refCheck = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,397,if (leftOperandCheck == false && RPReferencedTableMap.get(((ColumnReference)rightCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,399,refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,401,else if (leftOperandCheck == true && NPReferencedTableMap.get(((ColumnReference)rightCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,403,refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,406,if (refCheck == false)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,407,return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,409,else return LOJ_bindResultColumns(anyChange); //  get out of here
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,411,vn = and.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,416,boolean       push = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,419,if (logicalRightResultSet instanceof HalfOuterJoinNode)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,422,JBitSet  logicalNPRefTableMap = ((HalfOuterJoinNode)logicalRightResultSet).LOJgetNPReferencedTables(numTables);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,427,vn = joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,428,push = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,429,while (vn instanceof AndNode)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,431,and = (AndNode) vn;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,432,left = and.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,433,equals = (BinaryRelationalOperatorNode) left;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,434,leftCol = equals.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,435,rightCol = equals.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,437,if (logicalNPRefTableMap.get(((ColumnReference)leftCol).getTableNumber()) ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,438,logicalNPRefTableMap.get(((ColumnReference)rightCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,440,push = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,441,break;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,444,vn = and.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,449,if (push)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,453,if (super.subqueryList.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,454,((JoinNode)logicalRightResultSet).subqueryList.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,455,super.joinPredicates.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,456,((JoinNode)logicalRightResultSet).joinPredicates.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,457,super.usingClause != null ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,458,((JoinNode)logicalRightResultSet).usingClause != null)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,459,return LOJ_bindResultColumns(anyChange); //  get out of here
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,461,anyChange = true; // we are reordering the LOJs.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,463,ResultSetNode tmp = logicalLeftResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,464,"ResultSetNode LChild, RChild;"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,482,LChild = ((HalfOuterJoinNode)logicalRightResultSet).leftResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,483,RChild = ((HalfOuterJoinNode)logicalRightResultSet).rightResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,485,((HalfOuterJoinNode)logicalRightResultSet).rightResultSet = LChild;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,486,((HalfOuterJoinNode)logicalRightResultSet).leftResultSet  = tmp;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,489,vn = joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,490,joinClause   = ((HalfOuterJoinNode)logicalRightResultSet).joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,491,((HalfOuterJoinNode)logicalRightResultSet).joinClause = vn;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,502,FromList localFromList = (FromList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,503,"C_NodeTypes.FROM_LIST,"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,504,"getNodeFactory().doJoinOrderOptimization(),"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,505,getContextManager());
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,508,leftResultSet  = logicalRightResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,509,rightResultSet = RChild;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,512,((HalfOuterJoinNode)leftResultSet).resultColumns = null;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,513,((JoinNode)leftResultSet).bindResultColumns(localFromList); // localFromList is empty
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,516,boolean localChange = ((HalfOuterJoinNode)leftResultSet).LOJ_reorderable(numTables);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,679,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,680,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,553,"public FromTable transformOuterJoins(ValueNode predicateTree, int numTables)"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,709,"protected int addOuterJoinArguments(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,710,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,731,"protected void oneRowRightSide(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,732,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,267,return this;
java/engine/org/apache/derby/impl/load/ColumnInfo.java,330,"sb.append(""\"""");"
java/engine/org/apache/derby/impl/load/ColumnInfo.java,331,sb.append(insertColumnNames.get(index));
java/engine/org/apache/derby/impl/load/ColumnInfo.java,332,"sb.append(""\"""");"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,182,if (dblook.isIgnorableSchema(schemaName))
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,186,Statement stmtCols = conn.createStatement();
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,187,"String queryCols = ""SELECT COLUMNNUMBER, COLUMNNAME "" +"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,188,"""FROM SYS.SYSCOLUMNS C, SYS.SYSTABLES T, SYS.SYSSCHEMAS S "" +"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,189,"""WHERE T.TABLEID = C.REFERENCEID and S.SCHEMAID = T.SCHEMAID ""+"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,190,"""and T.TABLENAME = '""+tableName+""' AND SCHEMANAME = '""+schemaName +"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,191,"""' ORDER BY COLUMNNUMBER"";"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,193,ResultSet rsCols= stmtCols.executeQuery(queryCols);
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,194,"String fullName = dblook.addQuotes(schemaName) + ""."" + dblook.addQuotes(tableName);"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,267,"grantStmt.append("")"");"
java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java,861,"totaljvmflags = subjvmflags + ""^"" + totaljvmflags;"
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,391,if (jvmflags != null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,393,if (jflags != null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,400,if (jflags != null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,406,if (testJavaFlags == null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,415,if (testSpecialProps == null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java,1590,if (jvmflags != null)
java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java,184,"File classFile = FileUtil.newFile(dir,filename);"
java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java,190,FileOutputStream fis = new FileOutputStream(classFile);
java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java,200,"SanityManager.THROWASSERT(""Unable to write .class file"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,172,Class iface = Blob.class;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,170,Class iface = Clob.class;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,561,"Class			iface = exclusions.getInterface();"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,387,"int		actualErrorCount ="
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,388,vanishedMethodList.size() +
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,389,unsupportedList.size() +
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,390,notUnderstoodList.size();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,392,assertEquals
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,393,"( ""Unexpected discrepancies."","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,394,"0, actualErrorCount );"
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,416,pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,666,if (!seenOneCharacter)
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,691,if (firstPosition == -1)
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,143,} catch (Throwable t) {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,144,throw handleException(t);
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1495,throws SQLException {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1497,DataTypeDescriptor[] types = getTypes(parameterIndex);
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1499,int type = types[parameterIndex -1] == null ?
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1500,Types.OTHER :
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1501,types[parameterIndex - 1].getTypeId().getJDBCTypeId();
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1503,if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1510,return type;
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1521,throws SQLException {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1522,DataTypeDescriptor[] pTypes = getTypes(parameterIndex);
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1523,return pTypes[parameterIndex-1].getTypeName();
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,136,Hashtable classSizes = new Hashtable();
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,231,private Class[] interfaceList; // Search for classes that implement these interfaces
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,233,private Hashtable classSizes;
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,238,Hashtable classSizes)
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,276,Class targetClass = null;
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,110,private HashMap changeMap;
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,178,changeMap = new HashMap();
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,356,ArrayList colDefs = new ArrayList();
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,729,ArrayList colDefList)
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,983,ArrayList selectColDefs)
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1147,Byte changeByte = (Byte)changeMap.get(queryName);
java/build/org/apache/derbyBuild/classlister.java,70,protected Hashtable foundClasses;
java/build/org/apache/derbyBuild/classlister.java,87,protected Hashtable masterClassList = new Hashtable();
java/build/org/apache/derbyBuild/classlister.java,90,protected Hashtable classpathHash;
java/build/org/apache/derbyBuild/classlister.java,157,"foundClasses = new Hashtable(3000, 0.8f);"
java/build/org/apache/derbyBuild/classlister.java,262,classpathHash = new Hashtable();
java/build/org/apache/derbyBuild/classlister.java,533,Hashtable localHashtable = null;
java/build/org/apache/derbyBuild/classlister.java,536,localHashtable = (Hashtable) masterClassList.get(className);
java/build/org/apache/derbyBuild/classlister.java,539,localHashtable = new Hashtable();
java/build/org/apache/derbyBuild/classlister.java,670,Hashtable scoreboard = new Hashtable();
java/build/org/apache/derbyBuild/classlister.java,671,Hashtable grandkids = (Hashtable) masterClassList.get(kid);
java/build/org/apache/derbyBuild/classlister.java,700,"protected void unrollHashtable( String parent, Hashtable current, Hashtable scoreboard, int indentLevel)"
java/build/org/apache/derbyBuild/classlister.java,703,Enumeration e = current.keys();
java/build/org/apache/derbyBuild/classlister.java,708,key = (String) e.nextElement();
java/build/org/apache/derbyBuild/classlister.java,715,Integer value = (Integer) scoreboard.get(key);
java/build/org/apache/derbyBuild/classlister.java,731,Hashtable currentsChildren = (Hashtable) masterClassList.get(key);
java/build/org/apache/derbyBuild/javadoc/DiskLayoutTaglet.java,99,public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/DiskLayoutTaglet.java,29,"private String NAME = ""disk_layout"";"
java/build/org/apache/derbyBuild/javadoc/EndFormatTaglet.java,101,public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/EndFormatTaglet.java,30,"private String NAME = ""end_format"";"
java/build/org/apache/derbyBuild/javadoc/FormatIdTaglet.java,101,public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/FormatIdTaglet.java,29,"private String NAME = ""format_id"";"
java/build/org/apache/derbyBuild/javadoc/PurposeTaglet.java,102,public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/PurposeTaglet.java,31,"private String NAME = ""purpose"";"
java/build/org/apache/derbyBuild/javadoc/UpgradeTaglet.java,100,public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/UpgradeTaglet.java,29,"private String NAME = ""upgrade"";"
java/build/org/apache/derbyBuild/splitmessages.java,46,private static TreeSet clientMessageIds = new TreeSet();
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,256,if ( res == null){
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,257,setResource();
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,259,String s = key;
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,260,try{
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,261,s = res.getString(key);
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,262,} catch (Exception e) {
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,263,s = key;
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,267,return s;
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,303,"public String getTextMessage(String key, Object [] objectArr) {"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,473,public static String getMessage(String key){
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,474,return getInstance().getTextMessage(key);
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,476,"public static String getMessage(String key, Object o1){"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,477,"return getInstance().getTextMessage(key,o1);"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,479,"public static String getMessage(String key, Object o1, Object o2){"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,480,"return getInstance().getTextMessage(key,o1,o2);"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,482,"public static String getMessage(String key, Object o1, Object o2, Object o3){"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,483,"return getInstance().getTextMessage(key,o1,o2,o3);"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,485,"public static String getMessage(String key, Object o1, Object o2, Object o3, Object o4){"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,486,"return getInstance().getTextMessage(key,o1,o2,o3,o4);"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,311,for (int i=0; i<objectArr.length; i++)
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1533,"long pageNumber;		// the page number of the new page"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1541,long startSearch = lastAllocatedPage;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1606,allocPage =
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1607,"findAllocPageForAdd(allocHandle, ntt, startSearch);"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1989,synchronized(allocCache)
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1991,"if (pagenum <= allocCache.getLastPageNumber(handle, firstAllocPageNumber) &&"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1992,"allocCache.getPageStatus(handle, pagenum, firstAllocPageNumber) == AllocExtent.ALLOCATED_PAGE)"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1993,retval = true;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,236,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,576,synchronized (this) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,580,if (getCommittedDropState()) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,581,clearDirty();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1154,return;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,589,while(preDirty == true)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,591,waited = true;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,538,try
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,594,wait();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,596,catch (InterruptedException ie)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,598,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,602,if (waited)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,605,if (getCommittedDropState())
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,635,clearDirty();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,582,return;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,922,return AccessController.doPrivileged( this) != null;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1119,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,947,synchronized boolean openContainer(ContainerKey newIdentity)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1490,try {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1399,dataFactory.writeInProgress();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1360,try
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1402,"fileData = file.getRandomAccessFile( ""rw"");"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1404,finally
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1406,dataFactory.writeFinished();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1486,} catch (SecurityException se) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1391,"throw StandardException.newException( SQLState.FILE_CREATE, se, file);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1503,} catch (IOException ioe) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1450,"throw StandardException.newException( SQLState.FILE_CREATE, ioe, file);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1661,"return actionFile.getRandomAccessFile(""rw"");"
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,299,int errorSeverity = error instanceof StandardException ?
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,300,((StandardException) error).getSeverity() :
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,301,ExceptionSeverity.NO_APPLICABLE_SEVERITY;
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,237,public boolean cleanupOnError(Throwable error)
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,41,import org.apache.derby.impl.sql.execute.DropTriggerConstantAction;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,268,return creationTimestamp;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,395,return referencedCols;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,312,if (actionSPS == null)
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,320,actionSPS = getDataDictionary().getSPSDescriptor(actionSPSId);
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,323,return actionSPS;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,343,public SPSDescriptor getWhenClauseSPS()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,42,extends BaseJDBCTestCase {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,41,public class ResultSetTest
java/client/org/apache/derby/client/am/CallableStatement.java,1397,private SQLException jdbcMethodNotImplemented() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,37,public class CallableStatementTest
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,38,extends BaseJDBCTestCase {
java/engine/org/apache/derby/impl/services/locks/ActiveLock.java,124,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java,1075,StatementContext localStatementContext = getLanguageConnectionContext().getStatementContext();
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,359,cm.cleanupOnError(e);
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,402,contextMgr.cleanupOnError(StandardException.normalClose());
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,724,if (mf != null)
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,725,mf.setThreadPriority(Thread.MIN_PRIORITY);
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,727,if (mf != null)
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,728,mf.setThreadPriority(oldPriority);
java/testing/org/apache/derbyTesting/unitTests/store/T_FileSystemData.java,186,cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_FileSystemData.java,212,cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,261,cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,5620,cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,7384,cm1.cleanupOnError(t);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,7386,cm2.cleanupOnError(t);
java/testing/org/apache/derbyTesting/unitTests/store/T_StreamFile.java,219,cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_StreamFile.java,244,cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,210,cm1.cleanupOnError(e);
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,222,cm1.cleanupOnError(t);
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,857,cm.cleanupOnError(e);
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,3259,cm.cleanupOnError(e);
java/client/org/apache/derby/client/am/Connection.java,31,"public abstract class Connection implements java.sql.Connection,"
java/client/org/apache/derby/client/am/Connection.java,32,ConnectionCallbackInterface {
java/client/org/apache/derby/client/am/Connection.java,650,checkForClosedConnection();
java/client/org/apache/derby/client/am/Connection.java,730,if (!open_) {
java/client/org/apache/derby/client/am/Connection.java,24,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/am/Connection.java,25,import org.apache.derby.jdbc.ClientDataSource;
java/client/org/apache/derby/client/am/Connection.java,136,public org.apache.derby.jdbc.ClientBaseDataSource dataSource_;
java/client/org/apache/derby/client/am/Connection.java,150,"protected Connection(org.apache.derby.client.am.LogWriter logWriter,"
java/client/org/apache/derby/client/am/Connection.java,151,"String user,"
java/client/org/apache/derby/client/am/Connection.java,152,"String password,"
java/client/org/apache/derby/client/am/Connection.java,153,org.apache.derby.jdbc.ClientBaseDataSource dataSource)
java/client/org/apache/derby/client/am/Connection.java,154,throws SqlException {
java/client/org/apache/derby/client/am/Connection.java,158,"protected Connection(org.apache.derby.client.am.LogWriter logWriter,"
java/client/org/apache/derby/client/am/Connection.java,159,"String user,"
java/client/org/apache/derby/client/am/Connection.java,160,"String password,"
java/client/org/apache/derby/client/am/Connection.java,161,"boolean isXAConn,"
java/client/org/apache/derby/client/am/Connection.java,162,org.apache.derby.jdbc.ClientBaseDataSource dataSource)
java/client/org/apache/derby/client/am/Connection.java,163,throws SqlException {
java/client/org/apache/derby/client/am/Connection.java,205,"protected Connection(org.apache.derby.client.am.LogWriter logWriter,"
java/client/org/apache/derby/client/am/Connection.java,206,"boolean isXAConn,"
java/client/org/apache/derby/client/am/Connection.java,207,org.apache.derby.jdbc.ClientBaseDataSource dataSource)
java/client/org/apache/derby/client/am/Connection.java,208,throws SqlException {
java/client/org/apache/derby/client/am/Connection.java,214,user_ = ClientDataSource.propertyDefault_user;
java/client/org/apache/derby/client/am/Connection.java,317,user_ = ClientDataSource.getUser(properties);
java/client/org/apache/derby/client/am/Connection.java,318,retrieveMessageText_ = ClientDataSource.getRetrieveMessageText(properties);
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,539,public final String getText()
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,405,if (!((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) dd).readOnlyUpgrade) {
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,709,if (!((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) (lcc.getDataDictionary())).readOnlyUpgrade) {
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1128,if (((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) dd).readOnlyUpgrade)
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,242,this.compileTime = compileTime;
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,521,return compileTime;
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,603,return params;
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,613,this.params = params;
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,632,return paramDefaults;
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,642,this.paramDefaults = values;
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,564,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,587,inClean = false;
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,588,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,655,{   //does not matter weather I get interrupted or not
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1016,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1088,inBackup = false;
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1089,backupSemaphore.notifyAll();
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1090,throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,95,"private long	tranId;"
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,649,synchronized(this)
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,651,xid = new XactId(tranId++);
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,676,if (xid != null)
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,677,tranId = xid.getId() + 1;
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,678,else
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,679,tranId = 1;
java/client/org/apache/derby/client/am/Statement.java,1825,if (generatedKeysResultSet_ != null) {
java/client/org/apache/derby/client/am/Statement.java,1826,generatedKeysResultSet_.markClosed(removeListener);
java/client/org/apache/derby/client/am/Statement.java,1828,if (resultSet_ != null) {
java/client/org/apache/derby/client/am/Statement.java,1829,resultSet_.markClosed(removeListener);
java/client/org/apache/derby/client/am/Statement.java,1831,resultSet_ = null;
java/client/org/apache/derby/client/am/Statement.java,1832,resultSetList_ = null;
java/client/org/apache/derby/client/am/Statement.java,1833,generatedKeysResultSet_ = null;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetQueryTimeoutTest.java,279,private static class StatementExecutor
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,208,this.hostName = null;
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,552,sb.append(test.getName());
java/client/org/apache/derby/jdbc/ClientDriver.java,50,static {
java/client/org/apache/derby/jdbc/ClientDriver.java,60,registeredDriver__ = new ClientDriver();
java/client/org/apache/derby/jdbc/ClientDriver.java,108,port = ClientDataSource.propertyDefault_portNumber;
java/client/org/apache/derby/jdbc/ClientDriver.java,119,traceLevel = ClientDataSource.getTraceLevel(augmentedProperties);
java/client/org/apache/derby/jdbc/ClientDriver.java,131,"ClientDataSource.computeDncLogWriterForNewConnection(java.sql.DriverManager.getLogWriter(),"
java/client/org/apache/derby/jdbc/ClientDriver.java,132,"ClientDataSource.getTraceDirectory(augmentedProperties),"
java/client/org/apache/derby/jdbc/ClientDriver.java,133,"ClientDataSource.getTraceFile(augmentedProperties),"
java/client/org/apache/derby/jdbc/ClientDriver.java,134,"ClientDataSource.getTraceFileAppend(augmentedProperties),"
java/client/org/apache/derby/jdbc/ClientDriver.java,135,"traceLevel,"
java/client/org/apache/derby/jdbc/ClientDriver.java,136,"""_driver"","
java/client/org/apache/derby/jdbc/ClientDriver.java,137,traceFileSuffixIndex_++);
java/client/org/apache/derby/jdbc/ClientDriver.java,207,"new java.sql.DriverPropertyInfo(Attribute.USERNAME_ATTR,"
java/client/org/apache/derby/jdbc/ClientDriver.java,208,"properties.getProperty(Attribute.USERNAME_ATTR, ClientDataSource.propertyDefault_user));"
java/client/org/apache/derby/jdbc/ClientDriver.java,354,"return ClientDataSource.tokenizeAttributes(attributeString, properties);"
java/client/org/apache/derby/jdbc/ClientDriver.java,102,"url, e);"
java/client/org/apache/derby/jdbc/ClientDriver.java,326,"new ClientMessageId(SQLState.MALFORMED_URL), url, e);"
java/client/org/apache/derby/jdbc/ClientDriver.java,340,"new ClientMessageId(SQLState.MALFORMED_URL), url, e);"
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,172,"return super.getFromTableByName(name, schemaName, exactMatch);"
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,163,"protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/services/monitor/TopService.java,193,return false;
java/engine/org/apache/derby/iapi/types/NumberDataType.java,74,result = (NumberDataType)getNewNull();
java/engine/org/apache/derby/impl/services/locks/LockTableVTI.java,109,lock = (Lock) grantedList.next();
java/engine/org/apache/derby/impl/services/locks/LockTableVTI.java,118,lock = (Lock) waitingList.next();
java/engine/org/apache/derby/impl/sql/compile/DistinctNode.java,248,childResult = (ProjectRestrictNode) childResult.optimize(
java/engine/org/apache/derby/impl/sql/compile/DistinctNode.java,301,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/DistinctNode.java,302,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/DistinctNode.java,260,(RequiredRowOrdering) null);
java/engine/org/apache/derby/impl/sql/execute/SetConstraintsConstantAction.java,346,cd = (CheckConstraintDescriptor) cdl.elementAt(index);
java/engine/org/apache/derby/impl/store/access/btree/D_BTreeController.java,404,OpenBTree   open_btree  = (BTreeController) this.diag_object;
java/engine/org/apache/derby/impl/store/access/btree/index/B2IFactory.java,254,btree = (B2I) root.getConglom(B2I.FORMAT_NUMBER);
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,478,(CursorResultSet)null);
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,495,(CursorResultSet)null);
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,176,runFkChecker(true); //check for only RESTRICT referential action rule violations
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,179,runFkChecker(false); //check for all constraint violations
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,566,void runFkChecker(boolean restrictCheckOnly) throws StandardException
java/engine/org/apache/derby/impl/sql/execute/RowTriggerExecutor.java,71,"CursorResultSet 	ars"
java/engine/org/apache/derby/impl/sql/execute/RowTriggerExecutor.java,95,"getNewRSOnCurrentRow(activation, brs));"
java/engine/org/apache/derby/impl/sql/execute/RowTriggerExecutor.java,100,"getNewRSOnCurrentRow(activation, ars));"
java/engine/org/apache/derby/impl/sql/execute/RowTriggerExecutor.java,36,public class RowTriggerExecutor extends GenericTriggerExecutor
java/engine/org/apache/derby/impl/sql/execute/StatementTriggerExecutor.java,71,"CursorResultSet 	ars"
java/engine/org/apache/derby/impl/sql/execute/StatementTriggerExecutor.java,36,public class StatementTriggerExecutor extends GenericTriggerExecutor
java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java,234,"CursorResultSet		ars"
java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java,278,"executors[eventNumber][i].fireTrigger(event, brs, ars);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,601,public void testIsPoolable() throws SQLException {
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,306,try
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,327,for (int slot_no = page.recordCount() - 1;
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,328,slot_no > 0;
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,329,slot_no--)
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,331,if (page.isDeletedAtSlot(slot_no))
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1414,SanityManager.ASSERT(isLatched());
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1440,SanityManager.ASSERT(isLatched());
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1481,"SanityManager.THROWASSERT(""incorrect deleted row count.  Should be: """
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1482,#NAME?
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1483,"+ "", maxSlot = "" + maxSlot + "", recordCount = "" + recordCount);"
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1541,if (internalNonDeletedRecordCount() <= num_non_deleted_rows)
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1543,ret_val = true;
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1545,else
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1547,if (!entireRecordOnPage(slot_just_deleted))
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,562,int rowloc_index =
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,563,this.getConglomerate().nKeyFields - 1;
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,564,targetleaf.page.updateFieldAtSlot(
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,565,"insert_slot, rowloc_index,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,566,(DataValueDescriptor) RowUtil.getColumn(
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,775,"rowToInsert,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,568,"(FormatableBitSet) null, rowloc_index),"
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,569,this.btree_undo);
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,385,String[] list = from.list();
java/engine/org/apache/derby/impl/io/DirFile.java,118,return new FileOutputStream( (File) this);
java/engine/org/apache/derby/impl/io/DirFile.java,136,"return new FileOutputStream( getPath(), append);"
java/engine/org/apache/derby/impl/io/DirFile.java,160,public synchronized int getExclusiveFileLock()
java/engine/org/apache/derby/impl/io/DirFile.java,240,return super.renameTo( (File) newName);
java/engine/org/apache/derby/impl/io/DirFile.java,250,if( !exists())
java/engine/org/apache/derby/impl/io/DirFile.java,252,if( isDirectory())
java/engine/org/apache/derby/impl/io/DirFile4.java,117,public synchronized int getExclusiveFileLock()
java/engine/org/apache/derby/impl/io/DirFile4.java,114,"return new FileOutputStream( (File) this, append);"
java/engine/org/apache/derby/impl/io/InputStreamFile.java,372,public int getExclusiveFileLock()
java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java,98,rootDir.mkdirs();
java/engine/org/apache/derby/impl/services/stream/SingleStream.java,344,hpw.printlnWithHeader(t.toString());
java/engine/org/apache/derby/impl/store/raw/data/StreamFileContainer.java,1174,return ReuseFactory.getBoolean(actionStorageFile.mkdirs());
java/engine/org/apache/derby/io/StorageFile.java,254,public int getExclusiveFileLock();
java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptFile.java,334,public synchronized int getExclusiveFileLock()
java/drda/org/apache/derby/drda/NetworkServerControl.java,248,server.consoleExceptionPrint(e);
java/drda/org/apache/derby/drda/NetworkServerControl.java,486,serverImpl.clientLocale = locale;
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,505,if (isJCC)
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,506,return (XADataSource)
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,507,"(Class.forName(""com.ibm.db2.jcc.DB2XADataSource"").newInstance());"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,508,else if (isNetClient){
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,509,if (JVMInfo.JDK_ID >= JVMInfo.J2SE_16) {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,512,try {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,513,return (XADataSource)(Class.forName(
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,514,"""org.apache.derby.jdbc."" +"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,517,catch (ClassNotFoundException e) {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,522,return (XADataSource) (Class.forName(
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,523,"""org.apache.derby.jdbc.ClientXADataSource"""
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,524,).newInstance());
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,526,else {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,527,if (JVMInfo.JDK_ID >= JVMInfo.J2SE_16) {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,530,try {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,531,return (XADataSource)(Class.forName(
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,533,"""EmbeddedXADataSource40"").newInstance());"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,535,catch (ClassNotFoundException e) {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,540,"return (XADataSource)(Class.forName(""org.apache.derby.jdbc.EmbeddedXADataSource"").newInstance());"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,543,catch(ClassNotFoundException cnfe) {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,592,try {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,532,"""org.apache.derby.jdbc."" +"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,515,"""ClientXADataSource40"").newInstance());"
java/engine/org/apache/derby/impl/sql/execute/rts/ResultSetStatistics.java,22,package org.apache.derby.impl.sql.execute.rts;
java/engine/org/apache/derby/impl/sql/execute/RealResultSetStatisticsFactory.java,107,import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
java/testing/org/apache/derbyTesting/unitTests/lang/EmptyResultSetStatisticsFactory.java,39,import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
java/engine/org/apache/derby/iapi/sql/dictionary/ColPermsDescriptor.java,169,"return	new DDdependableFinder(StoredFormatIds.COLUMNS_PERMISSION_FINDER_V01_ID);"
java/engine/org/apache/derby/iapi/sql/dictionary/RoutinePermsDescriptor.java,166,"return	new DDdependableFinder(StoredFormatIds.ROUTINE_PERMISSION_FINDER_V01_ID);"
java/engine/org/apache/derby/iapi/sql/dictionary/TablePermsDescriptor.java,186,"return	new DDdependableFinder(StoredFormatIds.TABLE_PERMISSION_FINDER_V01_ID);"
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,125,public DependableFinder getDependableFinder(int formatId)
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,127,"return	new DDdependableFinder(formatId);"
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,133,"return new DDColumnDependableFinder(formatId, columnBitMap);"
java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java,84,addParms((Vector) params);
java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java,264,"public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)"
java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java,397,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java,398,MethodBuilder mb)
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,74,"public abstract QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,88,"public final QueryTreeNode getNode(int nodeType, Object arg1, ContextManager cm)"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,91,"QueryTreeNode retval = getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,110,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,116,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,136,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,143,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,164,"public QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,172,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,195,"public QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,204,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,227,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,237,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,261,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,272,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,296,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,308,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,333,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,346,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,372,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,386,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,414,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,429,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,458,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,474,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,504,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,521,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,552,"public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,570,"QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,838,getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,820,QueryTreeNode maxWidthNode = getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,134,"public QueryTreeNode getNode(int nodeType, ContextManager cm)"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,539,QueryTreeNode trueNode = nodeFactory.getNode(
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,963,"protected final	void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,964,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,1108,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,1109,MethodBuilder mb)
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,44,public class EmbedConnection40 extends EmbedConnection30 {
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,36,public class EmbedCallableStatement40 extends EmbedCallableStatement30 {
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,542,return ps;
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,684,return ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL;
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,686,return ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,37,public class SQLExceptionFactory {
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,31,import java.sql.SQLException;
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,44,"SQLException next, int severity, Throwable t, Object[] args) {"
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,45,"return new EmbedSQLException(message, messageId, next, severity,"
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,46,"t, args);"
java/engine/org/apache/derby/jdbc/Driver30.java,122,public BrokeredConnection newBrokeredConnection(BrokeredConnectionControl control) {
java/engine/org/apache/derby/jdbc/Driver40.java,126,public BrokeredConnection newBrokeredConnection(BrokeredConnectionControl control) {
java/engine/org/apache/derby/jdbc/XAStatementControl.java,29,import org.apache.derby.iapi.jdbc.EngineStatement;
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,64,this.decoratorPolicyResource = policyResource;
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,101,installSecurityManager(decoratorPolicyResource);
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,126,SecurityManager sm = System.getSecurityManager();
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,127,if (sm != null) {
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,1925,notifyObservers(commitOrAbort);
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,1927,checkObserverException();
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,1929,if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2000,if (postCommitWorks != null && !postCommitWorks.isEmpty())
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2002,int pcsize = postCommitWorks.size();
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2014,work = (Serviceable[])postCommitWorks.toArray(work);
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2019,postCommitWorks.clear();
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2023,boolean doWorkInThisThread = xactFactory.inDatabaseCreation();
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2039,if (work[i].performWork(xc.getContextManager()) == Serviceable.DONE)
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2075,if (postCommitWorks != null)
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2076,postCommitWorks.clear();
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2088,xactFactory.submitPostCommitWork((Serviceable)postCommitWorks.get((i)));
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2092,postCommitWorks.clear();
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,450,for (int index = 0; index < order.length; index++)
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,36,import java.net.URL;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,37,import java.util.Enumeration;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,46,public final class FileMonitor extends BaseMonitor implements java.security.PrivilegedExceptionAction
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,175,synchronized final boolean initialize(boolean lite)
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,177,action = lite ? 0 : 1;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,178,try {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,179,Object ret = java.security.AccessController.doPrivileged(this);
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,181,return ((Boolean) ret).booleanValue();
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,182,} catch (java.security.PrivilegedActionException pae) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,183,throw (RuntimeException) pae.getException();
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,187,synchronized final Properties getDefaultModuleProperties() {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,188,action = 2;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,189,try {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,190,return (Properties) java.security.AccessController.doPrivileged(this);
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,191,} catch (java.security.PrivilegedActionException pae) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,192,throw (RuntimeException) pae.getException();
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,196,public synchronized final String getJVMProperty(String key) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,200,try {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,202,action = 3;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,203,key3 = key;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,204,String value  = (String) java.security.AccessController.doPrivileged(this);
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,205,key3 = null;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,206,return value;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,207,} catch (java.security.PrivilegedActionException pae) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,208,throw (RuntimeException) pae.getException();
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,212,"public synchronized final Thread getDaemonThread(Runnable task, String name, boolean setMinPriority) {"
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,214,action = 4;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,215,key3 = name;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,216,this.task = task;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,217,this.intValue = setMinPriority ? 1 : 0;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,219,try {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,221,Thread t = (Thread) java.security.AccessController.doPrivileged(this);
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,223,key3 = null;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,224,task = null;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,226,return t;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,227,} catch (java.security.PrivilegedActionException pae) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,228,throw (RuntimeException) pae.getException();
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,232,public synchronized final void setThreadPriority(int priority) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,233,action = 5;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,234,intValue = priority;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,235,try {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,236,java.security.AccessController.doPrivileged(this);
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,237,} catch (java.security.PrivilegedActionException pae) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,238,throw (RuntimeException) pae.getException();
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,242,synchronized final InputStream applicationPropertiesStream()
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,247,return (InputStream) java.security.AccessController.doPrivileged(this);
java/engine/org/apache/derby/jdbc/XATransactionState.java,104,conn.setApplicationConnection(null);
java/engine/org/apache/derby/impl/jdbc/authentication/SpecificAuthenticationServiceImpl.java,136,"throw StandardException.newException(SQLState.AUTHENTICATION_SCHEME_ERROR, t,"
java/engine/org/apache/derby/impl/jdbc/authentication/SpecificAuthenticationServiceImpl.java,137,specificAuthenticationScheme);
java/engine/org/apache/derby/impl/sql/compile/CastNode.java,984,mb.push(!sourceCTI.variableLength() || isNumber);
java/engine/org/apache/derby/impl/sql/compile/CastNode.java,862,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/CastNode.java,863,MethodBuilder mb)
java/engine/org/apache/derby/diag/SpaceTable.java,152,conglomTable[i] = new ConglomInfo(
java/engine/org/apache/derby/diag/SpaceTable.java,153,"cds[i].getConglomerateNumber(),"
java/engine/org/apache/derby/diag/SpaceTable.java,155,cds[i].isIndex());
java/engine/org/apache/derby/diag/SpaceTable.java,231,String str = conglomInfo.getConglomName();
java/engine/org/apache/derby/diag/SpaceTable.java,351,"public ConglomInfo(long conglomId, String conglomName, boolean isIndex)"
java/engine/org/apache/derby/diag/SpaceTable.java,138,schemaName = lcc.getCurrentSchemaName();
java/engine/org/apache/derby/diag/SpaceTable.java,145,conglomTable = new ConglomInfo[0];   // make empty conglom table
java/engine/org/apache/derby/diag/SpaceTable.java,146,return;
java/engine/org/apache/derby/diag/SpaceTable.java,154,"cds[i].isIndex() ? cds[i].getConglomerateName() : tableName,"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,30,import java.security.CodeSource;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,31,import java.util.Vector;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,33,import org.apache.derbyTesting.functionTests.harness.BackgroundStreamSaver;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,34,import org.apache.derbyTesting.functionTests.harness.jvm;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,36,public class derbyrunjartest {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,38,public static void main(String[] args) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,41,CodeSource cs = null;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,42,try {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,43,cs = org.apache.derby.iapi.tools.run.class.getProtectionDomain().getCodeSource();
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,44,} catch (SecurityException se) {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,45,"System.out.println(""Security exception: "" + se.getMessage());"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,48,URL result = cs.getLocation();
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,49,jvm jvm = null;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,65,String[][] testCommands = new String[][] {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,66,"{""ij"", ""--help""},"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,67,"{""sysinfo"", ""-cp"", ""help""},"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,68,"{""dblook""},"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,69,"{""server""},"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,72,for (int i = 0; i < testCommands.length; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,73,"runtool(jvm, derbyrunloc, testCommands[i]);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,77,"private static void runtool(jvm jvm, String loc, String[] args)"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,78,throws IOException
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,80,System.out.println(concatenate(args) + ':');
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,82,if (jvm == null) {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,83,org.apache.derby.iapi.tools.run.main(args);
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,84,return;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,87,Vector cmd = jvm.getCommandLine();
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,88,"cmd.addElement(""-jar"");"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,89,cmd.addElement(loc);
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,90,for (int i=0; i < args.length; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,91,cmd.addElement(args[i]);
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,93,String command = concatenate((String[]) cmd.toArray(new String[0]));
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,95,Process pr = null;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,97,try
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,99,pr = Runtime.getRuntime().exec(command);
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,100,BackgroundStreamSaver saver =
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,101,"new BackgroundStreamSaver(pr.getInputStream(), System.out);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,102,saver.finish();
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,103,pr.waitFor();
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,104,pr.destroy();
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,105,} catch(Throwable t) {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,106,"System.out.println(""Process exception: "" + t.getMessage());"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,107,if (pr != null)
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,109,pr.destroy();
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,110,pr = null;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,115,private static String concatenate(String[] args) {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,116,StringBuffer buf = new StringBuffer();
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,117,for (int i = 0; i < args.length; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,118,buf.append(args[i]);
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,119,if (i + 1 < args.length) buf.append(' ');
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,121,return buf.toString();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,48,"String filePath = ""wisc_setup.sql"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,50,try
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,52,"inStream = new BufferedInputStream(new FileInputStream(filePath),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,53,utilMain.BUFFEREDFILESIZE);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,54,} catch (FileNotFoundException e)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,56,"System.out.println(""unable to find input file ""+filePath);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,57,throw e;
java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java,755,if (checkKey != verifyKey)
java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java,756,throw StandardException.newException(errorState);
java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java,812,throw StandardException.newException(SQLState.WRONG_BOOT_PASSWORD);
java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java,131,"public JCECipherFactory(boolean create,"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,24,import org.apache.derby.iapi.services.compiler.ClassBuilder;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,25,import org.apache.derby.iapi.services.compiler.MethodBuilder;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,26,import org.apache.derby.iapi.services.compiler.LocalField;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,28,import org.apache.derby.iapi.services.classfile.ClassHolder;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,29,import org.apache.derby.iapi.services.classfile.ClassMember;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,30,import org.apache.derby.iapi.services.classfile.ClassFormatOutput;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,31,import org.apache.derby.iapi.services.loader.ClassFactory;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,33,import org.apache.derby.iapi.services.monitor.Monitor;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,45,import org.apache.derby.iapi.services.classfile.VMDescriptor;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,47,import org.apache.derby.impl.services.bytecode.GClass;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,49,import java.io.IOException;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,280,"BCMethod m = new BCMethod(this, ""void"", ""<init>"","
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,281,"modifiers,"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,282,"(String []) null,"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,283,factory);
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,285,return m;
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,678,if (stackDepth == 0)
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,679,overflowMethodCheck();
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,739,if (stackDepth == 0)
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,740,overflowMethodCheck();
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,925,if (stackDepth == 0)
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,926,overflowMethodCheck();
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,1075,if (stackDepth == 0)
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,1076,overflowMethodCheck();
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,289,"getClassBuilder().newFieldWithAccessors(""getExecutionCount"", ""setExecutionCount"","
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,290,"Modifier.PROTECTED, true, ""int"");"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,292,"getClassBuilder().newFieldWithAccessors(""getRowCountCheckVector"", ""setRowCountCheckVector"","
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,293,"Modifier.PROTECTED, true, ""java.util.Vector"");"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,295,"getClassBuilder().newFieldWithAccessors(""getStalePlanCheckInterval"", ""setStalePlanCheckInterval"","
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,296,"Modifier.PROTECTED, true, ""int"");"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,24,import org.apache.derby.iapi.services.compiler.ClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,25,import org.apache.derby.iapi.services.compiler.MethodBuilder;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,26,import org.apache.derby.iapi.services.compiler.LocalField;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,27,import org.apache.derby.iapi.reference.ClassName;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,30,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,32,import org.apache.derby.iapi.sql.compile.CompilerContext;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,33,import org.apache.derby.iapi.sql.compile.CodeGeneration;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,35,import org.apache.derby.iapi.sql.execute.CursorResultSet;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,37,import org.apache.derby.iapi.sql.ResultSet;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,39,import org.apache.derby.iapi.sql.execute.ExecRow;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,41,import org.apache.derby.iapi.types.DataTypeDescriptor;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,42,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,46,import org.apache.derby.iapi.services.loader.GeneratedMethod;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,49,import java.lang.reflect.Modifier;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,51,import java.io.PrintWriter;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,53,import java.io.File;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,54,import java.io.FileOutputStream;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,55,import java.io.ByteArrayOutputStream;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,56,import java.io.IOException;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,57,import java.util.Hashtable;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,230,"MethodBuilder mb = cb.newMethodBuilder(Modifier.PUBLIC,"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,231,"ClassName.ResultSet, ""execute"");"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,286,executeMethod.methodReturn();
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,287,executeMethod.complete();
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,434,executeMethod.getField(lf);
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,435,"executeMethod.callMethod(VMOpcode.INVOKEVIRTUAL, (String) null, ""forget"", ""void"", 0);"
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,39,public int getExecutionCount() { return 0;}
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,40,public void setExecutionCount(int count) {}
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,42,public Vector getRowCountCheckVector() {return null;}
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,43,public void setRowCountCheckVector(Vector v) {}
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,45,public int getStalePlanCheckInterval() { return Integer.MAX_VALUE; }
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,46,public void setStalePlanCheckInterval(int count) {}
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,48,public ResultSet execute() throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,50,"throwIfClosed(""execute"");"
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,51,startExecution();
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,29,import org.apache.derby.iapi.reference.ClassName;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,36,import org.apache.derby.iapi.sql.execute.ResultSetFactory;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,37,import org.apache.derby.iapi.sql.execute.ExecutionFactory;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,38,import org.apache.derby.iapi.sql.execute.ExecIndexRow;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,40,import org.apache.derby.iapi.sql.Activation;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,41,import org.apache.derby.iapi.sql.ParameterValueSet;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,42,import org.apache.derby.iapi.sql.Row;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,44,import org.apache.derby.iapi.sql.execute.ExecRow;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,46,import org.apache.derby.impl.sql.compile.OrderedColumnList;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,47,import org.apache.derby.impl.sql.compile.ResultColumnList;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,48,import org.apache.derby.impl.sql.execute.IndexColumnOrder;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,61,import org.apache.derby.iapi.services.loader.ClassFactory;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,62,import org.apache.derby.iapi.services.loader.GeneratedClass;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,63,import org.apache.derby.iapi.services.loader.GeneratedByteCode;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,64,import org.apache.derby.iapi.services.loader.GeneratedMethod;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,66,import java.lang.reflect.Modifier;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,67,import org.apache.derby.iapi.services.classfile.VMOpcode;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,69,import org.apache.derby.iapi.services.monitor.Monitor;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,71,import org.apache.derby.iapi.services.io.FormatableArrayHolder;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,73,import java.io.Serializable;
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,227,"""fillResultSet"");"
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,261,generatingClass.finishExecuteMethod(this instanceof CursorNode);
java/drda/org/apache/derby/impl/drda/XADatabase.java,51,private EmbeddedXADataSource xaDataSource;
java/drda/org/apache/derby/impl/drda/XADatabase.java,70,if (xaDataSource == null)
java/drda/org/apache/derby/impl/drda/XADatabase.java,72,xaDataSource = new EmbeddedXADataSource();
java/drda/org/apache/derby/impl/drda/XADatabase.java,67,synchronized void makeConnection(Properties p) throws
java/drda/org/apache/derby/impl/drda/XADatabase.java,68,SQLException
java/engine/org/apache/derby/jdbc/EmbedPooledConnection40.java,50,"EmbedPooledConnection40 (ReferenceableDataSource ds, String user,"
java/engine/org/apache/derby/jdbc/EmbedXAConnection.java,50,"EmbedXAConnection(EmbeddedDataSource ds, ResourceAdapter ra, String u, String p, boolean requestPassword) throws SQLException"
java/engine/org/apache/derby/jdbc/EmbedXAConnection40.java,50,"EmbedXAConnection40 (EmbeddedDataSource ds, ResourceAdapter ra,"
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,52,"implements	javax.sql.ConnectionPoolDataSource"
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,99,"protected PooledConnection createPooledConnection (String user,"
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,58,extends EmbeddedConnectionPoolDataSource
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,59,implements ConnectionPoolDataSource {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,194,public class EmbeddedDataSource extends ReferenceableDataSource implements
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,195,javax.sql.DataSource
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,520,StringBuffer sb = new StringBuffer(64);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,522,sb.append(Attribute.PROTOCOL);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,526,String dbName = getDatabaseName();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,528,if (dbName != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,529,dbName = dbName.trim();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,532,if (dbName == null || dbName.length() == 0) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,540,"dbName = "" "";"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,543,sb.append(dbName);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,546,String connAttrs = getConnectionAttributes();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,547,if (connAttrs != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,548,connAttrs = connAttrs.trim();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,549,if (connAttrs.length() != 0) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,550,sb.append(';');
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,551,sb.append(connectionAttributes);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,555,jdbcurl = sb.toString();
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,70,public class EmbeddedXADataSource extends EmbeddedDataSource implements
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,71,javax.sql.XADataSource
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,102,"setupResourceAdapter(null, null, false);"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,120,"setupResourceAdapter(user, password, true);"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,121,"return createXAConnection (ra, user, password, true);"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,128,void update() {
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,199,"protected XAConnection createXAConnection (ResourceAdapter ra,"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,63,public class EmbeddedXADataSource40 extends EmbeddedXADataSource {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,27,import java.io.Serializable;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,28,import java.io.PrintWriter;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,29,import java.util.Properties;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,32,import javax.naming.NamingException;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,33,import javax.naming.Referenceable;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,24,import java.lang.reflect.*;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,293,RefAddr attribute = (RefAddr) e.nextElement();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,185,public class EmbeddedDataSource40 extends EmbeddedDataSource {
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,195,if (ad == null && noSchema && !forCallStatement)
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,202,"sd = getSchemaDescriptor(""SYSFUN"", true);"
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,204,"resolveRoutine(fromList, subqueryList, aggregateVector, sd);"
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,594,"public	void generateOneParameter(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,723,"public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)"
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,773,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,774,MethodBuilder mb)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java,61,suite.addTest(LangScripts.suite());
java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java,50,public static Test suite() {
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,306,if(!expression.isConstantExpression()){
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,307,return false;
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,310,return expression.getConstantValueAsObject() instanceof Integer;
java/client/org/apache/derby/client/ClientPooledConnection.java,26,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/ClientPooledConnection.java,56,"public ClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientPooledConnection.java,96,"public ClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientPooledConnection.java,326,"protected NetXAConnection getNetXAConnection (ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientPooledConnection40.java,33,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/ClientPooledConnection40.java,51,"public ClientPooledConnection40(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientPooledConnection40.java,60,"public ClientPooledConnection40(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientXAConnection.java,31,import org.apache.derby.jdbc.ClientXADataSource;
java/client/org/apache/derby/client/ClientXAConnection.java,44,"public ClientXAConnection(ClientXADataSource ds,"
java/client/org/apache/derby/client/ClientXAConnection.java,102,return derbyds_;
java/client/org/apache/derby/client/ClientXAConnection.java,105,"public NetXAConnection createControlConnection(NetLogWriter logWriter,"
java/client/org/apache/derby/client/ClientXAConnection.java,106,"String user,"
java/client/org/apache/derby/client/ClientXAConnection.java,107,"String password,"
java/client/org/apache/derby/client/ClientXAConnection.java,108,"org.apache.derby.jdbc.ClientDataSource dataSource,"
java/client/org/apache/derby/client/ClientXAConnection.java,109,"int rmId,"
java/client/org/apache/derby/client/ClientXAConnection.java,110,boolean isXAConn) throws SQLException {
java/client/org/apache/derby/client/ClientXAConnection.java,111,try
java/client/org/apache/derby/client/ClientXAConnection40.java,34,import org.apache.derby.jdbc.ClientXADataSource;
java/client/org/apache/derby/client/ClientXAConnection40.java,53,"public ClientXAConnection40 (ClientXADataSource ds,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,27,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,44,"ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,45,"LogWriter logWriter,String user,String password)"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,46,throws SQLException;
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,53,"ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,54,"LogWriter logWriter,String user,String password,int rmId)"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,55,throws SQLException;
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,170,"org.apache.derby.jdbc.ClientBaseDataSource clientDataSource,String user,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,191,"String user,String password,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,192,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,int rmId,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,202,"LogWriter netLogWriter,String ipaddr,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,203,"int portNumber,org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,230,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,int rmId,"
java/client/org/apache/derby/client/am/Configuration.java,39,public static int traceLevel__ = org.apache.derby.jdbc.ClientBaseDataSource.TRACE_ALL;
java/client/org/apache/derby/client/am/LogWriter.java,28,import javax.naming.NamingException;
java/client/org/apache/derby/client/am/LogWriter.java,29,import javax.naming.RefAddr;
java/client/org/apache/derby/client/am/LogWriter.java,30,import javax.naming.Reference;
java/client/org/apache/derby/client/am/LogWriter.java,31,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/am/LogWriter.java,33,import org.apache.derby.jdbc.ClientDataSource;
java/client/org/apache/derby/client/am/LogWriter.java,213,} else if (instance instanceof Connection && loggingEnabled(ClientDataSource.TRACE_CONNECTION_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,215,} else if (instance instanceof ResultSet && loggingEnabled(ClientDataSource.TRACE_RESULT_SET_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,217,} else if (instance instanceof CallableStatement && loggingEnabled(ClientDataSource.TRACE_STATEMENT_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,219,} else if (instance instanceof PreparedStatement && loggingEnabled(ClientDataSource.TRACE_STATEMENT_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,221,} else if (instance instanceof Statement && loggingEnabled(ClientDataSource.TRACE_STATEMENT_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,225,else if (instance instanceof Blob && loggingEnabled(ClientDataSource.TRACE_ALL)) // add a trace level for lobs !!
java/client/org/apache/derby/client/am/LogWriter.java,230,else if (instance instanceof Clob && loggingEnabled(ClientDataSource.TRACE_ALL)) // add a trace level for bobs !!
java/client/org/apache/derby/client/am/LogWriter.java,235,else if (instance instanceof DatabaseMetaData && loggingEnabled(ClientDataSource.TRACE_ALL)) // add a trace level for dbmd ??
java/client/org/apache/derby/client/am/LogWriter.java,240,else if (loggingEnabled(ClientDataSource.TRACE_XA_CALLS) &&
java/client/org/apache/derby/client/am/LogWriter.java,243,} else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,246,} else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,249,} else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,252,} else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,255,} else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,846,if (!loggingEnabled(ClientDataSource.TRACE_DIAGNOSTICS)) {
java/client/org/apache/derby/client/am/LogWriter.java,859,if (!loggingEnabled(ClientDataSource.TRACE_DIAGNOSTICS)) {
java/client/org/apache/derby/client/am/LogWriter.java,873,if (!loggingEnabled(ClientDataSource.TRACE_DIAGNOSTICS)) {
java/client/org/apache/derby/client/am/LogWriter.java,888,if (!loggingEnabled(ClientDataSource.TRACE_PARAMETER_META_DATA) || columnMetaData == null) {
java/client/org/apache/derby/client/am/LogWriter.java,910,if (!loggingEnabled(ClientDataSource.TRACE_RESULT_SET_META_DATA) || columnMetaData == null) {
java/client/org/apache/derby/client/am/LogWriter.java,991,public void traceConnectEntry(ClientBaseDataSource dataSource) {
java/client/org/apache/derby/client/am/LogWriter.java,995,if (loggingEnabled(ClientDataSource.TRACE_DRIVER_CONFIGURATION)) {
java/client/org/apache/derby/client/am/LogWriter.java,998,if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1011,if (loggingEnabled(ClientDataSource.TRACE_DRIVER_CONFIGURATION)) {
java/client/org/apache/derby/client/am/LogWriter.java,1014,if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1019,"public void traceConnectResetEntry(Object instance, LogWriter logWriter,"
java/client/org/apache/derby/client/am/LogWriter.java,1020,"String user, ClientBaseDataSource ds) {"
java/client/org/apache/derby/client/am/LogWriter.java,1025,if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1034,if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1043,if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1051,private void traceConnectsResetEntry(ClientBaseDataSource dataSource) {
java/client/org/apache/derby/client/am/LogWriter.java,1065,private void traceConnectsEntry(ClientBaseDataSource dataSource) {
java/client/org/apache/derby/client/am/LogWriter.java,1231,private Properties getProperties(ClientBaseDataSource cds)
java/client/org/apache/derby/client/am/LogWriter.java,1234,Properties properties = new Properties();
java/client/org/apache/derby/client/am/LogWriter.java,1236,try {
java/client/org/apache/derby/client/am/LogWriter.java,1237,Reference ref = cds.getReference();
java/client/org/apache/derby/client/am/LogWriter.java,1239,for (Enumeration e = ref.getAll(); e.hasMoreElements();) {
java/client/org/apache/derby/client/am/LogWriter.java,1241,RefAddr attribute = (RefAddr) e.nextElement();
java/client/org/apache/derby/client/am/LogWriter.java,1243,String propertyKey = attribute.getType();
java/client/org/apache/derby/client/am/LogWriter.java,1244,String value = (String) attribute.getContent();
java/client/org/apache/derby/client/am/LogWriter.java,1247,if (Attribute.PASSWORD_ATTR.equals(propertyKey)) {
java/client/org/apache/derby/client/am/LogWriter.java,1248,"value = ""********"";"
java/client/org/apache/derby/client/am/LogWriter.java,1251,if(value != null)
java/client/org/apache/derby/client/am/LogWriter.java,1252,"properties.setProperty(propertyKey, value);"
java/client/org/apache/derby/client/am/LogWriter.java,1254,} catch (NamingException e) {
java/client/org/apache/derby/client/am/LogWriter.java,1255,"throw new SqlException(this,"
java/client/org/apache/derby/client/am/LogWriter.java,1256,"new ClientMessageId(SQLState.JAVA_EXCEPTION),"
java/client/org/apache/derby/client/am/LogWriter.java,1257,"e.getClass().getName(), e.getMessage(), e);"
java/client/org/apache/derby/client/am/LogWriter.java,426,"private void traceEntryAllArgs(Object instance, String methodName, String argList) {"
java/client/org/apache/derby/client/am/LogWriter.java,274,"traceExternalMethod(instance, className, methodName);"
java/client/org/apache/derby/client/am/LogWriter.java,451,"printWriter_.println("" "" + argList + "" called"");"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,54,"public ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,55,"LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,62,"public ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,63,"LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,64,"String password,int rmId) throws SQLException {"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,187,"org.apache.derby.jdbc.ClientBaseDataSource clientDataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,211,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,223,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,249,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,66,"ClientBaseDataSource ds, LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,74,"ClientBaseDataSource ds, LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,181,"org.apache.derby.jdbc.ClientBaseDataSource clientDataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,205,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,217,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,242,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection40.java,68,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection40.java,84,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection40.java,92,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection40.java,123,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetXAConnection.java,66,"public NetXAConnection(NetLogWriter netLogWriter,"
java/client/org/apache/derby/client/net/NetXAConnection.java,67,"String user,"
java/client/org/apache/derby/client/net/NetXAConnection.java,68,"String password,"
java/client/org/apache/derby/client/net/NetXAConnection.java,69,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetXAConnection.java,70,"int rmId,"
java/client/org/apache/derby/client/net/NetXAConnection.java,71,"boolean isXAConn,"
java/client/org/apache/derby/client/net/NetXAConnection.java,72,ClientPooledConnection cpc) throws SqlException {
java/client/org/apache/derby/client/net/NetXAConnection.java,262,"protected NetConnection createNetConnection (NetLogWriter netLogWriter,"
java/client/org/apache/derby/client/net/NetXAConnection.java,263,"String user,"
java/client/org/apache/derby/client/net/NetXAConnection.java,264,"String password,"
java/client/org/apache/derby/client/net/NetXAConnection.java,265,"org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetXAConnection.java,266,"int rmId,"
java/client/org/apache/derby/client/net/NetXAConnection.java,267,"boolean isXAConn,"
java/client/org/apache/derby/client/net/NetXAConnection.java,268,ClientPooledConnection cpc) throws SqlException {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,45,implements ConnectionPoolDataSource {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,49,extends ClientConnectionPoolDataSource {
java/client/org/apache/derby/jdbc/ClientDataSource40.java,106,public class ClientDataSource40 extends ClientDataSource {
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,56,public class ClientXADataSource40 extends ClientXADataSource {
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,44,"""org.apache.derby.jdbc.ClientDataSource"","
java/engine/org/apache/derby/impl/sql/execute/HashTableResultSet.java,380,if (! (columns[0] instanceof Storable))
java/engine/org/apache/derby/impl/store/raw/data/AllocPageOperation.java,53,"public AllocPageOperation(AllocPage allocPage, long pageNumber, int doStatus, int undoStatus)"
java/engine/org/apache/derby/impl/store/raw/data/ChainAllocPageOperation.java,53,"public ChainAllocPageOperation(AllocPage allocPage, long pageNumber, long pageOffset)"
java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation.java,80,public CompressSpacePageOperation(
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,81,"public CopyRowsOperation(RawTransaction t, BasePage destPage, BasePage srcPage,"
java/engine/org/apache/derby/impl/store/raw/data/DeleteOperation.java,85,"public DeleteOperation(RawTransaction t, BasePage page, int slot, int recordId,"
java/engine/org/apache/derby/impl/store/raw/data/InitPageOperation.java,76,"public InitPageOperation(BasePage page, int flag, int formatid,"
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,91,public InsertOperation(
java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java,62,public InvalidatePageOperation(BasePage page)
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,74,public abstract class LogicalPageOperation
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,91,"protected LogicalPageOperation(BasePage page, LogicalUndo undo, int recordId)"
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,70,public class LogicalUndoOperation extends PageBasicOperation implements Compensation {
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,77,protected LogicalUndoOperation(BasePage page)
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,83,"public LogicalUndoOperation(BasePage page, int recordId, LogicalPageOperation op)"
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,82,"public abstract class PageBasicOperation implements Loggable, RePreparable"
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,96,protected PageBasicOperation(BasePage page)
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,114,public PageBasicOperation()
java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java,59,public abstract class PhysicalPageOperation extends PageBasicOperation implements Undoable
java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java,61,protected PhysicalPageOperation(BasePage page)
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,65,public class PhysicalUndoOperation extends PageBasicOperation implements Compensation {
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,70,protected PhysicalUndoOperation(BasePage page)
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,76,"public PhysicalUndoOperation(BasePage page, PhysicalPageOperation op)"
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,89,"public PurgeOperation(RawTransaction t, BasePage page, int slot, int"
java/engine/org/apache/derby/impl/store/raw/data/RawField.java,24,public class RawField {
java/engine/org/apache/derby/impl/store/raw/data/RawField.java,26,private byte[] data;
java/engine/org/apache/derby/impl/store/raw/data/RawField.java,28,public RawField(byte[] data) {
java/engine/org/apache/derby/impl/store/raw/data/RawField.java,32,public byte[] getData() {
java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java,55,public class SetReservedSpaceOperation extends PageBasicOperation {
java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java,62,"public SetReservedSpaceOperation(BasePage page, int slot,"
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,87,public UpdateFieldOperation(
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,85,public UpdateOperation(
java/engine/org/apache/derby/impl/sql/execute/AggregateSortObserver.java,48,public class AggregateSortObserver extends BasicSortObserver
java/engine/org/apache/derby/impl/sql/execute/AggregateSortObserver.java,51,"protected GenericAggregator[]	aggsToProcess;"
java/engine/org/apache/derby/impl/sql/execute/AggregateSortObserver.java,52,"protected GenericAggregator[]	aggsToInitialize;"
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,56,public class DeleteCascadeResultSet extends DeleteResultSet
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,60,public ResultSet[] dependentResultSets;
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,436,Hashtable parentResultSets = activation.getParentResultSets();
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,437,for (Enumeration e = parentResultSets.keys() ; e.hasMoreElements() ;)
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,459,Hashtable parentResultSets = activation.getParentResultSets();
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,460,for (Enumeration e = parentResultSets.keys() ; e.hasMoreElements() ;)
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,137,runFkChecker(true); //check for only RESTRICT referential action rule violations
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,142,runFkChecker(false); //check for all constraint violations
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,296,void runFkChecker(boolean restrictCheckOnly) throws StandardException
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,304,((UpdateResultSet) dependentResultSets[i]).runChecker(restrictCheckOnly);
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,307,((DeleteCascadeResultSet)dependentResultSets[i]).runFkChecker(restrictCheckOnly);
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,314,super.runFkChecker(restrictCheckOnly);
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,39,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,41,import java.util.Vector;
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,42,import java.util.Hashtable;
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,43,import java.util.Enumeration;
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,65,private String resultSetId;
java/engine/org/apache/derby/impl/sql/execute/DeleteConstantAction.java,100,"public	DeleteConstantAction("
java/engine/org/apache/derby/impl/sql/execute/IndexRow.java,45,public class IndexRow extends ValueRow implements ExecIndexRow
java/engine/org/apache/derby/impl/sql/execute/IndexSetChanger.java,46,public class IndexSetChanger
java/engine/org/apache/derby/impl/sql/execute/InsertConstantAction.java,124,"public	InsertConstantAction(TableDescriptor tableDescriptor,"
java/engine/org/apache/derby/impl/sql/execute/InsertConstantAction.java,90,protected RowLocation[] autoincRowLocation;
java/engine/org/apache/derby/impl/sql/execute/InsertConstantAction.java,267,public RowLocation[] getAutoincRowLocation()
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,61,"public class InternalTriggerExecutionContext implements TriggerExecutionContext, ExecutionStmtValidator"
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,141,public InternalTriggerExecutionContext
java/engine/org/apache/derby/impl/sql/execute/UpdatableVTIConstantAction.java,93,"public	UpdatableVTIConstantAction( int statementType,"
java/engine/org/apache/derby/impl/sql/execute/UpdateConstantAction.java,113,"public	UpdateConstantAction("
java/engine/org/apache/derby/impl/sql/compile/NormalizeResultSetNode.java,138,"public void setRefActionInfo(long fkIndexConglomId,"
java/engine/org/apache/derby/impl/sql/compile/NormalizeResultSetNode.java,99,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/NormalizeResultSetNode.java,100,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ParseException.java,33,public class ParseException extends Exception {
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,116,private Object [] additionalArgs;
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,154,((methodNameOrAddedArgs == null) ||
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,155,"(methodNameOrAddedArgs instanceof Object[]))),"
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,164,this.additionalArgs = (Object[])methodNameOrAddedArgs;
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,438,"((additionalArgs != null) && (additionalArgs.length > 0)),"
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,857,mb.push(((Boolean)additionalArgs[0]).booleanValue());
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,662,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,663,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,819,"protected int addXmlOpMethodParams(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,293,Object[] objArray = readObjectArray(in);
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,294,int size = 0;
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,296,if (objArray == null)
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,297,return null;
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,299,String[] stringArray = new String[size = objArray.length];
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,301,for (int i = 0; i < size; i++)
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,303,stringArray[i] = (String)objArray[i];
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,28,import java.lang.reflect.Array;
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,138,"ResultColumnDescriptor[]	getTargetColumns();"
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,145,"String[]	getUpdateColumns();"
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,74,"Object[]	getSavedObjects();"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,61,"ResultColumnDescriptor[]	targetColumns;"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,62,"String[] 					updateColumns;"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,79,"ResultColumnDescriptor[]	targetColumns,"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,80,"String[]					updateColumns"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,85,this.targetColumns = targetColumns;
java/engine/org/apache/derby/impl/sql/CursorInfo.java,86,this.updateColumns = updateColumns;
java/engine/org/apache/derby/impl/sql/CursorInfo.java,105,"ArrayUtil.writeArray(out, targetColumns);"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,106,"ArrayUtil.writeArray(out, updateColumns);"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,122,int len = ArrayUtil.readArrayLength(in);
java/engine/org/apache/derby/impl/sql/CursorInfo.java,123,if (len != 0)
java/engine/org/apache/derby/impl/sql/CursorInfo.java,125,targetColumns = new ResultColumnDescriptor[len];
java/engine/org/apache/derby/impl/sql/CursorInfo.java,126,"ArrayUtil.readArrayItems(in, targetColumns);"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,128,len = ArrayUtil.readArrayLength(in);
java/engine/org/apache/derby/impl/sql/CursorInfo.java,129,if (len != 0)
java/engine/org/apache/derby/impl/sql/CursorInfo.java,131,updateColumns = new String[len];
java/engine/org/apache/derby/impl/sql/CursorInfo.java,132,"ArrayUtil.readArrayItems(in, updateColumns);"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,147,StringBuffer strbuf = new StringBuffer();
java/engine/org/apache/derby/impl/sql/CursorInfo.java,149,"strbuf.append(""CursorInfo""+"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,152,"""\n\tupdateColumns: "");"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,154,if (updateColumns == null)
java/engine/org/apache/derby/impl/sql/CursorInfo.java,156,"strbuf.append(""NULL\n"");"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,158,else
java/engine/org/apache/derby/impl/sql/CursorInfo.java,160,"strbuf.append(""{"");"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,161,for (int i = 0; i < updateColumns.length; i++)
java/engine/org/apache/derby/impl/sql/CursorInfo.java,163,if (i > 0)
java/engine/org/apache/derby/impl/sql/CursorInfo.java,164,"strbuf.append("","");"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,165,strbuf.append(updateColumns[i]);
java/engine/org/apache/derby/impl/sql/CursorInfo.java,167,"strbuf.append("")\n"");"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,170,"strbuf.append(""\tTargetColumnDescriptors: \n"");"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,171,if (targetColumns == null)
java/engine/org/apache/derby/impl/sql/CursorInfo.java,173,"strbuf.append(""NULL"");"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,175,else
java/engine/org/apache/derby/impl/sql/CursorInfo.java,177,for (int i = 0; i < targetColumns.length; i++)
java/engine/org/apache/derby/impl/sql/CursorInfo.java,179,strbuf.append(targetColumns[i]);
java/engine/org/apache/derby/impl/sql/CursorInfo.java,181,"strbuf.append(""\n"");"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,183,return strbuf.toString();
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,733,"genTargetResultColList(),"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,734,getUpdatableColumns());
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,560,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,561,MethodBuilder mb) throws StandardException
java/engine/org/apache/derby/iapi/services/property/PropertyUtil.java,67,public static final String[] servicePropertyList = {
java/engine/org/apache/derby/impl/store/access/PropertyConglomerate.java,732,for (int i = 0; i < PropertyUtil.servicePropertyList.length; i++) {
java/engine/org/apache/derby/impl/store/access/PropertyConglomerate.java,734,serviceProperties.getProperty(PropertyUtil.servicePropertyList[i]);
java/engine/org/apache/derby/impl/store/access/PropertyConglomerate.java,735,"if (value != null) set.put(PropertyUtil.servicePropertyList[i], value);"
java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java,333,public void setSavedObjects(Object[] objs);
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,350,public void setSavedObjects(Object[] objs)
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,352,if (objs == null)
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,354,return;
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,357,for (int i = 0; i < objs.length; i++)
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,359,addSavedObject(objs[i]);
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,153,scanIsolationLevel = ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,598,public DataTypeDescriptor[] getParameterTypes()
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,85,private FormatableHashtable compileTimeConstants;
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,86,private int ctcNumber;
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,99,private int scanIsolationLevel = ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,576,return ExecutionContext.CS_TO_JDBC_ISOLATION_LEVEL_MAP[getScanIsolationLevel()];
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,74,"public  DDColumnDependableFinder(int formatId, byte[] columnBitMap)"
java/engine/org/apache/derby/impl/sql/execute/rts/RealDeleteCascadeResultSetStatistics.java,38,"public 	ResultSetStatistics[] 	dependentTrackingArray;"
java/engine/org/apache/derby/impl/sql/execute/rts/RealDeleteCascadeResultSetStatistics.java,57,this.dependentTrackingArray = dependentTrackingArray;
java/engine/org/apache/derby/impl/sql/execute/rts/RealHashScanStatistics.java,113,this.hashKeyColumns = hashKeyColumns;
java/engine/org/apache/derby/impl/sql/execute/rts/RealHashTableStatistics.java,97,this.hashKeyColumns = hashKeyColumns;
java/engine/org/apache/derby/impl/sql/execute/rts/RealHashTableStatistics.java,108,this.subqueryTrackingArray = subqueryTrackingArray;
java/engine/org/apache/derby/impl/sql/execute/rts/RealProjectRestrictStatistics.java,94,this.subqueryTrackingArray = subqueryTrackingArray;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,98,this.beginCompilationTimestamp = beginCompilationTimestamp;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,99,this.endCompilationTimestamp = endCompilationTimestamp;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,100,this.beginExecutionTimestamp = beginExecutionTimestamp;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,101,this.endExecutionTimestamp = endExecutionTimestamp;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,102,this.subqueryTrackingArray = subqueryTrackingArray;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,175,return beginCompilationTimestamp;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,185,return endCompilationTimestamp;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,195,return beginExecutionTimestamp;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,205,return endExecutionTimestamp;
java/engine/org/apache/derby/iapi/sql/dictionary/CatalogRowFactory.java,254,this.indexColumnPositions = indexColumnPositions;
java/engine/org/apache/derby/iapi/sql/dictionary/CatalogRowFactory.java,255,this.indexUniqueness = indexUniqueness;
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,220,this.columnNames = columnNames;
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,231,return columnNames;
java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java,104,"return	indexRowGenerators;"
java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java,118,"return	indexConglomerateNumbers;"
java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java,131,"return	indexNames;"
java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java,146,"return	distinctIndexRowGenerators;"
java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java,161,"return	distinctIndexConglomerateNumbers;"
java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java,175,"return	indexNames;"
java/engine/org/apache/derby/iapi/sql/dictionary/StatisticsDescriptor.java,75,public Timestamp getUpdateTimestamp() { return statUpdateTime; }
java/drda/org/apache/derby/impl/drda/DDMReader.java,995,e.printStackTrace(agent.getServer().logWriter);
java/drda/org/apache/derby/impl/drda/DDMReader.java,1336,e.printStackTrace(agent.getServer().logWriter);
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,197,private int defaultIsolationLevel = ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,221,protected int prepareIsolationLevel = ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,2411,return (isolationLevel == ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL) ? defaultIsolationLevel : isolationLevel;
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,2419,if( isolationLevel >= 0 && isolationLevel < ExecutionContext.CS_TO_SQL_ISOLATION_MAP.length)
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,2420,return ExecutionContext.CS_TO_SQL_ISOLATION_MAP[ isolationLevel][0];
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,2421,return ExecutionContext.CS_TO_SQL_ISOLATION_MAP[ ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL][0];
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,2440,return ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java,304,isolationLevel = ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java,316,case ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java,321,case ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java,326,case ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java,331,case ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/sql/compile/CharStream.java,39,public interface CharStream {
java/engine/org/apache/derby/impl/sql/compile/Token.java,28,public class Token {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSetMetaData.java,62,this.columnInfo = columnInfo;
java/engine/org/apache/derby/impl/jdbc/EmbedSQLException.java,89,return arguments;
java/engine/org/apache/derby/impl/sql/GenericResultDescription.java,129,return columns;
java/engine/org/apache/derby/impl/sql/GenericResultDescription.java,81,this.columns = columns;
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,24,import org.apache.derby.iapi.sql.compile.Visitable;
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,66,"ResultColumnList	resultColumns;"
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,67,"ResultSetNode		queryExpression;"
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,68,"String				qeText;"
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,69,"int					checkOption;"
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,70,"ProviderInfo[]		providerInfos;"
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,71,"ColumnInfo[]		colInfos;"
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,158,"public	ProviderInfo[]	getProviderInfo() { return providerInfos; }"
java/engine/org/apache/derby/impl/sql/depend/BasicProviderInfo.java,58,"public	UUID						uuid;"
java/engine/org/apache/derby/impl/sql/depend/BasicProviderInfo.java,59,"public	DependableFinder			dFinder;"
java/engine/org/apache/derby/impl/sql/depend/BasicProviderInfo.java,60,"public	String						providerName;"
java/engine/org/apache/derby/impl/sql/depend/BasicProviderInfo.java,77,"public	BasicProviderInfo("
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,190,if (((isBefore == null) ||
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,191,(triggerArray[i].isBeforeTrigger() == isBefore.booleanValue())) &&
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,192,((isRow == null) ||
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,193,(triggerArray[i].isRowTrigger() == isRow.booleanValue())))
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,220,"ArrayUtil.writeIntArray(out, columnIds);"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,221,"ArrayUtil.writeArray(out, columnNames);"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,238,columnIds = ArrayUtil.readIntArray(in);
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,240,int len = ArrayUtil.readArrayLength(in);
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,241,if (len > 0)
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,243,columnNames = new String[len];
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,244,"ArrayUtil.readArrayItems(in, columnNames);"
java/engine/org/apache/derby/iapi/sql/Activation.java,569,public Hashtable getParentResultSets();
java/engine/org/apache/derby/impl/sql/compile/TablePrivilegesNode.java,120,public PrivilegeInfo makePrivilegeInfo()
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,78,"public long 						autoincStart;"
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,79,"public long 						autoincInc;"
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,83,"public long 						autoinc_create_or_modify_Start_Increment = -1;"
java/engine/org/apache/derby/impl/sql/execute/ConstraintInfo.java,97,this.columnNames = columnNames;
java/engine/org/apache/derby/impl/sql/execute/ConstraintInfo.java,242,public String[] getReferencedColumnNames()
java/engine/org/apache/derby/impl/sql/execute/ConstraintInfo.java,243,{ return columnNames; }
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,79,"public String				fkConstraintNames[];"
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,80,"public String				tableName;"
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,81,"public int					type;"
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,82,"public UUID					refUUID;"
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,83,"public long					refConglomNumber;"
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,84,"public UUID[]				fkUUIDs;"
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,85,"public long[]				fkConglomNumbers;"
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,86,"public boolean[]			fkIsSelfReferencing;"
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,87,"public int[]				colArray;"
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,88,"public int					stmtType;"
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,89,"public RowLocation			rowLocation;"
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,90,"public int[] 	            raRules;"
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,136,this.fkConstraintNames = fkConstraintNames;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,142,this.fkUUIDs = fkUUIDs;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,143,this.fkConglomNumbers = fkConglomNumbers;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,144,this.fkIsSelfReferencing = fkIsSelfReferencing;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,145,this.colArray = colArray;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,147,this.raRules = raRules;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,352,"str.append(""\nReferenced Key UUID:\t\t""+refUUID);"
java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java,64,private TableDescriptor td;
java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java,65,private boolean[] actionAllowed;
java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java,66,private FormatableBitSet[] columnBitSets;
java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java,67,private List descriptorList;
java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java,77,this.actionAllowed = actionAllowed;
java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java,78,this.columnBitSets = columnBitSets;
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,635,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,636,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/BaseColumnNode.java,150,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/BaseColumnNode.java,151,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/BinaryLogicalOperatorNode.java,138,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/BinaryLogicalOperatorNode.java,139,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,474,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,475,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/CallStatementNode.java,229,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/CallStatementNode.java,230,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/CurrentDatetimeOperatorNode.java,143,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/CurrentDatetimeOperatorNode.java,144,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/CurrentRowLocationNode.java,121,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/CurrentRowLocationNode.java,122,MethodBuilder mbex)
java/engine/org/apache/derby/impl/sql/compile/DB2LengthOperatorNode.java,118,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/DB2LengthOperatorNode.java,119,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,173,"public final void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,174,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,269,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,270,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java,148,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java,149,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,324,"public void generate( ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,325,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/IsNode.java,207,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/IsNode.java,208,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,256,"protected final	void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,257,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,77,public boolean isPrimitiveType() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,85,public String getJavaTypeName() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,106,public void setJavaTypeName(String javaTypeName)
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,111,public String getPrimitiveTypeName()
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,138,public void castToPrimitive(boolean booleanValue)
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,150,"public	boolean	mustCastToPrimitive() { return mustCastToPrimitive; }"
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,159,"public	JSQLType	getJSQLType() throws StandardException"
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,160,{ return jsqlType; }
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,194,public void markForCallStatement()
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,204,abstract public JavaValueNode remapColumnReferencesToExpressions()
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,212,"abstract public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)"
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,230,"abstract public void preprocess(int numTables,"
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,285,"protected boolean generateReceiver(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,304,protected int getOrderableVariantType() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,321,protected abstract  void generateExpression(
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,358,"protected final boolean generateReceiver(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,405,"protected final void getReceiverExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,421,protected void returnValueToSQLDomain()
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,427,protected boolean valueReturnedToSQLDomain()
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,433,protected void markReturnValueDiscarded()
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,439,protected boolean returnValueDiscarded()
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,451,public void checkReliability(ValueNode sqlNode) throws StandardException {
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,661,"public void bindResultColumns(TableDescriptor targetTableDescriptor,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,662,"FromVTI targetVTI,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,663,"ResultColumnList targetColumnList,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,664,"DMLStatementNode statement,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,665,FromList fromListParam)
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1476,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1477,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1448,"public FromTable transformOuterJoins(ValueNode predicateTree, int numTables)"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1488,"public void generateCore(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1507,"protected void generateCore(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1688,"protected void oneRowRightSide(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1689,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1716,"protected int addOuterJoinArguments(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1717,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1015,joinClause.preprocess(
java/engine/org/apache/derby/impl/sql/compile/MaterializeResultSetNode.java,98,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/MaterializeResultSetNode.java,99,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/MaterializeSubqueryNode.java,48,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/MaterializeSubqueryNode.java,49,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/MiscellaneousStatementNode.java,67,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/MiscellaneousStatementNode.java,68,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/NotNode.java,95,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/NotNode.java,96,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/OrderByNode.java,146,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/OrderByNode.java,147,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ParameterNode.java,322,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ParameterNode.java,323,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ParameterNode.java,395,"static public	void generateParameterValueSet(ExpressionClassBuilder	acb,"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,650,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,651,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,582,(RequiredRowOrdering) null);
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,365,this.orderByList = orderByList;
java/engine/org/apache/derby/impl/sql/compile/ScrollInsensitiveResultSetNode.java,87,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ScrollInsensitiveResultSetNode.java,88,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,728,"public void bindResultColumns(TableDescriptor targetTableDescriptor,"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,729,"FromVTI targetVTI,"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,730,"ResultColumnList targetColumnList,"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,731,"DMLStatementNode statement,"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,732,FromList fromListParam)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,833,"protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,489,if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,490,"SanityManager.ASSERT(fromList != null && resultColumns != null,"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,491,"""Both fromList and resultColumns are expected to be non-null"");"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1961,if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1558,"SanityManager.ASSERT(selectSubquerys != null,"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1559,"""selectSubquerys is expected to be non-null"");"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,954,"whereClause.preprocess(numTables,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,553,"public void bindResultColumns(TableDescriptor targetTableDescriptor,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,554,"FromVTI targetVTI,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,555,"ResultColumnList targetColumnList,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,556,"DMLStatementNode statement,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,557,FromList fromListParam)
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,854,"protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/SetSchemaNode.java,116,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/SetSchemaNode.java,117,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/SetTransactionIsolationNode.java,94,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/SetTransactionIsolationNode.java,95,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,469,"protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,424,(RequiredRowOrdering) null);
java/engine/org/apache/derby/impl/sql/compile/SpecialFunctionNode.java,196,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/SpecialFunctionNode.java,197,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java,1748,public void generateExpression(
java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java,1749,"ExpressionClassBuilder expressionBuilder,"
java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java,1750,MethodBuilder mbex)
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,501,"public void bindResultColumns(TableDescriptor targetTableDescriptor,"
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,502,"FromVTI targetVTI,"
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,503,"ResultColumnList targetColumnList,"
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,504,"DMLStatementNode statement,"
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,505,FromList fromListParam)
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,531,"protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,658,(RequiredRowOrdering) null);
java/engine/org/apache/derby/impl/sql/compile/TestConstraintNode.java,127,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/TestConstraintNode.java,128,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/TimestampOperatorNode.java,118,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/TimestampOperatorNode.java,119,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/UnaryArithmeticOperatorNode.java,192,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/UnaryArithmeticOperatorNode.java,193,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/UnaryDateTimestampOperatorNode.java,188,"public void generateExpression( ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/UnaryDateTimestampOperatorNode.java,189,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/UnionNode.java,562,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/UnionNode.java,563,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/VirtualColumnNode.java,217,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/VirtualColumnNode.java,218,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,163,"protected void bind(DDLStatementNode ddlNode, DataDictionary dd)	throws StandardException"
java/engine/org/apache/derby/impl/sql/compile/FKConstraintDefinitionNode.java,85,"protected void bind(DDLStatementNode ddlNode, DataDictionary dd)	throws StandardException"
java/engine/org/apache/derby/impl/sql/compile/FromList.java,130,public void addFromTable(FromTable fromTable) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/FromList.java,250,"protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/FromList.java,860,public FromTable getFromTableByResultColumn(ResultColumn rc)
java/engine/org/apache/derby/impl/sql/compile/GetCurrentConnectionNode.java,116,"public void preprocess(int numTables,"
java/engine/org/apache/derby/impl/sql/compile/GetCurrentConnectionNode.java,148,"public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)"
java/engine/org/apache/derby/impl/sql/compile/GetCurrentConnectionNode.java,160,public JavaValueNode remapColumnReferencesToExpressions()
java/engine/org/apache/derby/impl/sql/compile/GetCurrentConnectionNode.java,185,protected int getOrderableVariantType()
java/engine/org/apache/derby/impl/sql/compile/GetCurrentConnectionNode.java,198,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/GetCurrentConnectionNode.java,199,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/GetCurrentConnectionNode.java,213,public void checkReliability(ValueNode sqlNode)
java/engine/org/apache/derby/impl/sql/compile/NonStaticMethodCallNode.java,219,"public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)"
java/engine/org/apache/derby/impl/sql/compile/NonStaticMethodCallNode.java,255,protected int getOrderableVariantType() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/NonStaticMethodCallNode.java,283,public JavaValueNode remapColumnReferencesToExpressions()
java/engine/org/apache/derby/impl/sql/compile/NonStaticMethodCallNode.java,329,"public void preprocess(int numTables,"
java/engine/org/apache/derby/impl/sql/compile/NonStaticMethodCallNode.java,354,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/NonStaticMethodCallNode.java,355,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/NonStaticMethodCallNode.java,452,"protected boolean generateReceiver(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,329,"public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,60,protected Object cachedTokenManager;
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,62,protected CharStream charStream;
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,65,protected final CompilerContext cc;
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,104,public String getJavaTypeName()
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,120,public String getPrimitiveTypeName()
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,146,"public	JSQLType	getJSQLType	() throws StandardException"
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,217,public JavaValueNode remapColumnReferencesToExpressions()
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,250,"public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)"
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,269,"public void preprocess(int numTables,"
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,293,protected int getOrderableVariantType() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,326,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,327,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,275,"value.preprocess(numTables,"
java/engine/org/apache/derby/impl/sql/compile/StaticClassFieldReferenceNode.java,141,"public void preprocess(int numTables,"
java/engine/org/apache/derby/impl/sql/compile/StaticClassFieldReferenceNode.java,173,"public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)"
java/engine/org/apache/derby/impl/sql/compile/StaticClassFieldReferenceNode.java,186,public JavaValueNode remapColumnReferencesToExpressions()
java/engine/org/apache/derby/impl/sql/compile/StaticClassFieldReferenceNode.java,204,protected int getOrderableVariantType()
java/engine/org/apache/derby/impl/sql/compile/StaticClassFieldReferenceNode.java,229,"public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/StaticClassFieldReferenceNode.java,230,MethodBuilder mb)
java/engine/org/apache/derby/iapi/sql/compile/Optimizable.java,38,public interface Optimizable {
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,241,FromTable ft)
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,399,"ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,650,"ColumnReference	cr;"
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,694,"public void generateQualMethod(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,1506,"FromTable optTable, boolean forPush, boolean walkOptTableSubtree)"
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,1595,"private void buildTableNumList(FromTable ft, boolean forPush)"
java/engine/org/apache/derby/impl/sql/compile/RelationalOperator.java,41,public interface RelationalOperator
java/engine/org/apache/derby/impl/sql/compile/RelationalOperator.java,114,FromTable ft);
java/engine/org/apache/derby/impl/sql/compile/RelationalOperator.java,131,"ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/RelationalOperator.java,251,"void generateQualMethod(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java,289,FromTable ft)
java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java,299,"public void generateExpressionOperand(Optimizable optTable,"
java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java,300,"int columnPosition,"
java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java,301,"ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java,302,MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java,345,"public void generateQualMethod(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/execute/GenericExecutionFactory.java,290,public InternalTriggerExecutionContext getTriggerExecutionContext
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,63,public class IndexChanger
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,108,public IndexChanger
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,161,public void setRowHolder(TemporaryRowHolderImpl rowHolder)
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,173,public void setBaseCC(ConglomerateController baseCC)
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,550,public void open()
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,562,"public void delete(ExecRow baseRow,"
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,563,RowLocation baseRowLocation)
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,580,"public void update(ExecRow oldBaseRow,"
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,609,"public void insert(ExecRow newRow, RowLocation baseRowLocation)"
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,651,public void finish()
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,652,throws StandardException
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,699,public void close()
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,700,throws StandardException
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,383,Monitor.getStream().println(MessageService.getCompleteMessage(
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,49,if (i >= 0 && i < staticInts.length)
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,51,return staticInts[i];
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,53,else
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,56,switch (i)
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,58,case 23:
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,59,"return TWENTY_THREE;	// precision of Int"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,61,case 52:
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,62,"return FIFTY_TWO;	// precision of Double"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,64,case Integer.MAX_VALUE:
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,65,return MAXINT;
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,67,case -1:
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,68,return MINUS_ONE;
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,70,default:
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,71,return new Integer(i);
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,84,if (i >= 0 && i < staticShorts.length)
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,85,return staticShorts[i];
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,86,else
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,87,return new Short(i);
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,98,if (i >= 0 && i < staticBytes.length)
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,99,return staticBytes[i];
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,100,else
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,101,return new Byte(i);
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,112,if (i >= 0 && i < staticLongs.length)
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,113,return staticLongs[(int) i];
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,114,else
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,115,return new Long(i);
java/client/org/apache/derby/client/am/CrossConverters.java,729,"e.getClass().getName(), e.getMessage(), e);"
java/client/org/apache/derby/client/am/CrossConverters.java,979,"(SQLState.LANG_FORMAT_EXCEPTION), ""byte"", e);"
java/client/org/apache/derby/client/am/CrossConverters.java,1040,"""short"", e);"
java/client/org/apache/derby/client/am/CrossConverters.java,1091,"""int"", e);"
java/client/org/apache/derby/client/am/CrossConverters.java,1133,"""long"", e);"
java/client/org/apache/derby/client/am/CrossConverters.java,1166,"""float"", e);"
java/client/org/apache/derby/client/am/CrossConverters.java,1190,"""double"", e);"
java/client/org/apache/derby/client/am/CrossConverters.java,1208,"""java.math.BigDecimal"", e);"
java/client/org/apache/derby/client/net/EncodedInputStream.java,57,"""UTF8"","
java/client/org/apache/derby/client/net/EncodedInputStream.java,70,"""UTF-16BE"","
java/client/org/apache/derby/client/net/EncodedInputStream.java,97,"String encoding,"
java/client/org/apache/derby/client/net/EncodedInputStream.java,107,try{
java/client/org/apache/derby/client/net/EncodedInputStream.java,108,"encodedStreamWriter_ = new OutputStreamWriter(encodedOutputStream_,"
java/client/org/apache/derby/client/net/EncodedInputStream.java,109,encoding);
java/client/org/apache/derby/client/net/EncodedInputStream.java,111,}catch(UnsupportedEncodingException e){
java/client/org/apache/derby/client/net/EncodedInputStream.java,114,if (SanityManager.DEBUG) {
java/client/org/apache/derby/client/net/EncodedInputStream.java,115,"SanityManager.THROWASSERT(""Unavailable encoding specified: "" +"
java/client/org/apache/derby/client/net/EncodedInputStream.java,116,"encoding, e);"
java/client/org/apache/derby/client/net/NetCursor.java,985,"private String readFdocaString(int length, String encoding) throws DisconnectException, SqlException {"
java/client/org/apache/derby/client/net/NetPackageRequest.java,197,"sqlBytes = getBytes(string, netAgent_.typdef_.getCcsidMbcEncoding());"
java/client/org/apache/derby/client/net/NetPackageRequest.java,203,"sqlBytes = getBytes(string, netAgent_.typdef_.getCcsidSbcEncoding());"
java/client/org/apache/derby/client/net/NetPackageRequest.java,63,"maxIdentifierLength,"
java/client/org/apache/derby/client/net/NetSqlca.java,47,byte[] sqlErrpBytes) throws SqlException {
java/client/org/apache/derby/client/net/NetSqlca.java,50,try
java/client/org/apache/derby/client/net/NetSqlca.java,52,"sqlState_ = bytes2String(sqlState,0,sqlState.length);"
java/client/org/apache/derby/client/net/NetSqlca.java,53,}catch(UnsupportedEncodingException uee)
java/client/org/apache/derby/client/net/NetSqlca.java,55,"throw new SqlException(null,"
java/client/org/apache/derby/client/net/NetSqlca.java,56,"new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/net/NetSqlca.java,57,"""sqlstate bytes"", ""SQLSTATE"",uee);"
java/client/org/apache/derby/client/net/Reply.java,673,"final String readString(int length, String encoding) throws DisconnectException {"
java/engine/org/apache/derby/iapi/reference/Property.java,682,"public static final String LOG_ARCHIVAL_DIRECTORY = ""derby.storage.logArchive"";"
java/engine/org/apache/derby/iapi/services/timer/TimerFactory.java,24,import java.util.Timer;
java/engine/org/apache/derby/iapi/services/timer/TimerFactory.java,38,public Timer getCancellationTimer();
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,77,public Timer getCancellationTimer()
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,212,"timer.schedule(cancelTask, timeoutMillis);"
java/engine/org/apache/derby/impl/sql/compile/OptimizerFactoryImpl.java,184,return false;
java/engine/org/apache/derby/impl/sql/compile/OptimizerFactoryImpl.java,213,numTablesInQuery);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,152,"searchStrings.addElement(""Level2CostEstimateImpl: .*"");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,222,"subStrings.addElement(""Level2CostEstimateImpl: xxXXxxFILTERED-INFORMATIONxxXXxx"");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,35,import org.apache.oro.text.regex.*;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,36,import java.util.Enumeration;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,147,"searchStrings.addElement(""^  Waiting XID : {.*}"");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,328,for (Enumeration e = sedp.propertyNames(); e.hasMoreElements(); )
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,389,for (int i = 0; i < deleteLines.size(); i++)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,391,try
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,393,regex = (String)deleteLines.elementAt(i);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,395,Pattern pattern = pcompiler.compile(regex);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,396,if (pattern == null)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,397,"System.out.println(""pattern is null"");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,398,delPatternVector.addElement(pattern);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,400,catch(MalformedPatternException e)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,402,"System.out.println(""Bad pattern."");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,403,System.out.println(e.getMessage());
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,408,for (int i = 0; i < searchStrings.size(); i++)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,410,try
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,412,regex = (String)searchStrings.elementAt(i);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,414,Pattern pattern = pcompiler.compile(regex);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,415,if (pattern == null)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,416,"System.out.println(""pattern is null"");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,417,subPatternVector.addElement(pattern);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,419,catch(MalformedPatternException e)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,421,"System.out.println(""Bad pattern."");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,422,System.out.println(e.getMessage());
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,436,lineDeleted = false;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,491,for (j = 0; j < delPatternVector.size(); j++)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,493,"if ( matcher.contains( str, (Pattern)delPatternVector.elementAt(j) ) )"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,496,String tmpp = ((Pattern)delPatternVector.elementAt(j)).getPattern();
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,500,lineDeleted = true;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,501,break;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,509,Substitution substitution;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,510,"StringSubstitution strsub = new StringSubstitution("""");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,511,"Perl5Substitution perlsub = new Perl5Substitution("""");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,512,boolean subDone = false;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,513,for (j = 0; j < subPatternVector.size(); j++)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,515,input = new PatternMatcherInput(str);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,516,Pattern patt = (Pattern)subPatternVector.elementAt(j);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,517,String pstr = patt.getPattern();
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,519,String sub = (String)subStrings.elementAt(j);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,520,"if (sub.indexOf(""$"") > 0)"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,522,perlsub.setSubstitution(sub);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,523,substitution = (Substitution)perlsub;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,524,} else {
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,525,strsub.setSubstitution(sub);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,526,substitution = (Substitution)strsub;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,529,"if ( matcher.contains( input, patt ) )"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,531,MatchResult mr = matcher.getMatch();
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,534,"result = Util.substitute(matcher, patt, substitution, str,"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,535,Util.SUBSTITUTE_ALL);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,538,str = result;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,539,subDone = true;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,542,if (subDone)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,545,outFile.println(result);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,547,else
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,550,outFile.println(str);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,551,outFile.flush();
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,30,import java.io.PrintStream;
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,36,import org.apache.derby.iapi.jdbc.JDBCBoot;
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,96,"public static String getCompleteMessage(String messageId, Object[] arguments) {"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,676,public static void logTextMessage(String messageID) {
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,677,getStream().println(MessageService.getTextMessage(messageID));
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,679,"public static void logTextMessage(String messageID, Object a1) {"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,680,"getStream().println(MessageService.getTextMessage(messageID, a1));"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,682,"public static void logTextMessage(String messageID, Object a1, Object a2) {"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,683,"getStream().println(MessageService.getTextMessage(messageID, a1, a2));"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,685,"public static void logTextMessage(String messageID, Object a1, Object a2, Object a3) {"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,686,"getStream().println(MessageService.getTextMessage(messageID, a1, a2, a3));"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,688,"public static void logTextMessage(String messageID, Object a1, Object a2, Object a3, Object a4) {"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,689,"getStream().println(MessageService.getTextMessage(messageID, a1, a2, a3, a4));"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,289,"new org.apache.derby.impl.services.monitor.FileMonitor(bootProperties, logging);"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,58,public String getTextMessage(String messageID)
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,60,"return getCompleteMessage(messageID, (Object[]) null);"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,64,"public String getTextMessage(String messageID, Object a1)"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,66,"return getCompleteMessage(messageID, new Object[]{a1});"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,70,"public String getTextMessage(String messageID, Object a1, Object a2)"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,72,"return getCompleteMessage(messageID, new Object[]{a1, a2});"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,76,"public String getTextMessage(String messageID, Object a1, Object a2,"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,77,Object a3)
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,79,"return getCompleteMessage(messageID, new Object[]{a1, a2, a3});"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,83,"public String getTextMessage(String messageID, Object a1, Object a2,"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,84,"Object a3, Object a4)"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,86,"return getCompleteMessage(messageID, new Object[]{a1, a2, a3, a4});"
java/client/org/apache/derby/client/am/Decimal.java,389,"""packed decimal"", new SqlCode(-405));"
java/client/org/apache/derby/client/am/Decimal.java,400,"b.toString(), ""packed decimal"", new SqlCode(-413));"
java/client/org/apache/derby/client/am/DisconnectException.java,54,"Object[] args, Throwable t) {"
java/client/org/apache/derby/client/am/DisconnectException.java,63,"public DisconnectException(Agent agent, ClientMessageId msgid) {"
java/client/org/apache/derby/client/am/DisconnectException.java,64,"this(agent, msgid, (Object[])null);"
java/client/org/apache/derby/client/am/DisconnectException.java,67,"public DisconnectException(Agent agent, ClientMessageId msgid, Object arg1) {"
java/client/org/apache/derby/client/am/DisconnectException.java,68,"this(agent, msgid, new Object[] { arg1 });"
java/client/org/apache/derby/client/am/DisconnectException.java,71,"public DisconnectException(Agent agent, ClientMessageId msgid, Object arg1,"
java/client/org/apache/derby/client/am/DisconnectException.java,72,Object arg2) {
java/client/org/apache/derby/client/am/DisconnectException.java,73,"this(agent, msgid, new Object[] { arg1, arg2 });"
java/client/org/apache/derby/client/am/DisconnectException.java,79,"e.getMessage(), e);"
java/client/org/apache/derby/client/am/Lob.java,170,"typeDesc,"
java/client/org/apache/derby/client/am/Lob.java,171,ioe
java/client/org/apache/derby/client/net/NetAgent.java,126,"new Object[] { e.getException().getClass().getName(), server,"
java/client/org/apache/derby/client/net/NetAgent.java,127,"Integer.toString(port), e.getException().getMessage() },"
java/client/org/apache/derby/client/net/NetAgent.java,128,e.getException());
java/client/org/apache/derby/client/net/NetAgent.java,145,"e.getMessage(), e);"
java/client/org/apache/derby/client/net/NetAgent.java,160,"e.getMessage(), e);"
java/client/org/apache/derby/client/net/NetAgent.java,240,"e.getMessage(), e);"
java/client/org/apache/derby/client/net/NetAgent.java,278,"e.getMessage(), e);"
java/client/org/apache/derby/client/net/NetAgent.java,294,"e.getMessage(), e);"
java/client/org/apache/derby/client/net/NetAgent.java,311,"e.getMessage(), e);"
java/client/org/apache/derby/client/net/NetAgent.java,411,"cause.getMessage(), cause));"
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,147,SQLException newSQLException(String messageId) {
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,148,return localConn.newSQLException(messageId);
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,150,"SQLException newSQLException(String messageId, Object arg1) {"
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,151,"return localConn.newSQLException(messageId, arg1);"
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,153,"SQLException newSQLException(String messageId, Object arg1, Object arg2) {"
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,154,"return localConn.newSQLException(messageId, arg1, arg2);"
java/demo/workingwithderby/WwdEmbedded.java,146,errorPrint(e);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ConcurrencyTest.java,428,"ps2 = con2.prepareStatement(""insert into t1 values(?,?,?,?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ConcurrencyTest.java,512,"ps2 = con2.prepareStatement(""insert into t1 values(?,?,?,?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/HoldabilityTest.java,497,"prepareStatement(""insert into t1 values (?,?,?,?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/HoldabilityTest.java,566,"prepareStatement(""insert into t1 values (?,?,?,?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURDataModelSetup.java,100,"prepareStatement(""insert into t1 values (?,?,?,?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURDataModelSetup.java,225,"? ""create table t1 (id int primary key, a int, b int, c varchar(5000))"""
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURDataModelSetup.java,226,": ""create table t1 (id int, a int, b int, c varchar(5000))"";"
java/engine/org/apache/derby/impl/store/access/sort/MergeInserter.java,139,estimatedMemoryUsed = (currentTotalMemory-currentFreeMemory) -
java/engine/org/apache/derby/impl/store/access/sort/MergeInserter.java,140,(beginTotalMemory-beginFreeMemory);
java/engine/org/apache/derby/impl/store/access/sort/MergeInserter.java,280,beginFreeMemory = jvm.freeMemory();
java/engine/org/apache/derby/impl/store/access/sort/MergeInserter.java,281,beginTotalMemory = jvm.totalMemory();
java/engine/org/apache/derby/impl/store/access/sort/MergeInserter.java,282,estimatedMemoryUsed = 0;
java/drda/org/apache/derby/impl/drda/CodePoint.java,741,"static final int RDBNAM_LEN = 18; //dbname fixed length for SQLAM level 6, for level 7,"
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,216,if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,218,"SanityManager.ASSERT(dummySubqueryList.size() == 0,"
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,219,"""dummySubqueryList.size() is expected to be 0"");"
java/demo/workingwithderby/WwdClientExample.java,142,errorPrint(e);
java/engine/org/apache/derby/impl/io/CPFile.java,95,InputStream is = null;
java/engine/org/apache/derby/impl/io/CPFile.java,96,ClassLoader cl = Thread.currentThread().getContextClassLoader();
java/engine/org/apache/derby/impl/io/CPFile.java,97,if (cl != null)
java/engine/org/apache/derby/impl/io/CPFile.java,98,is = cl.getResourceAsStream(path);
java/engine/org/apache/derby/impl/io/CPFile.java,102,if (is == null)
java/engine/org/apache/derby/impl/io/CPFile.java,104,cl = getClass().getClassLoader();
java/engine/org/apache/derby/impl/io/CPFile.java,108,if (cl != null)
java/engine/org/apache/derby/impl/io/CPFile.java,109,is = cl.getResourceAsStream(path);
java/engine/org/apache/derby/impl/io/CPFile.java,110,else
java/engine/org/apache/derby/impl/io/CPFile.java,111,is = ClassLoader.getSystemResourceAsStream(path);
java/engine/org/apache/derby/impl/io/CPFile.java,114,if (is == null)
java/engine/org/apache/derby/impl/io/CPFile.java,115,throw new FileNotFoundException(toString());
java/engine/org/apache/derby/impl/io/CPFile.java,116,return is;
java/engine/org/apache/derby/impl/io/CPFile.java,127,ClassLoader cl = Thread.currentThread().getContextClassLoader();
java/engine/org/apache/derby/impl/io/CPFile.java,130,myURL = cl.getResource(path);
java/engine/org/apache/derby/impl/io/CPFile.java,142,return cl.getResource(path);
java/engine/org/apache/derby/impl/io/CPFile.java,144,return ClassLoader.getSystemResource(path);
java/engine/org/apache/derby/impl/sql/compile/TableName.java,237,throws StandardException
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,261,columnDescriptor = new ColumnDescriptor(
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,262,"columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,263,"index++,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,264,"columnInfo[ix].dataType,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,265,"columnInfo[ix].defaultValue,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,266,"columnInfo[ix].defaultInfo,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,267,"td,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,268,"defaultUUID,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,269,"columnInfo[ix].autoincStart,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,270,"columnInfo[ix].autoincInc,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,271,columnInfo[ix].autoinc_create_or_modify_Start_Increment
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,273,else
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,274,columnDescriptor = new ColumnDescriptor(
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,275,"columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,276,"index++,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,277,"columnInfo[ix].dataType,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,278,"columnInfo[ix].defaultValue,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,279,"columnInfo[ix].defaultInfo,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,280,"td,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,281,"defaultUUID,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,282,"columnInfo[ix].autoincStart,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,283,columnInfo[ix].autoincInc
java/engine/org/apache/derby/impl/store/access/heap/HeapController.java,541,return(
java/engine/org/apache/derby/impl/store/access/heap/HeapController.java,542,open_conglom.getContainer().getLockingPolicy().
java/engine/org/apache/derby/impl/store/access/heap/HeapController.java,543,lockRecordForWrite(
java/engine/org/apache/derby/impl/store/access/heap/HeapController.java,544,"open_conglom.getRawTran(), rh, false, false));"
java/engine/org/apache/derby/impl/store/access/heap/HeapController.java,101,"(Heap) open_conglom.getConglomerate(),"
java/engine/org/apache/derby/impl/store/access/heap/HeapController.java,102,pos.current_page.getPageNumber()));
java/engine/org/apache/derby/iapi/services/monitor/ModuleFactory.java,282,Set the priority of the current thread.
java/engine/org/apache/derby/iapi/services/monitor/ModuleFactory.java,283,If the current thread was not returned by getDaemonThread() then no action is taken.
java/engine/org/apache/derby/iapi/services/monitor/ModuleFactory.java,285,public void setThreadPriority(int priority);
java/engine/org/apache/derby/impl/jdbc/EmbedConnectionContext.java,112,StatementContext sc = conn.getLanguageConnection().getStatementContext();
java/engine/org/apache/derby/impl/store/access/RAMAccessManager.java,460,"TransactionManager  xact_mgr,"
java/engine/org/apache/derby/impl/store/access/RAMAccessManager.java,461,long                conglomid)
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,81,private Heap          heap            = null;
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,82,private long          page_number     = ContainerHandle.INVALID_PAGE_NUMBER;
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,91,"Heap            heap,"
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,92,long            input_page_number)
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,95,this.heap           = heap;
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,96,this.page_number    = input_page_number;
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,350,"purgeCommittedDeletes(heapcontroller, this.page_number);"
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,391,"""requeueing on page num = "" + page_number);"
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,333,heap.open(
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,343,"heap,"
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,121,"(Heap) open_conglom.getConglomerate(),"
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,122,pos.current_page.getPageNumber()));
java/drda/org/apache/derby/impl/drda/AppRequester.java,25,import org.apache.derby.iapi.reference.Limits;
java/drda/org/apache/derby/impl/drda/AppRequester.java,265,return Limits.DB2_JCC_MAX_EXCEPTION_PARAM_LENGTH;
java/client/org/apache/derby/client/am/SQLExceptionFactory.java,45,int errCode) {